{
  "cap-voting-power": {
    "key": "cap-voting-power",
    "author": "unRealGamer28",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "cap-voting-power",
          "params": {
            "votingEscrowContractAddress": "0x3362A77AC77fF5098618F8C7CFB4eA27E738229f",
            "decimals": 18,
            "vestingAddresses": [
              {
                "address": "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
                "lockedTokens": 1000,
                "cliffMonths": 12,
                "vestingMonths": 24,
                "startDateTimestamp": 1602033545,
                "initialReleasePercentage": 0.25
              },
              {
                "address": "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
                "lockedTokens": 2000,
                "cliffMonths": 12,
                "vestingMonths": 24,
                "startDateTimestamp": 1602033545,
                "initialReleasePercentage": 0.25
              },
              {
                "address": "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
                "lockedTokens": 5000,
                "cliffMonths": 12,
                "vestingMonths": 24,
                "startDateTimestamp": 1602033545,
                "initialReleasePercentage": 0.25
              },
              {
                "address": "0xC83df6FD76484938C10843fa37c7Cbba327c8eDC",
                "lockedTokens": 10000,
                "cliffMonths": 12,
                "vestingMonths": 24,
                "startDateTimestamp": 1602033545,
                "initialReleasePercentage": 0.25
              },
              {
                "address": "0x8E83aD3ecC12E2e2Df1021CDe01e53C9465D5883",
                "lockedTokens": 20000,
                "cliffMonths": 12,
                "vestingMonths": 24,
                "startDateTimestamp": 1602033545,
                "initialReleasePercentage": 0.25
              }
            ],
            "clampPercentage": 0.4
          }
        },
        "network": "80001",
        "addresses": [
          "0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0xC83df6FD76484938C10843fa37c7Cbba327c8eDC",
          "0x8E83aD3ecC12E2e2Df1021CDe01e53C9465D5883"
        ],
        "snapshot": 33129875
      }
    ],
    "schema": null,
    "about": "# cap-voting-power\n\nThis strategy is used to calculate the off-chain voting power for addresses with tokens vested in a contract. It also includes a clamping mechanism to limit the voting power of the vesting contracts based on the total voting power of the voting escrow contract. All parameters are required.\n\nSome things to note if you plan on using this strategy:\n\n1. All vestingAddresses objects MUST have address, lockedTokens, cliffMonths, vestingMonths, startDateTimestamp and initialReleasePercentage.\n2. The Vesting Contract's voting power is clamped to a percentage (clampPercentage) of the total voting power. This value must be between 0 and 1.\n3. Total voting power is calculated based on the Voting Escrow Contract's voting power. Therefore, you must specify the voting escrow contract address (votingEscrowContractAddress) and the number of decimals in your token (decimals) as parameters.\n4. For optimal performance and memory management, the strategy imposes a limit of 500 vesting addresses in the parameters. Adhere to this limit when setting up the strategy.\n\nHere is an example of parameters:\n\n```json\n{\n  \"votingEscrowContractAddress\": \"0x3362A77AC77fF5098618F8C7CFB4eA27E738229f\",\n  \"decimals\": 18,\n  \"vestingAddresses\": [\n    {\n      \"address\": \"0x1E1A51E25f2816335cA436D65e9Af7694BE232ad\",\n      \"lockedTokens\": 1000,\n      \"cliffMonths\": 12,\n      \"vestingMonths\": 24,\n      \"startDateTimestamp\": 1602033545,\n      \"initialReleasePercentage\": 0.25\n    },\n    {\n      \"address\": \"0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C\",\n      \"lockedTokens\": 2000,\n      \"cliffMonths\": 12,\n      \"vestingMonths\": 24,\n      \"startDateTimestamp\": 1602033545,\n      \"initialReleasePercentage\": 0.25\n    },\n    {\n      \"address\": \"0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e\",\n      \"lockedTokens\": 5000,\n      \"cliffMonths\": 12,\n      \"vestingMonths\": 24,\n      \"startDateTimestamp\": 1602033545,\n      \"initialReleasePercentage\": 0.25\n    },\n    {\n      \"address\": \"0xC83df6FD76484938C10843fa37c7Cbba327c8eDC\",\n      \"lockedTokens\": 10000,\n      \"cliffMonths\": 12,\n      \"vestingMonths\": 24,\n      \"startDateTimestamp\": 1602033545,\n      \"initialReleasePercentage\": 0.25\n    },\n    {\n      \"address\": \"0x8E83aD3ecC12E2e2Df1021CDe01e53C9465D5883\",\n      \"lockedTokens\": 20000,\n      \"cliffMonths\": 12,\n      \"vestingMonths\": 24,\n      \"startDateTimestamp\": 1602033545,\n      \"initialReleasePercentage\": 0.25\n    }\n  ],\n  \"clampPercentage\": 0.4\n}\n```"
  },
  "izumi-veizi": {
    "key": "izumi-veizi",
    "author": "izumiFinance",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "izumi-veizi",
          "params": {
            "address": "0xB56A454d8DaC2AD4cB82337887717a2a427Fcd00",
            "symbol": "veiZi",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x6534069842F1aFCbb5b6e27eA2bAc2243f85FFF8",
          "0x423F9B19Db22337D249c1d85eE045700846953B3",
          "0x9558ab3bd4429B1D5658D9ea6C5E8F2b8B4B7431",
          "0x9997d7120862CEda99aB4a1c43698e0941F87b20",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x381F298A34D286CBe36b1C17097aE36350B66DC8",
          "0x760484042a7856E62B627318796Ebb609C8131a1",
          "0x72956796334bA8EB7c10a474e97F6F8773E40cFf",
          "0x5b54a9439c0b2B88E35DB66f93882479fEd4FDfb",
          "0x5096905F6CFC0F7BBEE09D72Bd97DAE4a95Bc3d6",
          "0xbCe0AF8E8e47C6f3E727cD95c4118f14a34A0DFE",
          "0xDaB558F089dc6CBD96eae358bB12Cb4aD6043647",
          "0x8E79c736De9c10c4b9909077560DcD2F78b0B969",
          "0x7C28A20A66d687107dfA810566f237fb3810CBf4"
        ],
        "snapshot": 16619300
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. veiZi"
              ],
              "maxLength": 16
            },
            "address": {
              "type": "string",
              "title": "Contract address",
              "examples": [
                "e.g. 0xB56A454d8DaC2AD4cB82337887717a2a427Fcd00"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ]
            }
          },
          "required": [
            "address",
            "decimals"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# erc20-balance-of\n\nThis is a strategy which used for counting veizi for izumi voting, it returns the balances of the voters for the veiZi including the amount of staked veNFT.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0xB56A454d8DaC2AD4cB82337887717a2a427Fcd00\",\n  \"symbol\": \"veiZi\",\n  \"decimals\": 18\n}\n```\n"
  },
  "eco-voting-power": {
    "key": "eco-voting-power",
    "author": "carlosfebres",
    "version": "1.0.1",
    "examples": [
      {
        "name": "Example Eco Voting Power",
        "strategy": {
          "name": "eco-voting-power",
          "params": {
            "delegatee": "0xbFB97a6e13E42518522379C94e0Ddd99F7b70b8b"
          }
        },
        "network": "5",
        "addresses": [
          "0x18ab8b4fba1c770b279b97686f4265e882aa1e94",
          "0x40051DE3036d76Aee7B16Cb2c21c86eB0dFa3f4c",
          "0x35244c622e5034dc1bcf2ff3931cfa57192572ff",
          "0x3ec87777b22d12ea95c55456324433a4c5a7bfe8",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0xE3DE066aC4CFa2C6169C6e8ccc2afe7b4E440C1D",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x8d07D225a769b7Af3A923481E1FdF49180e6A265",
          "0x8f60501dE5b9b01F9EAf1214dbE1924aA97F7fd0",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x17ea92D6FfbAA1c7F6B117c1E9D0c88ABdc8b84C",
          "0x38C0039247A31F3939baE65e953612125cB88268"
        ],
        "snapshot": 8620080
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "delegatee": {
              "type": "string",
              "title": "Delegatee Address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            }
          },
          "required": [
            "delegatee"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# eco-voting-power\n\nThis is strategy returns the ECO voting power delegated to the `delegatee`.\n\nHere is an example of parameters:\n\n```json\n{\n  \"delegatee\": \"0x6b175474e89094c44da98b954eedeac495271d0f\"\n}\n```\n"
  },
  "forta-shares": {
    "key": "forta-shares",
    "author": "emanuel-sol",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "forta-shares"
        },
        "network": "137",
        "addresses": [
          "0x8eedf056de8d0b0fd282cc0d7333488cc5b5d242"
        ],
        "snapshot": 30451309
      }
    ],
    "schema": null,
    "about": "# forta-shares\n\nThis strategy calculates the voting power of the FORT shares owned by an address. This strategy requires no parameters."
  },
  "across-staked-acx": {
    "key": "across-staked-acx",
    "author": "nicholaspai",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example of Across Staked-ACX Strategy",
        "strategy": {
          "name": "across-staked-acx",
          "params": {
            "acceleratingDistributorAddress": "0x9040e41eF5E8b281535a96D9a48aCb8cfaBD9a48",
            "acxLpTokenAddress": "0xb0C8fEf534223B891D4A430e49537143829c4817",
            "wethLpTokenAddress": "0x28F77208728B0A45cAb24c4868334581Fe86F95B",
            "usdcLpTokenAddress": "0xC9b09405959f63F72725828b5d449488b02be1cA",
            "wbtcLpTokenAddress": "0x59C1427c658E97a7d568541DaC780b2E5c8affb4",
            "daiLpTokenAddress": "0x4fabacac8c41466117d6a38f46d08ddd4948a0cb",
            "hubPoolAddress": "0xc186fa914353c44b2e33ebe05f21846f1048beda",
            "acxTokenAddress": "0x44108f0223A3C3028F5Fe7AEC7f9bb2E66beF82F"
          }
        },
        "network": "1",
        "addresses": [
          "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
          "0x718648C8c531F91b528A7757dD2bE813c3940608",
          "0x996267d7d1B7f5046543feDe2c2Db473Ed4f65e9",
          "0xbfb496ACb99299e9eCE84B3FD1B3fDd0f6CDDf49"
        ],
        "snapshot": 16171362
      }
    ],
    "schema": null,
    "about": "# across-staked-acx\n\nThis strategy returns the voting power of an address that has staked any LP tokens in the [AcceleratingDistributor](https://etherscan.io/address/0x9040e41eF5E8b281535a96D9a48aCb8cfaBD9a48)\ncontract. The voting power is calculated as the amount of staked ACX-LP tokens multiplied by the current exchange\nrate of ACX-LP to ACX. Finally, outstanding rewards for all staked LP positions denominated in ACX are then added to voting power.\n\n## Params\n\n- `acceleratingDistributorAddress` - (**Required**, `string`) Address of contract that emits ACX rewards for staked LP tokens.\n- `acxLpTokenAddress` - (**Required**, `string`) Address of ACX-LP token.\n- `wethLpTokenAddress` - (**Required**, `string`) Address of WETH-LP token.\n- `usdcLpTokenAddress` - (**Required**, `string`) Address of USDC-LP token.\n- `wbtcLpTokenAddress` - (**Required**, `string`) Address of WBTC-LP token.\n- `daiLpTokenAddress` - (**Required**, `string`) Address of DAI-LP token.\n- `hubPoolAddress` - (**Required**, `string`) Address of contract users can deposit tokens to receive LP tokens.\n- `acxTokenAddress` - (**Required**, `string`) Address of token that is emitted to staked LP users in the AcceleratingDistributor.\n\nHere is an example of parameters that work for `\"network\": \"1\"`\n\n```json\n{\n    \"acceleratingDistributorAddress\": \"0x9040e41eF5E8b281535a96D9a48aCb8cfaBD9a48\",\n    \"acxLpTokenAddress\": \"0xb0C8fEf534223B891D4A430e49537143829c4817\",\n    \"wethLpTokenAddress\": \"0x28F77208728B0A45cAb24c4868334581Fe86F95B\",\n    \"usdcLpTokenAddress\": \"0xC9b09405959f63F72725828b5d449488b02be1cA\",\n    \"wbtcLpTokenAddress\": \"0x59C1427c658E97a7d568541DaC780b2E5c8affb4\",\n    \"daiLpTokenAddress\": \"0x4fabacac8c41466117d6a38f46d08ddd4948a0cb\",\n    \"hubPoolAddress\": \"0xc186fa914353c44b2e33ebe05f21846f1048beda\",\n    \"acxTokenAddress\": \"0x44108f0223A3C3028F5Fe7AEC7f9bb2E66beF82F\"\n}\n```\n"
  },
  "ethermon-erc721": {
    "key": "ethermon-erc721",
    "author": "syedMohib44",
    "version": "0.0.2",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "ethermon-erc721",
          "params": {
            "EMONA_ADDRESS": "0x9928a8ea82d86290dfd1920e126b3872890525b3",
            "tokenWeightIPFS": "abb6cbba-f8e6-4fce-89a8-7360cda5daf9-bucket/weights.json",
            "EMON_DATA_ADDRESS": "0x0f05607e51d5224300520a710898a8467d8d1117",
            "symbol": "EMONA"
          }
        },
        "network": "137",
        "addresses": [
          "0x111c26A02ca4050684D4083d72E2A7C1dCbA853f"
        ],
        "snapshot": 14101222
      }
    ],
    "schema": null,
    "about": "# ethermon-erc721\n\nThis strategy returns the score of voters dependes upon number of Ethermon NFTs they have and the max tokens it calculate are 200.\n\n# parameters\n```json\n{\n  \"address\": \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n  \"symbol\": \"EMONA\",\n  \"decimals\": 18\n}\n```\n"
  },
  "etherorcs-combo-balanceof": {
    "key": "etherorcs-combo-balanceof",
    "author": "tempest-sol",
    "version": "0.1.1",
    "examples": [
      {
        "name": "Ether Orcs Balance Of Example",
        "strategy": {
          "name": "etherorcs-combo-balanceof"
        },
        "network": "1",
        "addresses": [
          "0x90da518CfC3ceb176eD92eB83f933E8586880B8a",
          "0x0d388658633418e8E51A7CF67c7059F863F053d9",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x8d07D225a769b7Af3A923481E1FdF49180e6A265",
          "0x8f60501dE5b9b01F9EAf1214dbE1924aA97F7fd0",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x17ea92D6FfbAA1c7F6B117c1E9D0c88ABdc8b84C",
          "0x38C0039247A31F3939baE65e953612125cB88268"
        ],
        "snapshot": 11437846
      }
    ],
    "schema": null,
    "about": "This is a simple strategy that takes no parameters and returns the count of Orcs owned from the graphql query at: https://open-api.etherorcs.com/api/graphql\n"
  },
  "recusal-list": {
    "key": "recusal-list",
    "author": "bshyong",
    "version": "0.2.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "recusal-list",
          "params": {
            "addresses": [
              "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
              "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7"
            ],
            "strategy": {
              "name": "erc721",
              "params": {
                "address": "0x3B8CeB26f4FabACbD02b22caeceeb26D67E4013A",
                "symbol": "MLZ"
              }
            }
          }
        },
        "network": "1",
        "addresses": [
          "0xc9417BaeF2f55583e52dD2eC64B74AcafE8A05db",
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x38C0039247A31F3939baE65e953612125cB88268"
        ],
        "snapshot": 15008926
      }
    ],
    "schema": null,
    "about": "# recusal-list\n\nThis is strategy for disallowing certain address from voting due to conflict of interest or other reasons for recusal.\nYou can pass any strategy as an optionnal parameter to combine the recusal with another one.\n\nBelow is an example of parameters. The address list renotes which addresses to restrict. The strategy and its params defines the strategy to use if needed.\n\n```json\n{\n  \"addresses\": [\n    \"0xa478c2975ab1ea89e8196811f51a7b7ade33eb11\",\n    \"0xeF8305E140ac520225DAf050e2f71d5fBcC543e7\"\n  ],\n  \"strategy\": {\n    \"name\": \"erc721\",\n    \"params\": {\n      \"address\": \"0x3B8CeB26f4FabACbD02b22caeceeb26D67E4013A\",\n      \"symbol\": \"MLZ\"\n    }\n  }\n}\n```\n"
  },
  "landdao-token-tiers": {
    "key": "landdao-token-tiers",
    "author": "ethantddavis",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "landdao-token-tiers",
          "params": {
            "address": "0xEa25e2b3E35c67876957EE00a28Cd912ff113F54",
            "symbol": "LAND",
            "tokenWeightIPFS": "QmXrDNrjX8xZu9bdNA1iiW7Ee12RADQFwwhCeLQnwqG2TJ"
          }
        },
        "network": "1",
        "addresses": [
          "0x863379Ab401d454834E1FE2eCe48F51a29eE9d7A",
          "0x7374DDf849566c28372AD830DA45a1c9D088453B",
          "0x0F98A3F6BB46e30013E8967b3615296c0adb9037",
          "0x8e7795f783635ea08097d2aaf19da672bf79dde0",
          "0xabab67aed584bdcfc6c9d59740b4181820cd04ac",
          "0xbd8a92e249090249c5fb2ff71e47b69fb650d3af",
          "0x67f72412a592d066a2e688e62664116deabeab29"
        ],
        "snapshot": 14100000
      }
    ],
    "schema": null,
    "about": "# erc721 with tokenid scattered weights\n\nThis strategy allows you to weight erc721's with different values from ipfs.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0xEa25e2b3E35c67876957EE00a28Cd912ff113F54\",\n  \"symbol\": \"LAND\",\n  \"tokenWeightIPFS\": \"QmXrDNrjX8xZu9bdNA1iiW7Ee12RADQFwwhCeLQnwqG2TJ\"\n}\n```\n"
  },
  "giveth-balancer-balance": {
    "key": "giveth-balancer-balance",
    "author": "pkretzschmar",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "giveth-balancer-balance",
          "params": {
            "symbol": "GIV",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x839395e20bbb182fa440d08f850e6c7a8f6f0780",
          "0x960a16c9070a9bbbb03e1bfd418982636d56d77d",
          "0x00d18ca9782be1caef611017c2fbc1a39779a57c"
        ],
        "snapshot": 14036425
      }
    ],
    "schema": null,
    "about": "# Giveth Balancer balance\n\nThis strategy sums up all the GIV on Balancer LP pools.\n\nHere is an example of parameters:\n\n```json\n{\n  \"symbol\": \"GIV\",\n  \"decimals\": 18\n}\n```\n"
  },
  "giveth-gnosis-balance-v2": {
    "key": "giveth-gnosis-balance-v2",
    "author": "mateodaza",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "giveth-gnosis-balance-v2",
          "params": {
            "symbol": "GIV",
            "decimals": 18
          }
        },
        "network": "100",
        "addresses": [
          "0x839395e20bbb182fa440d08f850e6c7a8f6f0780",
          "0x960a16c9070a9bbbb03e1bfd418982636d56d77d",
          "0x00d18ca9782be1caef611017c2fbc1a39779a57c"
        ],
        "snapshot": 24831608
      }
    ],
    "schema": null,
    "about": "# Giveth Gnosis balance\n\nThis strategy sums up all the GIV on xDai, including the ones that are staked in Honeyswap pools, Sushiswap pools, and single staked on GIV pool. This version considers GIVpower\n\nHere is an example of parameters:\n\n```json\n{\n  \"symbol\": \"GIV\",\n  \"decimals\": 18\n}\n```\n"
  },
  "nouns-rfp-power": {
    "key": "nouns-rfp-power",
    "author": "waterdrops",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example of Nouns RFP Power Strategy",
        "strategy": {
          "name": "nouns-rfp-power",
          "params": {
            "governanceStrategy": "0x50Acc1831E954fB5bB407d7A3CFe1e7769A41ab0",
            "powerType": "vote",
            "symbol": "Voting Power",
            "decimals": 18
          }
        },
        "network": "4",
        "addresses": [
          "0x5BC928BF0DAb1e4A2ddd9e347b0F22e88026D76c",
          "0xc0768A60Cf71341C942930E077b7EDf390c3E4c7"
        ],
        "snapshot": 9647529
      }
    ],
    "schema": null,
    "about": ""
  },
  "anti-whale": {
    "key": "anti-whale",
    "author": "joaomajesus",
    "version": "1.0.0",
    "examples": [
      {
        "name": "anti-whale",
        "strategy": {
          "name": "anti-whale",
          "params": {
            "symbol": "ANTI",
            "strategy": {
              "name": "erc20-balance-of",
              "params": {
                "address": "0x579cea1889991f68acc35ff5c3dd0621ff29b0c9",
                "symbol": "IQ",
                "decimals": 18
              }
            },
            "antiWhale": {
              "inflectionPoint": 1000,
              "threshold": 250,
              "exponent": 0.5
            },
            "log": true
          }
        },
        "network": "1",
        "addresses": [
          "0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5",
          "0x9feab70f3c4a944b97b7565bac4991df5b7a69ff",
          "0xaca39b187352d9805deced6e73a3d72abf86e7a0"
        ],
        "snapshot": 12419836
      }
    ],
    "schema": null,
    "about": "# Anti-Whale strategy\n\n## Description\n\nThis strategy executes a configured strategy and applies an anti-whale measure to its results to reduce the impact of big wallets in the resulting value, reducing the effect on the voting power as the token amount increases.\n\nIt will apply the following to the result:\n  \n  ```none\n  If result > antiWhale.threshold\n    result = antiWhale.inflectionPoint * ( result / antiWhale.inflectionPoint ) ^ antiWhale.exponent\n\n  If result <= antiWhale.threshold {\n    thresholdMultiplier = ( antiWhale.inflectionPoint * ( antiWhale.threshold / antiWhale.inflectionPoint )^antiWhale.exponent ) / antiWhale.threshold\n\n    result = result * thresholdMultiplier\n  }\n  ```\n\n## Accepted options\n\n- **strategy.name:** name of the strategy to run\n\n- **strategy.params:** the strategy specific params to execute it.\n  \n- **log:** Boolean flag to enable or disable logging to the console (used for debugging purposes during development)\n\n- **thresholdMultiplier:** The multiplier at which all results below threshold are multiplied. This is ratio of antiWhale/result at the threshold point.\n\n- **antiWhale.threshold:** Point at which antiWhale effect no longer applies. Results less than this will be treated with a static multiplier. This is to reduce infinite incentive for multiple wallet exploits.\n  - default: 1625.\n\n  - lower cap: > 0 - set to default if <= 0.\n\n- **antiWhale.inflectionPoint:** Point at which output matches result. Results less than this increase output. Results greater than this decrease output.\n  - default: 6500.\n\n  - lower cap: > 0 - set to default if <= 0.\n\n  - must be >= antiWhale.threshold. Otherwise will be same as antiWhale.threshold.\n\n- **antiWhale.exponent:** The exponent is responsible for the antiWhale effect. Must be less than one, or else it will have a pro-whale effect. Must be greater than zero, or else it will cause total voting power to trend to zero.\n  - default: 0.5.\n\n  - upper cap: 1.\n\n  - lower cap: > 0 - set to default if <= 0.\n  \n## Examples\n\n```json\n[\n  {\n    \"name\": \"anti-whale\",\n    \"strategy\": {\n      \"name\": \"anti-whale\",\n      \"params\": {\n        \"strategy\": {\n          \"name\": \"erc20-balance-of\",\n          \"network\": \"1\",\n          \"params\": {\n            \"address\": \"0x579cea1889991f68acc35ff5c3dd0621ff29b0c9\",\n            \"decimals\": 18\n          }\n        },\n        \"antiWhale\": {\n          \"inflectionPoint\": 1000,\n          \"threshold\": 250,\n          \"exponent\": 0.5\n        },\n        \"log\": true\n      }\n    },\n    \"network\": \"1\",\n    \"addresses\": [\n      \"0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\",\n      \"0x9feab70f3c4a944b97b7565bac4991df5b7a69ff\",\n      \"0xaca39b187352d9805deced6e73a3d72abf86e7a0\"\n    ],\n    \"snapshot\": 12419836\n  }\n]\n```\n"
  },
  "balancer": {
    "key": "balancer",
    "author": "bonustrack",
    "version": "0.2.0",
    "examples": [
      {
        "name": "Balancer Pool Tokens",
        "strategy": {
          "name": "balancer",
          "params": {
            "address": "0xba100000625a3754423978a60c9317c58a424e3D",
            "symbol": "BAL (in Balancer)",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0xff052381092420b7f24cc97fded9c0c17b2cbbb9",
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x74c3646adad7e196102d1fe35267adfd401a568b",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x09e3Ab1Ce8126bc411d7132cb4673409a60023cD",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x3F9E2c33B07a2153313e4a3D828fD4dC7fA53230",
          "0x2E23c126921d5707e729ECF9D38B5e7819a0eB5F"
        ],
        "snapshot": 12424932
      }
    ],
    "schema": null,
    "about": ""
  },
  "balancer-smart-pool": {
    "key": "balancer-smart-pool",
    "author": "kibagateaux",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Balancer Smart Pool",
        "strategy": {
          "name": "balancer-smart-pool",
          "params": {
            "address": "0x06745bee20ad9cc7dfb6f40b66504397235f547c",
            "symbol": "GEAR",
            "decimals": 18,
            "pool": "0x3c035c3f8e271e12df1bed648024e60249f507c3",
            "governanceToken": "0xfb5453340c03db5ade474b27e68b6a9c6b2823eb"
          }
        },
        "network": "1",
        "addresses": [
          "0x52d81d4a8b18D6BA0b2c01dd2f9927eAf755dd0a",
          "0x2150Cb38ee362bceAC3d4A2704A82eeeD02E93EC",
          "0xdf2ff5946df21f818d5f67e62d22486ca470798e"
        ],
        "snapshot": 12815130
      }
    ],
    "schema": null,
    "about": ""
  },
  "lit-dao-governance": {
    "key": "lit-dao-governance",
    "author": "wizardlabsxyz",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "lit-dao-governance",
          "params": {
            "symbol": "LIT"
          }
        },
        "network": "1",
        "addresses": [
          "0xc2e5e9Cc4F26Dc179C3f386e702283576B5157Fb",
          "0x515fdd6f50cb6330399f5948f6422d8e27af012d",
          "0xe129ed3b7Cb2AccE3A760bf66046ab53DF9D689d"
        ],
        "snapshot": 16388642
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. DOODLE"
              ],
              "maxLength": 16
            }
          },
          "required": [],
          "additionalProperties": false
        }
      }
    },
    "about": "# lit-dao-governance\n\nThis strategy is specific to lit-dao and should not be used in any context outside of the official LIT snapshot space.\n\nThere are no parameters for this strategy\n"
  },
  "balance-in-vdfyn-vault": {
    "key": "balance-in-vdfyn-vault",
    "author": "vatsalgupta13",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "balance-in-vdfyn-vault",
          "params": {
            "name": "vDfyn Vault",
            "contractAddress": "0x75455c3DE45dD32CBE9a5aD5E518D3D50823c976",
            "symbol": "VDFYN",
            "scoreMultiplier": 1,
            "methodABI": [
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                  }
                ],
                "name": "balanceOf",
                "outputs": [
                  {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                  }
                ],
                "stateMutability": "view",
                "type": "function"
              },
              {
                "inputs": [],
                "name": "ratio",
                "outputs": [
                  {
                    "internalType": "uint256",
                    "name": "dfynAmount_",
                    "type": "uint256"
                  }
                ],
                "stateMutability": "view",
                "type": "function"
              }
            ]
          }
        },
        "network": "137",
        "addresses": [
          "0x41CdE29bF9aea095fDD204D150451678b2c6A736",
          "0xD7B26f34775fa41D6dCE182851642573aBF9B532"
        ],
        "snapshot": 19310208
      }
    ],
    "schema": null,
    "about": "# vDfyn contract call strategy\n\nThis strategy allows users to calculate the total amount of Dfyn staked by the user in the vDfyn vault.\n\n## Example\n\nThe space config will look like this:\n\n```JSON\n{\n  \"strategies\": [\n    [\"balance-in-vdfyn-vault\", {\n      // vDfyn vault contract\n      \"contractAddress\": \"0x75455c3DE45dD32CBE9a5aD5E518D3D50823c976\",\n      // scoreMultiplier can be used to increase users' scores by a certain magnitude\n      \"scoreMultiplier\": 2,\n      // ABI for balanceOf method\n      \"methodABI\": [\n                    {\n                        \"inputs\": [\n                            {\n                                \"internalType\": \"address\",\n                                \"name\": \"account\",\n                                \"type\": \"address\"\n                            }\n                        ],\n                        \"name\": \"balanceOf\",\n                        \"outputs\": [\n                            {\n                                \"internalType\": \"uint256\",\n                                \"name\": \"\",\n                                \"type\": \"uint256\"\n                            }\n                        ],\n                        \"stateMutability\": \"view\",\n                        \"type\": \"function\"\n                    },\n                    {\n                        \"inputs\": [],\n                        \"name\": \"ratio\",\n                        \"outputs\": [\n                            {\n                                \"internalType\": \"uint256\",\n                                \"name\": \"dfynAmount_\",\n                                \"type\": \"uint256\"\n                            }\n                        ],\n                        \"stateMutability\": \"view\",\n                        \"type\": \"function\"\n                    }\n                ]\n    }],\n  ]\n}\n```\n"
  },
  "erc20-received": {
    "key": "erc20-received",
    "author": "mccallofthewild",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example ERC20 Received Strategy",
        "strategy": {
          "name": "erc20-received",
          "params": {
            "decimals": 18,
            "contractAddress": "0x6b175474e89094c44da98b954eedeac495271d0f",
            "symbol": "DAI",
            "receivingAddresses": [
              "0x65689471339798e1dae0d2ffb61073bf4e3765e4",
              "0x42b5d4a11c8fe76d114759f7f3d8e94ea28bdbe5",
              "0xcad6f7e74a34a5adf550e30b1e397d2c82bb1b1c",
              "0x95b2271039b020aba31b933039e042b60b063800"
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x062d413463fc6b5c4a096cb1cebae77c6d834222",
          "0xca00e2502f713ebf5e58bbb21930594af6988a4c",
          "0xb83074760468be269e4dc834862525f8daf6626a",
          "0x88fb0e1c8367af92d90b534888c789233360e53d"
        ],
        "snapshot": 11486650
      },
      {
        "name": "Example ERC20 Received Strategy",
        "strategy": {
          "name": "erc20-received",
          "params": {
            "coeff": 100,
            "decimals": 18,
            "contractAddress": "0x6b175474e89094c44da98b954eedeac495271d0f",
            "receivingAddresses": [
              "0x65689471339798e1dae0d2ffb61073bf4e3765e4",
              "0x42b5d4a11c8fe76d114759f7f3d8e94ea28bdbe5",
              "0xcad6f7e74a34a5adf550e30b1e397d2c82bb1b1c",
              "0x95b2271039b020aba31b933039e042b60b063800"
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x062d413463fc6b5c4a096cb1cebae77c6d834222",
          "0xca00e2502f713ebf5e58bbb21930594af6988a4c",
          "0xb83074760468be269e4dc834862525f8daf6626a",
          "0x88fb0e1c8367af92d90b534888c789233360e53d"
        ],
        "snapshot": 11486650
      }
    ],
    "schema": null,
    "about": "# Contract call strategy\n\nScores addresses by how much ERC20 token they have sent to `params.receivingAddresses`, adding `params.coeff` tokens to their score for every 1 token sent. \n\nThis creates a new fundraising opportunity for projects & organizations, levels the playing field for less wealthy participants, and encourages voters to \"put their money where their mouth is\".\n\n## Params\n\n- `contractAddress` - (**Required**, `string`) Address of ERC20 token contract\n- `decimals` - (**Required**, `number`) Decimal precision for ERC20 token\n- `receivingAddresses` - (**Required**, `string[]`) Array of addresses to check for ERC20 transactions from voters\n- `coeff` - (**Optional**, `number`, Default: `1`) Amount to multiply the sum of a voter's ERC20 sent to `receivingAddresses`. When used in conjunction with other strategies, this enables the increase or decrease of leverage given to voter who send tokens.\n- `dfuseApiKey` - (**Optional**, `string`, Default: contributor's test key) - Customize Dfuse API key\n\n\n## Examples\n\nCan be used instead of, or in conjunction with erc20-balance-of strategy. \nIn this example, the `params.coeff` of `100` makes a 1 token donation equivalent to a balance of 100 tokens. Thus, giving voters a massive incentive to donate.\n\nThe space config will look like this:\n\n```JSON\n\"strategies\": [\n  {\n    \"name\": \"Example ERC20-Received Strategy\",\n    \"strategy\": {\n      \"name\": \"erc20-received\",\n      \"params\": {\n        \"coeff\": 100,\n        \"decimals\": 18,\n        \"contractAddress\": \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n        \"receivingAddresses\": [\n          \"0x65689471339798e1dae0d2ffb61073bf4e3765e4\",\n          \"0x42b5d4a11c8fe76d114759f7f3d8e94ea28bdbe5\",\n          \"0xcad6f7e74a34a5adf550e30b1e397d2c82bb1b1c\",\n          \"0x95b2271039b020aba31b933039e042b60b063800\"\n        ]\n      }\n    },\n    \"network\": \"1\",\n    \"addresses\": [\n      \"0x062d413463fc6b5c4a096cb1cebae77c6d834222\",\n      \"0xca00e2502f713ebf5e58bbb21930594af6988a4c\",\n      \"0xb83074760468be269e4dc834862525f8daf6626a\",\n      \"0x88fb0e1c8367af92d90b534888c789233360e53d\"\n    ],\n    \"snapshot\": 11414195\n  },\n  {\n    \"name\": \"Example ERC20-Balance Strategy\",\n    \"strategy\": {\n      \"name\": \"erc20-balance\",\n      \"params\": {\n        \"address\": \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n        \"decimals\": 18\n      }\n    },\n    \"network\": \"1\",\n    \"addresses\": [\n      \"0x062d413463fc6b5c4a096cb1cebae77c6d834222\",\n      \"0xca00e2502f713ebf5e58bbb21930594af6988a4c\",\n      \"0xb83074760468be269e4dc834862525f8daf6626a\",\n      \"0x88fb0e1c8367af92d90b534888c789233360e53d\"\n    ],\n    \"snapshot\": 11414195\n  }\n]\n```\n\nValid test addresses and snapshot block number:\n```typescript\nconst addresses = [\n  \"0x062d413463fc6b5c4a096cb1cebae77c6d834222\",\n  \"0xca00e2502f713ebf5e58bbb21930594af6988a4c\",\n  \"0xb83074760468be269e4dc834862525f8daf6626a\",\n  \"0x88fb0e1c8367af92d90b534888c789233360e53d\"\n];\n\nconst snapshot = 11414195;\n```\n"
  },
  "contract-call": {
    "key": "contract-call",
    "author": "in19farkt",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "contract-call",
          "params": {
            "address": "0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82",
            "symbol": "Cake",
            "decimals": 18,
            "methodABI": {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          }
        },
        "network": "56",
        "addresses": [
          "0x009cF7bC57584b7998236eff51b98A168DceA9B0"
        ],
        "snapshot": 13839867
      }
    ],
    "schema": null,
    "about": "# Contract call strategy\n\nAllows any contract method to be used to calculate voter scores.\n\n## Examples\n\nCan be used instead of the erc20-balance-of strategy, the space config will look like this:\n\n```JSON\n{\n  \"strategies\": [\n    [\"contract-call\", {\n      // token address\n      \"address\": \"0x6887DF2f4296e8B772cb19479472A16E836dB9e0\",\n      // token decimals\n      \"decimals\": 18,\n      // token symbol\n      \"symbol\": \"DAI\",\n      // ABI for balanceOf method\n      \"methodABI\": {\n        \"constant\": true,\n        \"inputs\": [{\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }],\n        \"name\": \"balanceOf\",\n        \"outputs\": [{\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }],\n        \"payable\": false,\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      }\n    }],\n  ]\n}\n```\n\nYou can call methods with multiple inputs in any contract:\n\n```JSON\n{\n  \"strategies\": [\n    [\"contract-call\", {\n      // contract address\n      \"address\": \"0x6887DF2f4296e8B772cb19479472A16E836dB9e0\",\n      // output decimals\n      \"decimals\": 18,\n      // strategy symbol\n      \"symbol\": \"mySCORE\",\n      // arguments are passed to the method; \"%{address}\" is replaced with the voter's address; default value [\"%{address}\"]\n      \"args\": [\"0x6887DF2f4296e8B772cb19479472A16E836dB9e0\", \"%{address}\"], \n      // method ABI, output type should be uint256\n      \"methodABI\": {\n        \"constant\": true,\n        \"inputs\": [{\n          \"internalType\": \"address\",\n          \"name\": \"_someAddress\",\n          \"type\": \"address\"\n        }, {\n          \"internalType\": \"address\",\n          \"name\": \"_voterAddress\",\n          \"type\": \"address\"\n        }],\n        \"name\": \"totalScoresFor\",\n        \"outputs\": [{\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }],\n        \"payable\": false,\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      }\n    }],\n  ]\n}\n```\n"
  },
  "defiplaza": {
    "key": "defiplaza",
    "author": "timanrebel",
    "version": "0.1.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "defiplaza",
          "params": {
            "address": "0x2F57430a6ceDA85a67121757785877b4a71b8E6D",
            "stableplaza": "0x3A2b8cC91aF8bf45F3Ec61E779ee1c2ba6b7E694",
            "symbol": "DFP2",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0xe461cc7406607866082b1385bf66c8d1d794e892",
          "0xef7ddc0852baa45cc8ae7c99d30c47b75147c2ff",
          "0xac0f1af3b5439d0954e83ede9b7c4a0772178217",
          "0xf8c95d77e4c7668c0982917b3a7f47ae3902c095",
          "0x2f7ab204f3675353f37c70f180944a65b9890a9a",
          "0x29961513051affe355f6db49cb7e81b4970b4492",
          "0x4bc760c7997a2833c974a85420c5a35d93f26be8",
          "0x77fc54677f6cd1c3a669b9c2ff032836af59c5b8",
          "0x9de1d0c4ec447242a5a13e26ff7fe68e8158e489",
          "0x4d08800317e9aabffb815014d8d7054878663665",
          "0x720de10fea55f74e58f9478ee4225087d1260048",
          "0x7a9608f2e24d78a2e90104a1a31526a057dd8b10",
          "0xea51de3bcfcda969eae74f27b9785611b0c43550",
          "0xe579ac2dce69f44cc85d8d66e5eecc8fc4fe292a",
          "0x5fa483d02a78fcf0e5dd0670b5d4b60a0be1de33",
          "0x40d0440af173578d0ce4e959f822fca215cad7bb",
          "0x27f2be297489e813dae3895a30c9ac72b01bf57a",
          "0x1eA44f3176B480cD03a8c9B7e924B2bB9a49a9cA"
        ],
        "snapshot": 15839572
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. DFP2"
              ],
              "maxLength": 16
            },
            "address": {
              "type": "string",
              "title": "Governance contract address",
              "examples": [
                "e.g. 0x2F57430a6ceDA85a67121757785877b4a71b8E6D"
              ]
            },
            "stableplaza": {
              "type": "string",
              "title": "StablePlaza contract address",
              "examples": [
                "e.g. 0x3A2b8cC91aF8bf45F3Ec61E779ee1c2ba6b7E694"
              ]
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ]
            }
          },
          "required": [
            "address",
            "decimals"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# DefiPlaza\n\nThis new strategy looks at `balanceOf` and the `quoteRewards` function of the DFP2 governance contract to be able to use the balance of unclaimed staking rewards in the voting process, next to the balance of DFP2 in a wallet.\n\nIt also looks at the `stakerData` function of the new StablePlaza pool contract (if given as an option) to be able to use the staked DFP2 tokens in the voting process.\n\nThe addresses in the `examples.json` are the current biggest DFP2 holders to create a real-world test scenario.\n\nThis strategy is based on the `erc20-balance-of` strategy.\n\nHere is an example of the parameters:\n\n```json\n{\n  \"address\": \"0x2F57430a6ceDA85a67121757785877b4a71b8E6D\",\n  \"stableplaza\": \"0x3A2b8cC91aF8bf45F3Ec61E779ee1c2ba6b7E694\",\n  \"symbol\": \"DFP2\",\n  \"decimals\": 18\n}\n```\n"
  },
  "dfyn-staked-in-farms": {
    "key": "dfyn-staked-in-farms",
    "author": "vatsalgupta13",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "dfyn-staked-in-farms",
          "params": {
            "name": "Dfyn Farms",
            "contractAddresses": [
              "0xEdBB73C0ccD3F00cD75c2749b0df40A1BE394EE2",
              "0x52b965ccd44A98A8aa064bC597C895adCD02e9BC",
              "0x001A4e27CCDfe8ed6BBaFfEc9AE0985aB5542BEf",
              "0xEAb0FD1FE0926E43b61612d65002Ba6320AA1080"
            ],
            "tokenAddress": "0xc168e40227e4ebd8c1cae80f7a55a4f0e6d66c97",
            "decimal": 18,
            "symbol": "DFYN",
            "scoreMultiplier": 1,
            "methodABI_1": {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            "methodABI_2": {
              "inputs": [],
              "name": "stakingToken",
              "outputs": [
                {
                  "internalType": "contract IERC20",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          }
        },
        "network": "137",
        "addresses": [
          "0x41CdE29bF9aea095fDD204D150451678b2c6A736",
          "0xD7B26f34775fa41D6dCE182851642573aBF9B532",
          "0xd7539FCdC0aB79a7B688b04387cb128E75cb77Dc",
          "0x6E33e22f7aC5A4b58A93C7f6D8Da8b46c50A3E20",
          "0xC9dA7343583fA8Bb380A6F04A208C612F86C7701",
          "0x2AC89522CB415AC333E64F52a1a5693218cEBD58"
        ],
        "snapshot": 18342938
      }
    ],
    "schema": null,
    "about": "# Staked Dfyn in Farming Contracts\n\nAllows fetching the amount of $DFYN staked in different farming contracts. By changing 'tokenAddress', 'decimals' and 'symbol' field, this strategy can also be used for other tokens. This strategy can be used for all contracts which return the amount of LP tokens in 'balanceOf' call. This strategy uses pair data from Dfyn's subgraph to calculate the amount of $DFYN present in users' LP token balance using the calcTokenBalance() function. A total of three calls have been made: 1) a subgraphRequest to fetch Dfyn's subgraph data 2) a multicall to fetch the staked LP token address corresponding to each farming contract and 3) a multicall to fetch all the users' staked LP token balance across all the farming contracts.\n\nThe strategy will also handle the case wherein only one contractAddress is to be used, however that address should also be put in an array.\n\n## Example\n\nThe space config will look like this:\n\n```JSON\n{\n  \"strategies\": [\n    [\"dfyn-staked-in-farms\", {\n      // farming contracts across which token balance needs to be calculated\n          \"contractAddresses\": [\n          \"0xEdBB73C0ccD3F00cD75c2749b0df40A1BE394EE2\", \n          \"0x52b965ccd44A98A8aa064bC597C895adCD02e9BC\",\n          \"0x001A4e27CCDfe8ed6BBaFfEc9AE0985aB5542BEf\",\n          \"0xEAb0FD1FE0926E43b61612d65002Ba6320AA1080\"\n        ],\n      // token address\n      \"tokenAddress\": \"0xc168e40227e4ebd8c1cae80f7a55a4f0e6d66c97\",\n      // token decimals\n      \"decimals\": 18,\n      // token symbol\n      \"symbol\": \"DFYN\",\n      // scoreMultiplier can be used to increase users' scores by a certain magnitude\n      \"scoreMultiplier\": 1,\n      // ABI for balanceOf method\n      \"methodABI_1\": {\n            \"inputs\": [\n              {\n                \"internalType\": \"address\",\n                \"name\": \"account\",\n                \"type\": \"address\"\n              }\n            ],\n            \"name\": \"balanceOf\",\n            \"outputs\": [\n              {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n              }\n            ],\n            \"stateMutability\": \"view\",\n            \"type\": \"function\"\n          },\n          // ABI for stakingToken method\n          \"methodABI_2\": {\n            \"inputs\": [],\n            \"name\": \"stakingToken\",\n            \"outputs\": [\n              {\n                \"internalType\": \"contract IERC20\",\n                \"name\": \"\",\n                \"type\": \"address\"\n              }\n            ],\n            \"stateMutability\": \"view\",\n            \"type\": \"function\"\n          }\n    }],\n  ]\n}\n```"
  },
  "dfyn-staked-in-vaults": {
    "key": "dfyn-staked-in-vaults",
    "author": "vatsalgupta13",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "dfyn-staked-in-vaults",
          "params": {
            "name": "Dfyn Vaults",
            "contractAddresses": [
              "0x8b016E4f714451f3aFF88B82Ec9dfAe13D664d42",
              "0x07E3f04903aBd6506A6E41246Da7d39dA0D6a8CA"
            ],
            "symbol": "DFYN",
            "scoreMultiplier": 1,
            "methodABI": {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          }
        },
        "network": "137",
        "addresses": [
          "0x41CdE29bF9aea095fDD204D150451678b2c6A736",
          "0xD7B26f34775fa41D6dCE182851642573aBF9B532"
        ],
        "snapshot": 18342938
      }
    ],
    "schema": null,
    "about": "# Multiple contract call strategy\n\nThis strategy allows users to call a function like 'balanceOf' across multiple contracts and performs summation over the results. By calling 'balanceOf', Dfyn vaults return the amount of Dfyn staked by the user in that vault. This strategy will make a single multicall which will retrieve all users' staked balances in all of Dfyn's vaults. \n\n## Example\n\nThe space config will look like this:\n\n```JSON\n{\n  \"strategies\": [\n    [\"dfyn-staked-in-vaults\", {\n      // vault contracts across which token balance needs to be calculated\n      \"contractAddresses\": [\n      \"0x8b016E4f714451f3aFF88B82Ec9dfAe13D664d42\", \n      \"0x07E3f04903aBd6506A6E41246Da7d39dA0D6a8CA\"\n      ], \n      // scoreMultiplier can be used to increase users' scores by a certain magnitude\n      \"scoreMultiplier\": 1,\n      // ABI for balanceOf method\n      \"methodABI_1\": {\n            \"inputs\": [\n              {\n                \"internalType\": \"address\",\n                \"name\": \"account\",\n                \"type\": \"address\"\n              }\n            ],\n            \"name\": \"balanceOf\",\n            \"outputs\": [\n              {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n              }\n            ],\n            \"stateMutability\": \"view\",\n            \"type\": \"function\"\n          }\n    }],\n  ]\n}\n```"
  },
  "dps-nft-strategy": {
    "key": "dps-nft-strategy",
    "author": "andreibadea20",
    "version": "0.3.1",
    "examples": [
      {
        "name": "DPS NFTs query",
        "strategy": {
          "name": "dps-nft-strategy",
          "params": {
            "symbol": "DPS"
          }
        },
        "network": "1284",
        "addresses": [
          "0x926ce67776a621f64cce3bfdd8d7dcc627b5134e",
          "0x5114e0a7a2fc85685bc114477d7c3035d47daf8b",
          "0x73b0d4b2507f867c3ecf567128a2265b084d918c",
          "0x8c6fdbca2070590d7f2ce5b2c1ed1c305d968e5d",
          "0x899831d937937d011305e73ee782cce0455df15a"
        ],
        "snapshot": 3516443
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "title": "DPS"
            }
          },
          "required": [],
          "additionalProperties": false
        }
      }
    },
    "about": "# dps-nft-strategy\n\nThis is a strategy similar with ERC721, which it calculates the voting power as the balances * 3 of the voters for a specific ERC721 token, but this takes into account locked NFTs\nand claimed NFTs. It is a strategy using for a game, where users can lock their NFTs in order to achive different things.\n\nHere is an example for calculating voting power:\n\nBob balance: 40 NFTs\n\nBob locked NFTs: 7     \n\nBob claimed NFTs: 3\n\n=> Bob voting power: (40 + 7 - 3) * 3 = 44 * 3\n\n"
  },
  "dps-nft-strategy-nova": {
    "key": "dps-nft-strategy-nova",
    "author": "andreibadea20",
    "version": "0.1.0",
    "examples": [
      {
        "name": "DPS NFTs query Nova",
        "strategy": {
          "name": "dps-nft-strategy-nova",
          "params": {
            "symbol": "DPS"
          }
        },
        "network": "42170",
        "addresses": [
          "0x926ce67776a621f64cce3bfdd8d7dcc627b5134e",
          "0x5114e0a7a2fc85685bc114477d7c3035d47daf8b",
          "0x73b0d4b2507f867c3ecf567128a2265b084d918c",
          "0x8c6fdbca2070590d7f2ce5b2c1ed1c305d968e5d",
          "0x899831d937937d011305e73ee782cce0455df15a"
        ],
        "snapshot": 8703862
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "title": "DPS"
            }
          },
          "required": [],
          "additionalProperties": false
        }
      }
    },
    "about": "# dps-nft-strategy-nova\n\nThis is a strategy similar with ERC721, which it calculates the voting power as the balances of the voters for a specific ERC721 token, but this takes into account locked NFTs\nand claimed NFTs. It is a strategy using for a game, where users can lock their NFTs in order to achive different things.\n\nHere is an example for calculating voting power:\n\nBob balance: 40 NFTs\n\nBob locked NFTs: 7     \n\nBob claimed NFTs: 3\n\n=> Bob voting power: 40 + 7 - 3 = 44\n\n"
  },
  "ens-domains-owned": {
    "key": "ens-domains-owned",
    "author": "makoto",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "ens-domains-owned",
          "params": {
            "symbol": "ENS",
            "domain": "ismoney.eth"
          }
        },
        "network": "1",
        "addresses": [
          "0xaCf4C2950107eF9b1C37faA1F9a866C8F0da88b9",
          "0x0239769A1aDF4DeF9f07Da824B80B9C4fCB59593"
        ],
        "snapshot": 11414195
      }
    ],
    "schema": null,
    "about": "# Contract call strategy\n\nAllows subdomain owners of a ENS domain to vote depending on the number of domains one own\n\n\n## Params\n\n- `domain` - The name of the parent domain.\n\n## Examples\n\n```JSON\n\"strategies\": [\n  {\n    \"name\": \"Example query\",\n    \"strategy\": {\n      \"name\": \"ens-domains-owned\",\n      \"params\": {\n        \"domain\": \"ismoney.eth\"\n      }\n    },\n    \"network\": \"1\",\n    \"addresses\": [\n      \"0xaCf4C2950107eF9b1C37faA1F9a866C8F0da88b9\",\n      \"0x0239769A1aDF4DeF9f07Da824B80B9C4fCB59593\"\n    ],\n    \"snapshot\": 11414195\n  }\n]\n```\n\nValid test addresses and snapshot block number:\n```typescript\nconst addresses = [\n  '0xaCf4C2950107eF9b1C37faA1F9a866C8F0da88b9'\n];\n\nconst snapshot = 11414195;\n```"
  },
  "ens-reverse-record": {
    "key": "ens-reverse-record",
    "author": "makoto",
    "version": "0.1.0",
    "examples": [
      {
        "name": "ENS Reverse Record",
        "strategy": {
          "name": "ens-reverse-record",
          "params": {
            "symbol": "ENS"
          }
        },
        "network": "1",
        "addresses": [
          "0xaCf4C2950107eF9b1C37faA1F9a866C8F0da88b9",
          "0x0239769A1aDF4DeF9f07Da824B80B9C4fCB59593"
        ],
        "snapshot": 12011880
      }
    ],
    "schema": null,
    "about": "# Contract call strategy\n\nAllows users with ENS reverse record address to vote\n\n## Params\n\nNone\n\n## Examples\n\n```JSON\n\"strategies\": [\n  {\n    \"name\": \"Example query\",\n    \"strategy\": {\n      \"name\": \"ens-reverse-record\",\n    },\n    \"network\": \"1\",\n    \"addresses\": [\n      \"0xaCf4C2950107eF9b1C37faA1F9a866C8F0da88b9\",\n      \"0x0239769A1aDF4DeF9f07Da824B80B9C4fCB59593\"\n    ],\n    \"snapshot\": 12011880\n  }\n]\n```\n\nValid test addresses and snapshot block number:\n```typescript\nconst addresses = [\n  '0xaCf4C2950107eF9b1C37faA1F9a866C8F0da88b9'\n];\n\nconst snapshot = 12011880;\n```"
  },
  "ens-10k-club": {
    "key": "ens-10k-club",
    "author": "paste",
    "version": "0.1.0",
    "examples": [
      {
        "name": "ENS 10k Club",
        "strategy": {
          "name": "ens-10k-club",
          "params": {
            "address": "0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85",
            "symbol": "NUMS",
            "clubWeight10k": 1,
            "clubWeight999": 10
          }
        },
        "network": "1",
        "addresses": [
          "0xF5F8977348f592DB9773C373fEf5bE362D103776",
          "0xE3D2b657c45613d30292Fd67Ef40DAB043B70706",
          "0xaCf4C2950107eF9b1C37faA1F9a866C8F0da88b9"
        ],
        "snapshot": 14799078
      }
    ],
    "schema": null,
    "about": "# ens-10k-club\n\nThis strategy is for 10K Club members, holders of ENS names 000.eth - 9999.eth.\nThis script queries The Graph for all ENS names owned by voter and checks for 10K Club names.\nBy default, 999 Club members' votes are weighted 10x.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85\",\n  \"symbol\": \"NUMS\",\n  \"clubWeight10k\": 1,\n  \"clubWeight999\": 10\n}\n```\n"
  },
  "ens-all-club-digits": {
    "key": "ens-all-club-digits",
    "author": "onigiri-x",
    "version": "0.1.0",
    "examples": [
      {
        "name": "ENS ALL Club Digits",
        "strategy": {
          "name": "ens-all-club-digits",
          "params": {
            "address": "0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85",
            "symbol": "NUMS",
            "numberOfDigits": 7
          }
        },
        "network": "1",
        "addresses": [
          "0xa2e87bf4e4edc28922736887772c351de5554b77",
          "0xf8ebe2b23ed74bee2b35da9de63c2380902b7cb5",
          "0xae099ada728a5abf8b31f2b126cc5bf8e70fbc2c"
        ],
        "snapshot": 15818456
      }
    ],
    "schema": null,
    "about": "# ens-all-club-digits\n\nThis strategy is for All Club Digits members, holders of ENS names 000.eth - 999.eth, 0000.eth - 9999.eth, 00000.eth to 99999.eth and beyond\nThis script queries The Graph for all ENS names owned by voter and checks for 10K Club names.\nPass the number of digits as the requirement\n\n\nHere is an example of parameters, we want 999 so we put numberOfDigits set to 3:\n\n```json\n{\n  \"address\": \"0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85\",\n  \"symbol\": \"DIGITS\",\n  \"numberOfDigits\": 3\n}\n```\n"
  },
  "governor-delegator": {
    "key": "governor-delegator",
    "author": "snapshot-labs",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "governor-delegator",
          "params": {
            "delegate": "0xb8c2c29ee19d8307cb7255e1cd9cbde883a267d5",
            "address": "0xc18360217d8f7ab5e7c516566761ea12ce7f9d72",
            "symbol": "ENS",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0xf6b6f07862a02c85628b3a9688beae07fea9c863",
          "0x0d24f692c05036602076b3f51242b5a34c55ee38",
          "0xcafebabe86cbb8534134d96f746dccefcfe3babe",
          "0xb8c2c29ee19d8307cb7255e1cd9cbde883a267d5",
          "0x27e5343620b95645448de3710ca4162055670109"
        ],
        "snapshot": 13613058
      }
    ],
    "schema": null,
    "about": "# governor-delegator\n\nAllows users to vote with their token balance, if the user delegated their voting power to a particular delegate address\n\n## Params\n\n```JSON\n{\n  \"delegate\": \"0xb8c2c29ee19d8307cb7255e1cd9cbde883a267d5\",\n  \"address\": \"0xc18360217d8f7ab5e7c516566761ea12ce7f9d72\",\n  \"symbol\": \"ENS\",\n  \"decimals\": 18\n}\n```\n"
  },
  "erc20-balance-of": {
    "key": "erc20-balance-of",
    "author": "bonustrack",
    "version": "0.1.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc20-balance-of",
          "params": {
            "address": "0x6b175474e89094c44da98b954eedeac495271d0f",
            "symbol": "DAI",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x8d07D225a769b7Af3A923481E1FdF49180e6A265",
          "0x8f60501dE5b9b01F9EAf1214dbE1924aA97F7fd0",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x17ea92D6FfbAA1c7F6B117c1E9D0c88ABdc8b84C",
          "0x38C0039247A31F3939baE65e953612125cB88268"
        ],
        "snapshot": 11437846
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. UNI"
              ],
              "maxLength": 16
            },
            "address": {
              "type": "string",
              "title": "Contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ]
            }
          },
          "required": [
            "address",
            "decimals"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# erc20-balance-of\n\nThis is the most common strategy, it returns the balances of the voters for a specific ERC20 token.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n  \"symbol\": \"DAI\",\n  \"decimals\": 18\n}\n```\n"
  },
  "erc20-balance-of-at": {
    "key": "erc20-balance-of-at",
    "author": "OfficialDevTeamSix",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc20-balance-of-at",
          "params": {
            "address": "0xb4B486496469B3269c8907543706C377daAA4dD9",
            "symbol": "PYE",
            "decimals": 9,
            "snapshotId": 1
          }
        },
        "network": "56",
        "addresses": [
          "0x2E9012CeE533a78D822ed3cdb0fe5C6F3A76092F",
          "0x848AE3318A798bA0354c4B817e4005a5DE72ca69",
          "0xA4F971216d178C840F03cEcbe945811378aFb25d",
          "0x76Cb562A83C71B8457c9705072201740A4463100",
          "0x08386c3e469420Ed44522C3AF38fC91713D2Cbbf",
          "0x7EFc2150058EB91B3DDd885f6a6991C28E0De39d",
          "0x59444C2bfB8b5ef089d630701d467AB6656D05Bc",
          "0xf6f2B0C7f0c806Fb27FD2b16DC298997B957E0B5",
          "0xac0ebcd2f8ed5a56F9765EBB820D3C081a1030A4",
          "0x595f6cf9086Bc85d574100962ac201cDA7e5315F"
        ],
        "snapshot": 23711285
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. UNI"
              ],
              "maxLength": 16
            },
            "address": {
              "type": "string",
              "title": "Contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ]
            },
            "snapshotId": {
              "type": "number",
              "title": "SnapshotID",
              "examples": [
                "e.g. 5"
              ]
            }
          },
          "required": [
            "address",
            "decimals",
            "snapshotId"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# erc20-balance-of-at\n\nThis strategy returns the balances of the voters for a specific ERC20 token at a specified snapshotID. The ERC20 token contract must implement ERC20 Snapshot (https://docs.openzeppelin.com/contracts/3.x/api/token/erc20#ERC20Snapshot)\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0xb4B486496469B3269c8907543706C377daAA4dD9\",\n  \"symbol\": \"PYE\",\n  \"decimals\": 9,\n  \"snapshotId\": 1\n}\n```\n"
  },
  "erc20-votes": {
    "key": "erc20-votes",
    "author": "bonustrack",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc20-votes",
          "params": {
            "address": "0xc00e94cb662c3520282e6f5717214004a7f26888",
            "symbol": "ENS"
          }
        },
        "network": "1",
        "addresses": [
          "0x2B384212EDc04Ae8bB41738D05BA20E33277bf33",
          "0xAC5720d6EE2d7872b88914C9c5Fa9BF38e72FaF6"
        ],
        "snapshot": 12050071
      }
    ],
    "schema": null,
    "about": ""
  },
  "erc20-votes-with-override": {
    "key": "erc20-votes-with-override",
    "author": "serenae-fansubs",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc20-votes-with-override",
          "params": {
            "address": "0xC18360217D8F7Ab5e7c516566761Ea12Ce7F9D72",
            "symbol": "ENS",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x0000000000000000000000000000000000000001",
          "0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85",
          "0xc23ca051fc6ad307bb07c1b27e22391bc8f22a44",
          "0x983110309620d911731ac0932219af06091b6744"
        ],
        "snapshot": 14346755
      }
    ],
    "schema": null,
    "about": "# ERC-20 Votes with Override\n\n- [Overview](#overview)\n- [Example](#example)\n- [Snapshot Delegations](#snapshot-delegations)\n- [Example With Snapshot Delegations](#example-with-snapshot-delegations)\n- [Options](#options)\n\n\n## Overview\n\nThis strategy is similar to [ERC-20 Votes](../erc20-votes), except that it also allows individual delegators to **override** their vote on a particular proposal if they wish. This is most useful for social (off-chain only) proposals.\n\nIf an account has any delegated voting power returned from getVotes, adds that value, minus the balances from any delegators that have also individually voted.\n\nIf an account is delegating to itself, then its own token balance will already be included in the getVotes return value.\n\nIf an account is delegating to a different valid address, adds the local token balance. The account must be delegated to another valid address, otherwise the local token balance will not be added.\n\n\n## Example\n\nSay you have accounts [A,B,C], each with token balances [100,200,300], and they are delegated on-chain like so:\n![Delegation Example 1](https://i.imgur.com/loMPDiu.png)\n\nThe on-chain voting power with these delegations (using the standard [OpenZeppelin ERC20Votes](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/ERC20Votes.sol) system) is then:\n| A | B | C |\n| ------------- | ------------- | ------------- |\n| 0 | 100 | 500 |\n\nWith the regular [erc20-votes strategy](https://github.com/snapshot-labs/snapshot-strategies/tree/master/src/strategies/erc20-votes), each account would only have access to its own on-chain delegated voting power, and delegators without voting power will not be able to vote on Snapshot proposals. In the scenario above, account A would not be able to vote at all. And account B would still be able to vote even though it is delegating to C, but it would only have access to the 100 voting power from A.\n\nWith this **erc20-votes-with-override** strategy, now individual delegators will be able to vote on Snapshot proposals and access their own token balance as voting power, without needing to perform any additional on-chain transactions.\n\nHere are the scores that would be given using this override strategy, depending on who votes:\n| Voters | Score A | Score B | Score C |\n| ------------- | ------------- | ------------- | ------------- |\n| A | 100 | | |\n| B | | 300 | |\n| C | | | 500 |\n| A,B | 100 | 200 | |\n| A,C | 100 | | 500 |\n| B,C | | 300 | 300 |\n| A,B,C | 100 | 200 | 300 |\n\nWhen an account votes, it will have access to its own token balance, and also any delegated voting power, _minus_ the balances of any delegators that have also voted. That's how it ensures that delegators can \"override\" their delegates but still no double-counting happens.\n\n\n## Snapshot Delegations\n\nAccounts can also delegate [via Snapshot](https://docs.snapshot.org/guides/delegation) as well.\n\nIf the `includeSnapshotDelegations` option is enabled, then Snapshot delegations will also be taken into account. In this case, the `isSnapshotDelegatedScore` option will determine whether the delegated or non-delegated scores will be returned. This is done because the overridden voting power calculation is not compatible with the standard [delegation](../delegation) strategy ([see below](#example-with-snapshot-delegations)). So instead, space admins can use this strategy **twice**, each with `includeSnapshotDelegations` enabled and the `isSnapshotDelegatedScore` enabled or disabled.\n\nHere is an example of enabling Snapshot delegations using this strategy twice:\n\nDelegated strategy:\n\n```\n{\n  \"symbol\": \"ENS (delegated)\",\n  \"address\": \"0xC18360217D8F7Ab5e7c516566761Ea12Ce7F9D72\",\n  \"decimals\": 18,\n  \"includeSnapshotDelegations\": true,\n  \"isSnapshotDelegatedScore\": true\n}\n```\n\nNon-delegated strategy:\n\n```\n{\n  \"symbol\": \"ENS\",\n  \"address\": \"0xC18360217D8F7Ab5e7c516566761Ea12Ce7F9D72\",\n  \"decimals\": 18,\n  \"includeSnapshotDelegations\": true,\n  \"isSnapshotDelegatedScore\": false\n}\n```\n\n\n## Example With Snapshot Delegations\n\nTake the same example [from above](#example), with accounts [A,B,C], each with token balances [100,200,300]. This time we'll also add some Snapshot delegations:\n![Delegation Example 2](https://i.imgur.com/bb2rC5J.png)\n\nThe regular [delegation](../delegation) strategy doesn't work here, specifically because of the \"override\" mechanism. It calculates the list of delegators that were not in the original address list, and passes **only those delegators** into the underlying strategy. So the underlying strategy has no idea that other addresses voted as well. Because of that, using the standard delegation strategy with this override strategy can lead to double-counting.\n\nTaking our example from above, here are the Snapshot delegated scores that occur when using the regular [delegation](../delegation) strategy:\n| Voters | Score A | Score B | Score C |\n| ------------- | ------------- | ------------- | ------------- |\n| A | 0 | | |\n| B | | 0 | |\n| C | | | 300 |\n| A,B | 0 | 0 | |\n| A,C | 0 | | 300 |\n| B,C | | 0 | 100 |\n| A,B,C | 0 | 0 | 0 |\n\nSo in this case the total scores, when both the regular and delegated strategies are used together, are:\n| Voters | Score A | Score B | Score C |\n| ------------- | ------------- | ------------- | ------------- |\n| A | 100 | | |\n| B | | 300 | |\n| C | | | 800 |\n| A,B | 100 | 200 | |\n| A,C | 100 | | 800 |\n| B,C | | 300 | 400 |\n| A,B,C | 100 | 200 | 300 |\n\nYou can see that in some scenarios double-counting occurs, in [C], [A,C], and [B,C].\n\nThis override strategy addresses this by retrieving the Snapshot delegations directly, and then calculating the scores as if all those delegators were also voting. Take the scenario where only C votes. This strategy will:\n\n- Retrieve Snapshot delegators [A,B]\n- [A,B] are added to the total address list, so it becomes [A,B,C]\n- The regular calculations are done, so: {A: 100, B: 200, C: 300}\n- Depending on the value of `isSnapshotDelegatedScore`:\n  - If false, only the score for C is returned: {C: 300}\n  - If true, the scores for all Snapshot delegators of C are summed up, so {A:100,B:200} is summed and the strategy returns {C: 300}\n- The final score is then C: 300 + 300 delegated, which is correct\n\n\n## Options\n\n- **address:** The address of the ERC-20 token contract.\n- **symbol:** The display symbol for the token, e.g. \"ENS\".\n- **decimals:** Used to display the correct base units for the token.\n- **includeSnapshotDelegations:** Optional. If enabled, Snapshot delegations are taken into account. See description above.\n- **isSnapshotDelegatedScore:** Optional. Only used if `includeSnapshotDelegations` is enabled. If true, the delegated score will be returned, otherwise the non-delegated score will be returned. See description above.\n- **delegationSpace:** Optional. Only used if `includeSnapshotDelegations` is enabled. Determines what specific Snapshot space to retrieve delegations for.\n- **getVotesName:** Optional. The function name of the [getVotes](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/ERC20Votes.sol#L64) function, e.g. \"getVotes\".\n- **getVotesABI:** Optional. The ABI specification for the getVotes function.\n- **balanceOfName:** Optional. The function name of the [balanceOf](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol#L18) function, e.g. \"balanceOf\".\n- **balanceOfABI:** Optional. The ABI specification for the balanceOf function.\n- **delegatesName:** Optional. The function name of the [delegates](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/ERC20Votes.sol#L57) function, e.g. \"delegates\".\n- **delegatesABI:** Optional. The ABI specification for the delegates function.\n"
  },
  "erc721-multi-registry-weighted": {
    "key": "erc721-multi-registry-weighted",
    "author": "Meph1587",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc721-multi-registry-weighted",
          "params": {
            "symbol": "FRWC",
            "tokens": [
              "0x521f9c7505005cfa19a8e5786a9c3c9c9f5e6f42",
              "0xf55b615b479482440135ebf1b907fd4c37ed9420",
              "0x251b5f14a825c537ff788604ea1b58e49b70726f"
            ],
            "weights": [
              2,
              4,
              8
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x6bf97f2534be2242ddb3a29bfb24d498212dcded",
          "0x7908a20be7f8ce24baa5c9cea46e3678c1ce3f4e",
          "0x0abb75f676d0c131c04324dd98150a39213edd41",
          "0x87931e7ad81914e7898d07c68f145fc0a553d8fb",
          "0x17bc9268f8abb454f0c7ae4d76d969a37235480d",
          "0xcaed230e3a8ac5fa16595810ade9cb739f47f6ba",
          "0xf296178d553c8ec21a2fbd2c5dda8ca9ac905a00",
          "0xd584fe736e5aad97c437c579e884d15b17a54a51",
          "0x90e5aa59a9df2add394df81521dbbed5f3c4a1a3"
        ],
        "snapshot": 14173407
      }
    ],
    "schema": null,
    "about": "# erc721\n\nThis strategy returns the balances of the voters for a list of ERC721 NFT tokens applying a different weight for each.\nToken at position `i` is assigned weight at position `i`.\n\nHere is an example of parameters [wizards, ponies, souls]:\n\n```json\n{\n  \"symbol\": \"FRWC\",\n  \"tokens\": [\n    \"0x521f9c7505005cfa19a8e5786a9c3c9c9f5e6f42\",\n    \"0xf55b615b479482440135ebf1b907fd4c37ed9420\",\n    \"0x251b5f14a825c537ff788604ea1b58e49b70726f\"\n  ],\n  \"weights\": [2, 4, 8]\n}\n```\n"
  },
  "erc20-balance-of-fixed-total": {
    "key": "erc20-balance-of-fixed-total",
    "author": "bonustrack",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc20-balance-of-fixed-total",
          "params": {
            "total": 50,
            "symbol": "%SWRV",
            "address": "0xB8BAa0e4287890a5F79863aB62b7F175ceCbD433",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030"
        ],
        "snapshot": 13494433
      }
    ],
    "schema": null,
    "about": ""
  },
  "erc20-balance-of-cv": {
    "key": "erc20-balance-of-cv",
    "author": "bonustrack",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc20-balance-of-cv",
          "params": {
            "symbol": "ICAP",
            "address": "0xd83C569268930fadAd4cdE6D0cB64450fef32b65",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030"
        ],
        "snapshot": 13494433
      }
    ],
    "schema": null,
    "about": ""
  },
  "erc20-balance-of-coeff": {
    "key": "erc20-balance-of-coeff",
    "author": "jxde",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc20-balance-of-coeff",
          "params": {
            "coeff": 2,
            "symbol": "HYPR",
            "address": "0x03d6bd3d48f956d783456695698c407a46ecd54d",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030"
        ],
        "snapshot": 13494433
      }
    ],
    "schema": null,
    "about": ""
  },
  "erc20-with-balance": {
    "key": "erc20-with-balance",
    "author": "BenjaminLu",
    "version": "0.1.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc20-with-balance",
          "params": {
            "address": "0x84cA8bc7997272c7CfB4D0Cd3D55cd942B3c9419",
            "symbol": "DIA",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x0000000000000000000000000000000000baddad",
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0xBA2E7Fed597fd0E3e70f5130BcDbbFE06bB94fe1",
          "0xBA2E7Fed597fd0E3e70f5130BcDbbFE06bB94fe1",
          "0x4C7909d6F029b3a5798143C843F4f8e5341a3473",
          "0x84cA8bc7997272c7CfB4D0Cd3D55cd942B3c9419",
          "0x72ac1760daf52986421b1552bdca04707e78950e"
        ],
        "snapshot": 11184248
      },
      {
        "name": "Example query with minimum balance",
        "strategy": {
          "name": "erc20-with-balance",
          "params": {
            "address": "0x84cA8bc7997272c7CfB4D0Cd3D55cd942B3c9419",
            "symbol": "DIA",
            "decimals": 18,
            "minBalance": 10
          }
        },
        "network": "1",
        "addresses": [
          "0x0000000000000000000000000000000000baddad",
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0xBA2E7Fed597fd0E3e70f5130BcDbbFE06bB94fe1",
          "0xBA2E7Fed597fd0E3e70f5130BcDbbFE06bB94fe1",
          "0x4C7909d6F029b3a5798143C843F4f8e5341a3473",
          "0x84cA8bc7997272c7CfB4D0Cd3D55cd942B3c9419",
          "0x72ac1760daf52986421b1552bdca04707e78950e"
        ],
        "snapshot": 11184248
      }
    ],
    "schema": null,
    "about": "# with-balance\n\n> Important Note: This strategy works for ERC721 contract too.\n\nThis strategy checks if the voter has a balance of the token in the contract. returns `1` if the voter has a balance of the token in the contract. else returns `0`.\n\n## Parameters\n\n| Param Name      | Description |\n| ----------- | ----------- |\n| address      | Address of the contract  |\n| symbol (optional)   | symbol  |\n| decimals (optional)   | decimals  |\n| minBalance (optional)   | Minimum balance check (Note that this value is exclusive, For example if you pass `1`, balance should be more than `1`) Default is `0` |\n\nHere is an example of parameters:\n\n```json\n{\n    \"address\": \"0x84cA8bc7997272c7CfB4D0Cd3D55cd942B3c9419\",\n    \"symbol\": \"DIA\",\n    \"decimals\": 18,\n    \"minBalance\": 10\n}\n```\n"
  },
  "erc20-balance-of-delegation": {
    "key": "erc20-balance-of-delegation",
    "author": "bonustrack",
    "version": "0.1.0",
    "dependOnOtherAddress": true,
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc20-balance-of-delegation",
          "params": {
            "symbol": "POHD",
            "address": "0x1dAD862095d40d43c2109370121cf087632874dB",
            "decimals": 0,
            "delegationSpace": "poh.eth"
          }
        },
        "network": "1",
        "addresses": [
          "0x3c13f2B56AF614aC6381265EcB3B619bA26CC641",
          "0x048fee7c3279a24af0790b6b002ded42be021d2b",
          "0x139a9032a46c3afe3456eb5f0a35183b5f189cae"
        ],
        "snapshot": 15705816
      }
    ],
    "schema": null,
    "about": ""
  },
  "erc20-balance-of-with-delegation": {
    "key": "erc20-balance-of-with-delegation",
    "author": "snapshot-labs",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc20-balance-of-with-delegation",
          "params": {
            "symbol": "POHD",
            "address": "0x1dAD862095d40d43c2109370121cf087632874dB",
            "decimals": 0,
            "delegationSpace": "poh.eth"
          }
        },
        "network": "1",
        "addresses": [
          "0x3c13f2B56AF614aC6381265EcB3B619bA26CC641",
          "0x048fee7c3279a24af0790b6b002ded42be021d2b",
          "0x139a9032a46c3afe3456eb5f0a35183b5f189cae"
        ],
        "snapshot": 15705816
      }
    ],
    "schema": null,
    "about": "# erc20-balance-of-with-delegation\n\nSimilar to `with-delegation` strategy, but it uses `erc20-balance-of` strategy to calculate voting power\n\n## Params\n\n| Param Name | Description |\n| ---------- | ----------- |\n| address    | The address of the token contract |\n| symbol     | The symbol of the token |\n| decimals   | The number of decimals of the token |\n| delegationSpace (optional) | Get delegations of a particular space (by default it take delegations of current space) |\n| delegationNetwork (optional) | Get delegations of a particular network (by default it take delegations of current network) |\n"
  },
  "erc20-balance-of-quadratic-delegation": {
    "key": "erc20-balance-of-quadratic-delegation",
    "author": "ferittuncer",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc20-balance-of-quadratic-delegation",
          "params": {
            "address": "0xd0a1e359811322d97991e03f863a0c30c2cf029c",
            "symbol": "WETH",
            "decimals": 18
          }
        },
        "network": "42",
        "addresses": [
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0xe7Bf80807514d91B8B6321044CA2785d59541d5c",
          "0xe105766f0156DAec8a46E407E35634542fA012E6",
          "0xeEFA7451c03d52ce909A93654664c46cf81DdD21"
        ],
        "snapshot": 21977746
      }
    ],
    "schema": null,
    "about": "This is a variant of erc20-balance-of-delegation strategy that preserves voting power in case of quadratic voting.\n\nProblem with erc20-balance-of-delegation is that if used with quadratic voting, total voting power that delegate has is less than expected.\nIn other words, delegation causes voting power loss. To fix this, we created this strategy.\n\nSay there are two persons, with 100 vote credits each, in a quadratic voting setting. Person A delegates to person B.\n\nUsing erc-20-balance-of-delegation:\n\nVoting Credits of Person B = Voting Credits of Person A + Voting Credits of Person B = 200\n\nPerson A could cast 10 (10^2=100) votes individually, similarly Person B could cast 10 (10^2=100) votes individually, so in total they could cast 20 votes.\nBut now, delegate can't cast 20 votes (20^2=400) because it needs 400 credits.\n\nSolution:\n\nVoting Credits of Person B = (Sqrt(Voting Credits of Person A) + Sqrt(Voting Credits of Person B))^2 = 400\n\nNow the delegate can represent the sum of individual voting powers.\n"
  },
  "erc20-balance-of-top-holders": {
    "key": "erc20-balance-of-top-holders",
    "author": "RedDuck-Software",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc20-balance-of-top-holders",
          "params": {
            "address": "0x8494Aee22e0DB34daA1e8D6829d85710357be9F7",
            "symbol": "HANDZ",
            "decimals": 18,
            "subgraphUrl": "https://api.thegraph.com/subgraphs/name/kostyamospan/handz-token",
            "topHolders": 5
          }
        },
        "network": "1",
        "addresses": [
          "0xD87dec8eE5d941234d85a9d2636D077fE03B0660",
          "0x54B9ca09248C49e9ed0968bfD0AA0bd13E85992A",
          "0x254c8A6225CE32903D2657D0945701ACD6e42188",
          "0xF59Dd6525529F77cF90Ec9A8205d52874af7a425",
          "0x0a0A1669A7E3f16b3010dD78F53D3E22Dcf4b739",
          "0x5b941eA7387190Ba6a0bF4B766c1F3eB0Ab30A25",
          "0xc0D57b31F33Ce4f6627d353Ac51461fB7cDC1519",
          "0xF5De2507726A312aD6f806A9972Ed438344022b2",
          "0x33b5752C03495014A130f8f4A235f6280C58f266",
          "0x6323b71f37a07642F8055E9847B58Ffc9FA44243",
          "0xf5F730146D177Cf7Dd28AA39F81359DaE51D4379"
        ],
        "snapshot": 18020926
      }
    ],
    "schema": null,
    "about": "# erc20-balance-of-top-holders\n\nStrategy, that accept votes only from top N token holders\n\nSubgraph should be compatible with [OpenZeppelin ERC20 Subgraph](https://github.com/OpenZeppelin/openzeppelin-subgraphs)\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0x8494Aee22e0DB34daA1e8D6829d85710357be9F7\",\n  \"symbol\": \"HANDZ\",\n  \"decimals\": 18,\n  \"subgraphUrl\": \"https://api.thegraph.com/subgraphs/name/kostyamospan/handz-token\",\n  \"topHolders\": 5\n}\n```\n"
  },
  "erc20-balance-of-weighted": {
    "key": "erc20-balance-of-weighted",
    "author": "Tanz0rz",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc20-balance-of-weighted",
          "params": {
            "address": "0x6b175474e89094c44da98b954eedeac495271d0f",
            "symbol": "DAI",
            "decimals": 18,
            "weight": 0.5
          }
        },
        "network": "1",
        "addresses": [
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x8d07D225a769b7Af3A923481E1FdF49180e6A265",
          "0x8f60501dE5b9b01F9EAf1214dbE1924aA97F7fd0",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x17ea92D6FfbAA1c7F6B117c1E9D0c88ABdc8b84C",
          "0x38C0039247A31F3939baE65e953612125cB88268"
        ],
        "snapshot": 11437846
      }
    ],
    "schema": null,
    "about": "# erc20-balance-of-weighted\n\nThis returns the balances of the voters for a specific ERC20 token with a weight multiplier applied.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n  \"symbol\": \"DAI\",\n  \"decimals\": 18,\n  \"weight\": 0.5\n}\n```\n"
  },
  "erc20-balance-of-indexed": {
    "key": "erc20-balance-of-indexed",
    "author": "0xAurelius",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Indexed Example",
        "strategy": {
          "name": "erc20-balance-of-indexed",
          "params": {
            "symbol": "wsKLIMA",
            "address": "0x6f370dba99E32A3cAD959b341120DB3C9E280bA6",
            "indexAddress": "0x25d28a24Ceb6F81015bB0b2007D795ACAc411b4d",
            "decimals": 18,
            "indexDecimals": 9
          }
        },
        "network": "137",
        "addresses": [
          "0x981d9439472DdF3f42613548b5589e46D6BBB8E8",
          "0x1069B123853f835c0F12334f67771BDd5B3F4f45",
          "0xbe80fd79e26ce0a605e5d2803e876f1b009d70cc",
          "0x55c307cbe54a1c1c105838a9d0fd60b75d7ff951",
          "0xD24FF5e32DE12be154B1C2eE7B731CBC45540E50"
        ],
        "snapshot": 23375927
      }
    ],
    "schema": null,
    "about": "# erc20-balance-of-indexed\n\nExtends the `erc20-balance-of` strategy to scale each voter's balance by an index value that increases over time.\n\nThis is particularly useful for Olympus-style protocols that have a wrapped staked token whose value is\ntied to an index.\n\nThe contract located at the `indexAddress` parameter must have a function called `index` that returns a single\nuint256 value, the result of which will be downscaled by the provided `decimals` and multiplied by\neach user's token balance to arrive at their voting power.\n\nThe index value may have a different number of decimals than the wrapped staked token, so configured this\nvia the `indexDecimals` parameter.\n\nHere is an example of parameters:\n\n{\n  \"symbol\": \"wsKLIMA\",\n  \"address\": \"0x6f370dba99E32A3cAD959b341120DB3C9E280bA6\",\n  \"indexAddress\": \"0x25d28a24Ceb6F81015bB0b2007D795ACAc411b4d\",\n  \"decimals\": 18,\n  \"indexDecimals\": 9\n}\n"
  },
  "erc20-price": {
    "key": "erc20-price",
    "author": "snapshot-labs",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc20-price",
          "params": {
            "address": "0x6b175474e89094c44da98b954eedeac495271d0f",
            "symbol": "DAI",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x8d07D225a769b7Af3A923481E1FdF49180e6A265",
          "0x8f60501dE5b9b01F9EAf1214dbE1924aA97F7fd0",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x17ea92D6FfbAA1c7F6B117c1E9D0c88ABdc8b84C",
          "0x38C0039247A31F3939baE65e953612125cB88268"
        ],
        "snapshot": 11437846
      }
    ],
    "schema": null,
    "about": "# erc20-price\n\nThis strategy returns the balances of the voters for a specific ERC20 token multiplied by price of the token. \nStrategy uses coingecko api to fetch the price from particular timestamp of the block\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n  \"symbol\": \"DAI\",\n  \"decimals\": 18\n}\n```\n\nOther Parameters:\n\n`platform` parameter for coingecko api, which can be found [here](https://api.coingecko.com/api/v3/asset_platforms)\n\n `currency` parameter (defaulted to `usd`) to change the currency of the price"
  },
  "ethalend-balance-of": {
    "key": "ethalend-balance-of",
    "author": "ethalend",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "ethalend-balance-of",
          "params": {
            "registry": "0x583B965462e11Da63D1d4bC6D2d43d391F79af1f",
            "address": "0x56bA9a2f00A4F581a05bfE9Fd0b16277eD130349",
            "symbol": "veETHA",
            "decimals": 18
          }
        },
        "network": "137",
        "addresses": [
          "0xd7539FCdC0aB79a7B688b04387cb128E75cb77Dc",
          "0x6E33e22f7aC5A4b58A93C7f6D8Da8b46c50A3E20",
          "0xC9dA7343583fA8Bb380A6F04A208C612F86C7701",
          "0x4e46cd691b0a159fbe5e2d08a3951a324e2fb4c0",
          "0x1de9184f070627a33eab44e329c699b3068c073d",
          "0x77c66d0457b6bd390c1824b3e44d6f9c31fa4166",
          "0x358271f5578868e8051441677fbaacbd5d80ae39",
          "0xae80dcf8109e2774d38884ece6c11191c7a1c583",
          "0xe07d2caf3be9447ee71ed721ac2730b8e8e985f0",
          "0xf758e816b602feb404948626b2f7f16e948a578c",
          "0xb7f5566100751c64b06280b1cb5a9286b08ae161",
          "0x647f3d7f8d513bdf67bd407f2f98b90a84e8edb5",
          "0xd3670fd0e5bbdc6c04634c66c1b94e9788d71473",
          "0x642FC634b8a0809D4d591A9A5367424E52a698C4"
        ],
        "snapshot": 32843708
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. UNI"
              ],
              "maxLength": 16
            },
            "registry": {
              "type": "string",
              "title": "Contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "address": {
              "type": "string",
              "title": "Contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ]
            }
          },
          "required": [
            "address",
            "decimals"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# ethalend-balance-of\n\nThis is a strategy made for the protocol ETHALend where we have smartWallets and we need to somehow check\ndirectly the balanceOf in the smartWallet instead of the web3 wallet, it returns the balanceOf the specified ERC20 token\nas the web3 wallet key and the value as the balanceOf the smartWallet.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n  \"symbol\": \"DAI\",\n  \"decimals\": 18,\n  \"registry\": \"0x583B965462e11Da63D1d4bC6D2d43d391F79af1f\"\n}\n```\n"
  },
  "balance-of-with-min": {
    "key": "balance-of-with-min",
    "author": "samuveth",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "balance-of-with-min",
          "params": {
            "address": "0x6b175474e89094c44da98b954eedeac495271d0f",
            "symbol": "DAI",
            "decimals": 18,
            "minBalance": 20
          }
        },
        "network": "1",
        "addresses": [
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x38C0039247A31F3939baE65e953612125cB88268"
        ],
        "snapshot": 11437846
      }
    ],
    "schema": null,
    "about": ""
  },
  "balance-of-with-thresholds": {
    "key": "balance-of-with-thresholds",
    "author": "lucid-eleven",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "balance-of-with-thresholds",
          "params": {
            "address": "0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D",
            "symbol": "BAYC",
            "decimals": 0,
            "thresholds": [
              {
                "threshold": 1,
                "votes": 1
              },
              {
                "threshold": 4,
                "votes": 2
              },
              {
                "threshold": 11,
                "votes": 3
              },
              {
                "threshold": 25,
                "votes": 4
              }
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0xed47015bb8080b9399f9d0ddfc427b9cee2caab1",
          "0xf56345338cb4cddaf915ebef3bfde63e70fe3053",
          "0x7b15e6c439b27a553b65a9904ce571da6691a0fb",
          "0x8d2f3a76a76f055d62a931678ab16b042e7badeb"
        ],
        "snapshot": 12453212
      }
    ],
    "schema": null,
    "about": "# balance-of-with-thresholds\n\nThis strategy return the balances of the voters for a specific ERC20 or ERC721 and maps them to the number of votes that voter gets based on a table of minimum thresholds.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d\",\n  \"symbol\": \"LAND\",\n  \"decimals\": 0,\n  \"thresholds\": [\n    { \"threshold\": 1, \"votes\": 1 },\n    { \"threshold\": 4, \"votes\": 2 },\n    { \"threshold\": 11, \"votes\": 3 },\n    { \"threshold\": 25, \"votes\": 4 }\n  ]\n}\n```\n"
  },
  "thresholds": {
    "key": "thresholds",
    "author": "snapshot-labs",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "thresholds",
          "params": {
            "symbol": "BAYC",
            "strategy": {
              "name": "erc20-balance-of",
              "params": {
                "address": "0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D",
                "decimals": 0
              }
            },
            "thresholds": [
              {
                "threshold": 1,
                "votes": 1
              },
              {
                "threshold": 4,
                "votes": 2
              },
              {
                "threshold": 11,
                "votes": 3
              },
              {
                "threshold": 25,
                "votes": 4
              }
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0xed47015bb8080b9399f9d0ddfc427b9cee2caab1",
          "0xf56345338cb4cddaf915ebef3bfde63e70fe3053",
          "0x7b15e6c439b27a553b65a9904ce571da6691a0fb",
          "0x8d2f3a76a76f055d62a931678ab16b042e7badeb"
        ],
        "snapshot": 12453212
      }
    ],
    "schema": null,
    "about": "# thresholds\n\nThis strategy return the voting power based on the strategy passed with the thresholds.\n\n| Parameter     | Description                                  |\n| ------------- | ------------------------------------------   |\n| `strategy`    | Strategy that you want to apply threshold to |\n| `thresholds`  | threshold values, Refer to example below     |\n\nHere is an example of parameters:\n\n```json\n{\n  \"strategy\": {\n    \"name\": \"erc20-balance-of\",\n    \"params\": {\n      \"address\": \"0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\",\n      \"decimals\": 0\n    }\n  },\n  \"thresholds\": [\n    { \"threshold\": 1, \"votes\": 1 },\n    { \"threshold\": 4, \"votes\": 2 },\n    { \"threshold\": 11, \"votes\": 3 },\n    { \"threshold\": 25, \"votes\": 4 }\n  ]\n}\n```\n"
  },
  "eth-balance": {
    "key": "eth-balance",
    "author": "bonustrack",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "eth-balance",
          "params": {
            "symbol": "ETH"
          }
        },
        "network": "1",
        "addresses": [
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x8d07D225a769b7Af3A923481E1FdF49180e6A265",
          "0x8f60501dE5b9b01F9EAf1214dbE1924aA97F7fd0",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x17ea92D6FfbAA1c7F6B117c1E9D0c88ABdc8b84C",
          "0x38C0039247A31F3939baE65e953612125cB88268"
        ],
        "snapshot": 11437846
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. ETH"
              ],
              "maxLength": 16
            }
          },
          "required": [],
          "additionalProperties": false
        }
      }
    },
    "about": "# eth-balance\n\nThis strategy is used for use ETH balance as voting power.\n\nThe balance displayed may vary depending on the network, and represents the balance of the main currency used on that network (e.g. ETH on Ethereum mainnet, BNB on Binance Smart Chain, etc.).\n\n## Params\n\nThis strategy does need any parameters.\n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| `symbol`(optional) | `string` | `` | The symbol of the currency to used for the balance. |\n"
  },
  "eth-with-balance": {
    "key": "eth-with-balance",
    "author": "AronVanAmmers",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "eth-with-balance",
          "params": {
            "symbol": "ETH",
            "minBalance": 0.5
          }
        },
        "network": "1",
        "addresses": [
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x8d07D225a769b7Af3A923481E1FdF49180e6A265",
          "0x8f60501dE5b9b01F9EAf1214dbE1924aA97F7fd0",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x17ea92D6FfbAA1c7F6B117c1E9D0c88ABdc8b84C",
          "0x38C0039247A31F3939baE65e953612125cB88268"
        ],
        "snapshot": 11437846
      }
    ],
    "schema": null,
    "about": "# ETH minimum balance strategy\n\nA strategy similar to `erc-20-with-balance`, but for the ETH balance.\n\nUsing a low minimum balance, this strategy can be used as a proxy for \"active Ethereum address\", based on the assumption that active addresses will always have some ETH on them to pay for fees.\n\n# Parameters\n\n`minBalance`: minimum ETH balance required to get voting power of 1."
  },
  "eth-wallet-age": {
    "key": "eth-wallet-age",
    "author": "ChaituVR",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Age in Days",
        "strategy": {
          "name": "eth-wallet-age",
          "params": {
            "symbol": "ETH",
            "dfuseApiKey": "web_f527db575a38dd11c5b686d7da54d371"
          }
        },
        "network": "1",
        "addresses": [
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x8d07D225a769b7Af3A923481E1FdF49180e6A265",
          "0x8f60501dE5b9b01F9EAf1214dbE1924aA97F7fd0",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x17ea92D6FfbAA1c7F6B117c1E9D0c88ABdc8b84C",
          "0x38C0039247A31F3939baE65e953612125cB88268"
        ],
        "snapshot": 11437846
      }
    ],
    "schema": null,
    "about": "# ETH Wallet Age strategy\n\nAllows getting the first transaction date from dfuse api, which are used to calculate voter scores with a number of days from the first transaction."
  },
  "maker-ds-chief": {
    "key": "maker-ds-chief",
    "author": "bonustrack",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "maker-ds-chief",
          "params": {
            "symbol": "DAI",
            "address": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030"
        ],
        "snapshot": 13494433
      }
    ],
    "schema": null,
    "about": ""
  },
  "erc721": {
    "key": "erc721",
    "author": "bonustrack",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc721",
          "params": {
            "address": "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
            "symbol": "PUNK"
          }
        },
        "network": "1",
        "addresses": [
          "0x51688cd36c18891167e8036bde2a8fb10ec80c43",
          "0x3e17fac953de2cd729b0ace7f6d4353387717e9e",
          "0x23f67feb67a3aa1e376d23beaa3f241217e427c9",
          "0x54685c62db8e16b1484768db8e0daf3c644d50bf",
          "0x766bc61d3150232f6f4e1d81633d68f3a94879e3"
        ],
        "snapshot": 12413022
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. DOODLE"
              ],
              "maxLength": 16
            },
            "address": {
              "type": "string",
              "title": "Contract address",
              "examples": [
                "e.g. 0x1f9840a85d5af5bf1d1762f925bdaddc4201f984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            }
          },
          "required": [
            "address"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# erc721\n\nThis strategy return the balances of the voters for a specific ERC721 NFT.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\",\n  \"symbol\": \"PUNK\"\n}\n```\n"
  },
  "erc721-enumerable": {
    "key": "erc721-enumerable",
    "author": "bonustrack",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc721-enumerable",
          "params": {
            "address": "0x2216d47494e516d8206b70fca8585820ed3c4946",
            "symbol": "WT"
          }
        },
        "network": "1",
        "addresses": [
          "0x4A7998DF2Cd16815271bb6b7d3aE7EB30f50a73a",
          "0x08D816526BdC9d077DD685Bd9FA49F58A5Ab8e48"
        ],
        "snapshot": 12353494
      }
    ],
    "schema": null,
    "about": ""
  },
  "erc721-with-multiplier": {
    "key": "erc721-with-multiplier",
    "author": "2fd",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc721-with-multiplier",
          "params": {
            "address": "0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d",
            "symbol": "LAND",
            "multiplier": 2000
          }
        },
        "network": "1",
        "addresses": [
          "0x4eac6325e1dbf1ac90434d39766e164dca71139e",
          "0x1b204424563dcfcabd2aee632163b9e6dc8bd4f3"
        ],
        "snapshot": 12453212
      }
    ],
    "schema": null,
    "about": "# erc721-with-multiplier\n\nThis strategy return the balances of the voters for a specific ERC721 NFT with an arbitrary multiplier.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\",\n  \"multiplier\": 100,\n  \"symbol\": \"PUNK\"\n}\n```\n"
  },
  "erc721-with-tokenid": {
    "key": "erc721-with-tokenid",
    "author": "dimsome",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc721-with-tokenid",
          "params": {
            "address": "0x22C1f6050E56d2876009903609a2cC3fEf83B415",
            "symbol": "POAP",
            "tokenIds": [
              "613607",
              "613237"
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x2b85075702b5bc4737d8e1560b7efe8535105b47",
          "0x3e17fac953de2cd729b0ace7f6d4353387717e9e",
          "0xE76Be9C1e10910d6Bc6b63D8031729747910c2f6",
          "0xC5e1569772b2d425Ac9469d39F17341C01e1CF4c"
        ],
        "snapshot": 12913585
      }
    ],
    "schema": null,
    "about": "# erc721 with tokenid\n\nThis strategy return the balances of the voters for a specific ERC721 NFT with a given TokenId.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0x22C1f6050E56d2876009903609a2cC3fEf83B415\",\n  \"symbol\": \"POAP\",\n  \"tokenIds\": [\"613607\", \"613237\"]\n}\n```\n"
  },
  "erc721-with-tokenid-range-weights": {
    "key": "erc721-with-tokenid-range-weights",
    "author": "gregegan",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc721-with-tokenid-range-weights",
          "params": {
            "address": "0x30cDAc3871c41a63767247C8D1a2dE59f5714e78",
            "symbol": "Reaper(s)",
            "defaultWeight": 1,
            "tokenIdWeightRanges": [
              {
                "start": 0,
                "end": 3000,
                "weight": 1
              },
              {
                "start": 3001,
                "end": 4715,
                "weight": 2
              }
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x863379Ab401d454834E1FE2eCe48F51a29eE9d7A",
          "0x4C4E6f13fb5E3f70C3760262a03E317982691d10",
          "0xf58195de3af91aff1f8dd559ad41f88f1b6c4aaf"
        ],
        "snapshot": 13847063
      }
    ],
    "schema": null,
    "about": "# erc721 with tokenid range weights\n\nThis strategy allows you to weight erc721's with different values by defining ranges of id's. If it does not match a range, it will use the defaultWeight.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0x22C1f6050E56d2876009903609a2cC3fEf83B415\",\n  \"symbol\": \"POAP\",\n  \"defaultWeight\": 1,\n  \"tokenIdWeightRanges\": [\n    { \"start\": 0, \"end\": 3000, \"weight\": 1 },\n    { \"start\": 3001, \"end\": 6000, \"weight\": 2 }\n  ]\n}\n```\n"
  },
  "erc721-with-tokenid-range-weights-simple": {
    "key": "erc721-with-tokenid-range-weights-simple",
    "author": "FeSens",
    "version": "0.2.0",
    "examples": [
      {
        "name": "Example query with default weight",
        "strategy": {
          "name": "erc721-with-tokenid-range-weights-simple",
          "params": {
            "address": "0x427cE6c9E2a504aEB22dc3839FbC4f4B6ebD75bb",
            "symbol": "BLUES",
            "defaultWeight": 2,
            "tokenIdWeightRanges": [
              {
                "start": 2028,
                "end": 2029,
                "weight": 1
              },
              {
                "start": 1,
                "end": 5,
                "weight": 7
              }
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x285bd3a5c9cae024d70c7e70fcfc59db03637549",
          "0xd82af9AE7c547cF81580D550C0460D31A9435312",
          "0x226705FdF7C0e118f4DbAf8063026EE2Fc2A17A3",
          "0x34db35639EAfe2712aE1F69dfa298b06a5c25053"
        ],
        "snapshot": 14661926
      },
      {
        "name": "Example query",
        "strategy": {
          "name": "erc721-with-tokenid-range-weights-simple",
          "params": {
            "address": "0x696115768bbef67be8bd408d760332a7efbee92d",
            "symbol": "LINKSDAO",
            "tokenIdWeightRanges": [
              {
                "start": 1,
                "end": 100,
                "weight": 1
              },
              {
                "start": 6364,
                "end": 6464,
                "weight": 4
              }
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x7d863d74917191685616217c8ab1a77e73e79f21",
          "0xb111dabb8edd8260b5c1e471945a62be2ee24470",
          "0x285bd3a5c9cae024d70c7e70fcfc59db03637549"
        ],
        "snapshot": 13995858
      },
      {
        "name": "Example query with huge ranges",
        "strategy": {
          "name": "erc721-with-tokenid-range-weights-simple",
          "params": {
            "address": "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
            "symbol": "BORED APES",
            "tokenIdWeightRanges": [
              {
                "start": 9020,
                "end": 9030,
                "weight": 1
              },
              {
                "start": 1,
                "end": 9000,
                "weight": 4
              }
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x7d863d74917191685616217c8ab1a77e73e79f21",
          "0xb111dabb8edd8260b5c1e471945a62be2ee24470",
          "0x285bd3a5c9cae024d70c7e70fcfc59db03637549"
        ],
        "snapshot": 13995858
      }
    ],
    "schema": null,
    "about": "# erc721-with-tokenid-range-weights-simple\n\nThis strategy is a modification of \"erc721-with-tokenid-range-weights\". This strategy allows for multiple votes from a single wallet, and different token ids represent different weights. For example, a wallet containing two ERC721 TokenIDs from weight 1, and three ERC721 TokenIDS from weight 4, would receive fourteen votes. (2*1+3*4). It's also possible to set up an optional \"defaultWeight\" for IDs that don't fall in any declared range. The other difference is that this strategy does not require the extension of OpenZeppelin's erc721Enumerable contract\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0x696115768bbef67be8bd408d760332a7efbee92d\",\n  \"symbol\": \"LINKSDAO\",\n  \"defaultWeight\": 2,\n  \"tokenIdWeightRanges\": [\n    { \"start\": 1, \"end\": 100, \"weight\": 1 },\n    { \"start\": 6364, \"end\": 6464, \"weight\": 4 }\n  ]\n}\n```\n"
  },
  "erc721-with-tokenid-weighted": {
    "key": "erc721-with-tokenid-weighted",
    "author": "andrewkingme",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc721-with-tokenid-weighted",
          "params": {
            "address": "0x30cDAc3871c41a63767247C8D1a2dE59f5714e78",
            "symbol": "Reaper(s)",
            "tokenIds": [
              "2112",
              "2871",
              "3221",
              "3587"
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x863379Ab401d454834E1FE2eCe48F51a29eE9d7A",
          "0x4C4E6f13fb5E3f70C3760262a03E317982691d10",
          "0xf58195de3af91aff1f8dd559ad41f88f1b6c4aaf"
        ],
        "snapshot": 13847063
      }
    ],
    "schema": null,
    "about": "# erc721-with-tokenid-weighted\n\nThis strategy is a modification of erc721-with-tokenid by dimsome. Instead of a maximum one vote per wallet, this strategy allows for multiple votes from a single wallet. For example, a wallet containing three whitelisted ERC721 TokenIDs would receive three votes.\n\nIn short, this strategy provides one vote per whitelisted ERC721 TokenID- regardless of wallet distribution.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0x30cDAc3871c41a63767247C8D1a2dE59f5714e78\",\n  \"symbol\": \"Reaper(s)\",\n  \"tokenIds\": [\"2112\", \"2871\", \"3221\", \"3587\"]\n}\n```\n"
  },
  "erc721-with-metadata": {
    "key": "erc721-with-metadata",
    "author": "allmysmarts",
    "version": "0.1.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc721-with-metadata",
          "params": {
            "address": "0x986010627A96200C287Cff73007b7b5797C32846",
            "symbol": "NFT",
            "metadataSrc": "https://6242dbddb6734894c157cfc0.mockapi.io/api/votingWeights"
          }
        },
        "network": "1",
        "addresses": [
          "0x50dd57F50A17d57304e7A4F262Da30bEB31C2E87",
          "0x1fbF1E602530fB2e849Ae46B34A29493BCd75EC9",
          "0xD130470E8b4B73d74FB723d5cb8A9DfD83462a1f"
        ],
        "snapshot": 16521706
      }
    ],
    "schema": null,
    "about": "# ERC721 with Metadata attribute\n\nThis strategy allows you to determine the voting power by reading the metadata attribute of holding NFT.\n\nGenerally `tokenURI(tokenID)` returns the individual metadata URI in ERC721.\n\nBut for performance requirement in snapshot, it needs single endpoint that returns all weight values at once, specifying in `metadataSrc`.\n\nHere is an example of parameters:\n```json\n{\n  \"address\": \"0xedCbF9D4CC3BA9aAA896adADeac1b6DF6326f7D8\",\n  \"symbol\": \"KAP-NFT\",\n  \"metadataSrc\": \"https://6242dbddb6734894c157cfc0.mockapi.io/api/votingWeights\"\n}\n```\n\nAnd this is the required json schema for NFT metadata source.\n```json\n[\n    {\n        [tokenID]: [value]\n    }\n]\n```\n\nExample: \n(https://6242dbddb6734894c157cfc0.mockapi.io/api/votingWeights)\n```json\n[\n  {\n    \"1\": 5\n  },\n  {\n    \"2\": 18\n  },\n  {\n    \"3\": 1\n  },\n  {\n    \"4\": 4\n  },\n  {\n    \"5\": 11\n  },\n  {\n    \"6\": 8\n  },\n  {\n    \"7\": 7\n  }\n]\n```\n"
  },
  "erc721-with-metadata-by-ownerof": {
    "key": "erc721-with-metadata-by-ownerof",
    "author": "victor-kyriazakos",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc721-with-metadata-by-ownerof",
          "params": {
            "address": "0xea1982b712FA2eCf27F12E205b3b31D43FA858E5",
            "symbol": "RFM100",
            "metadataSrc": "https://6242dbddb6734894c157cfc0.mockapi.io/api/votingWeights"
          }
        },
        "network": "4",
        "addresses": [
          "0x030fBBD3ce096195c8c83bb8BfB70704eed865F9",
          "0xb0b085dd0fe6c9632058f9ef088375c16f3aff12",
          "0x7f16D5c969380E3420E17B4c3456A3844745A578"
        ],
        "snapshot": 10825197
      }
    ],
    "schema": null,
    "about": "# ERC721 with Metadata attribute - Vote power calculated via ownerOf\n\nThis strategy allows you to determine the voting power by reading the metadata attribute of holding NFT.\n\nGenerally `tokenURI(tokenID)` returns the individual metadata URI in ERC721.\n\nBut for performance requirement in snapshot, it needs single endpoint that returns all weight values at once, specifying in `metadataSrc`.\n\nThis strategy is a modification of \"erc721-with-metadata\". This strategy allows for multiple votes from a single wallet, and different token ids represent different weights. For example, a wallet containing two ERC721 TokenIDs from weight 1, and three ERC721 TokenIDS from weight 4, would receive fourteen votes. (2*1+3*4). The main difference is that this strategy does not require the extension of OpenZeppelin's erc721Enumerable contract, as implemented in \"erc721-with-tokenid-range-weights-simple\".\n\nHere is an example of parameters:\n```json\n{\n  \"address\": \"0xedCbF9D4CC3BA9aAA896adADeac1b6DF6326f7D8\",\n  \"symbol\": \"KAP-NFT\",\n  \"metadataSrc\": \"https://6242dbddb6734894c157cfc0.mockapi.io/api/votingWeights\"\n}\n```\n\nAnd this is the required json schema for NFT metadata source.\n```json\n[\n    {\n        [tokenID]: [value]\n    }\n]\n```\n\nExample: \n(https://6242dbddb6734894c157cfc0.mockapi.io/api/votingWeights)\n```json\n[\n  {\n    \"1\": 5\n  },\n  {\n    \"2\": 18\n  },\n  {\n    \"3\": 1\n  },\n  {\n    \"4\": 4\n  },\n  {\n    \"5\": 11\n  },\n  {\n    \"6\": 8\n  },\n  {\n    \"7\": 7\n  }\n]\n```\n"
  },
  "erc721-multi-registry": {
    "key": "erc721-multi-registry",
    "author": "dievardump",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc721-multi-registry",
          "params": {
            "symbol": "PUNKS",
            "registries": [
              "0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB",
              "0xb7F7F6C52F2e2fdb1963Eab30438024864c313F6"
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x51688cd36c18891167e8036bde2a8fb10ec80c43",
          "0x3e17fac953de2cd729b0ace7f6d4353387717e9e",
          "0x23f67feb67a3aa1e376d23beaa3f241217e427c9",
          "0x54685c62db8e16b1484768db8e0daf3c644d50bf",
          "0x766bc61d3150232f6f4e1d81633d68f3a94879e3",
          "0xe34bded2b256430a9be53cbf5cba3b6d866d55f3",
          "0x031c690be2932403cbdd85f8853f596794cff6c3"
        ],
        "snapshot": 12995362
      }
    ],
    "schema": null,
    "about": "# erc721\n\nThis strategy returns the balances of the voters for a list of ERC721 NFT registries.\n\nHere is an example of parameters:\n\n```json\n{\n  \"symbol\": \"PUNKS\",\n  \"registries\": [\n    \"0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB\",\n    \"0xb7F7F6C52F2e2fdb1963Eab30438024864c313F6\"\n  ]\n}\n```\n"
  },
  "erc1155-balance-of": {
    "key": "erc1155-balance-of",
    "author": "dave4506",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc1155-balance-of",
          "params": {
            "symbol": "ABC",
            "address": "0xE18a32192ED95b0FE9D70D19e5025f103475d7BA",
            "tokenId": "0x8000000000000000000000000000000200000000000000000000000000000000",
            "decimals": 0
          }
        },
        "network": "1",
        "addresses": [
          "0x0B7056e2D9064f2ec8647F1ae556BAcc06da6Db4",
          "0xcc5Ddc8CCD5B1E90Bc42F998ec864Ead0090A12B",
          "0x0154d25120Ed20A516fE43991702e7463c5A6F6e"
        ],
        "snapshot": 11992257
      }
    ],
    "schema": null,
    "about": "# erc1155-balances-of\n\nThis strategy return the balances of the voters, for a specific token in a ERC1155 contract.\n\n> Note: If you want to get balance of all tokenIds in the contract, you can use the `erc1155-balance-of-all` strategy. If you have multiple tokenIds, you can use the `erc1155-balance-of-ids` or `erc1155-balance-of-ids-weighted` strategy.\n\n## Params\n\n| param | type | description |\n| --- | --- | --- |\n| `address` | `string` | The address of the ERC1155 contract |\n| `tokenId` | `string` | The tokenId of the token to check |\n| `decimals` | `number` | The number of decimals of the token |\n| `symbol`(optional) | `string` | The symbol of the token |\n"
  },
  "erc1155-balance-of-cv": {
    "key": "erc1155-balance-of-cv",
    "author": "dave4506",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc1155-balance-of-cv",
          "params": {
            "symbol": "ABC",
            "address": "0xE18a32192ED95b0FE9D70D19e5025f103475d7BA",
            "tokenId": "0x8000000000000000000000000000000200000000000000000000000000000000",
            "decimals": 0
          }
        },
        "network": "1",
        "addresses": [
          "0x0B7056e2D9064f2ec8647F1ae556BAcc06da6Db4",
          "0xcc5Ddc8CCD5B1E90Bc42F998ec864Ead0090A12B",
          "0x0154d25120ed20a516fe43991702e7463c5a6f6e"
        ],
        "snapshot": 11992257
      }
    ],
    "schema": null,
    "about": ""
  },
  "prepo-vesting": {
    "key": "prepo-vesting",
    "author": "prepo-io",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Example Goerli query",
        "strategy": {
          "name": "prepo-vesting",
          "params": {
            "symbol": "PPO (Vesting)",
            "address": "0xB1B74EA823bAd9AFb5e2caC578235EeeB329A245",
            "multiplier": 0.5
          }
        },
        "network": "5",
        "addresses": [
          "0x1549920373edB37AE3a9Cffe1bE02844Df3127D0",
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x8d07D225a769b7Af3A923481E1FdF49180e6A265",
          "0x8f60501dE5b9b01F9EAf1214dbE1924aA97F7fd0",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x17ea92D6FfbAA1c7F6B117c1E9D0c88ABdc8b84C",
          "0x38C0039247A31F3939baE65e953612125cB88268"
        ],
        "snapshot": 7343530
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "prePO Vesting Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. PPO (Vesting)"
              ],
              "maxLength": 16
            },
            "address": {
              "type": "string",
              "title": "Contract Address",
              "examples": [
                "e.g. 0xB1B74EA823bAd9AFb5e2caC578235EeeB329A245"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "multiplier": {
              "type": "number",
              "title": "Multiplier",
              "examples": [
                "e.g. 0.5"
              ]
            }
          },
          "required": [
            "address",
            "multiplier"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# prePO Vesting Snapshot Strategy\n\nThis strategy returns a voting score based on PPO under vesting from the [prePO Vesting contract](https://github.com/prepo-io/prepo-monorepo/blob/main/apps/smart-contracts/token/contracts/vesting/Vesting.sol).\n\nTo use this strategy, your contract must contain 3 methods from the prePO [Vesting interface](https://github.com/prepo-io/prepo-monorepo/blob/main/apps/smart-contracts/token/contracts/vesting/interfaces/IVesting.sol): `getAmountAllocated`, `getClaimableAmount` and `getVestedAmount`.\n\nThis strategy assumes that the vesting token has 18 decimals.\n\n### Calculation\n\nWhen contract is paused (as a proxy for a cliff):\n`score = (unclaimedVestedBalance + unvestedBalance) * multiplier`\n\nElse:\n`score = unclaimedVestedBalance + unvestedBalance * multiplier`\n\nwhere:\n\n- `unclaimedVestedBalance = getClaimableAmount`\n- `unvestedBalance = getAmountAllocated - getVestedAmount`\n\n### Parameters\n\nThe strategy takes three parameters:\n\n- `symbol`: Symbol of the strategy\n- `address`: Address of contract that has all the methods mentioned above\n- `multiplier`: A multiplier applied to the unvested balance\n\nHere is an example of parameters:\n\n```json\n{\n  \"symbol\": \"PPO (Vesting)\",\n  \"address\": \"0xB1B74EA823bAd9AFb5e2caC578235EeeB329A245\",\n  \"multiplier\": 0.5\n}\n```\n\n### Tests\n\nTo test the strategy, run `yarn test --strategy=prepo-vesting --more=500`\n\n### Links\n\n- [prePO's Website](https://prepo.io/)\n- [prePO's GitHub](https://github.com/prepo-io/prepo-monorepo/)\n- [prePO's Snapshot Space](https://vote.prepo.io/)\n"
  },
  "multichain": {
    "key": "multichain",
    "author": "kesar",
    "version": "1.1.0",
    "examples": [
      {
        "name": "Multichain Voting",
        "strategy": {
          "name": "multichain",
          "params": {
            "symbol": "MULTI",
            "strategies": [
              {
                "name": "erc20-balance-of",
                "network": "137",
                "params": {
                  "address": "0xB9638272aD6998708de56BBC0A290a1dE534a578",
                  "decimals": 18
                }
              },
              {
                "name": "erc20-balance-of",
                "network": "56",
                "params": {
                  "address": "0x0e37d70b51ffa2b98b4d34a5712c5291115464e3",
                  "decimals": 18
                }
              }
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5",
          "0x9feab70f3c4a944b97b7565bac4991df5b7a69ff",
          "0xaca39b187352d9805deced6e73a3d72abf86e7a0"
        ],
        "snapshot": 13035566
      }
    ],
    "schema": null,
    "about": "# multichain\n\nIf you want to calculate the balance from various chains like Ethereum, Binance smart chain, polygon etc. and use them for voting using various strategies, you can do it by using a strategy called “multichain strategy”. This allows cross chain voting in which multiple chains can be used together to calculate the voting power.\n\nIn multichain strategy, the params should define sub strategies which would use different networks mentioned in the field to combine the voting power.\n\nIn order to provide multichain functionality, this strategy provides a way to calculate which block number should be used on additional chains: If a snapshot was created on block 125 on mainnet, it will find the timestamp for that block and go find which block number corresponds to that same timestamp on every other wanted chain. This way it can accurately represent an address' voting power at a given point in time.\n\nHere is an example of parameters:\n\nIn the below example, the tokens on the three networks namely ethereum, polygon and bsc denotes combined voting power\n\n```json\n{\n  \"symbol\": \"MULTI\",\n  \"strategies\": [\n    {\n      \"name\": \"erc20-balance-of\",\n      \"network\": \"1\",\n      \"params\": {\n        \"address\": \"0x579cea1889991f68acc35ff5c3dd0621ff29b0c9\",\n        \"decimals\": 18\n      }\n    },\n    {\n      \"name\": \"erc20-balance-of\",\n      \"network\": \"137\",\n      \"params\": {\n        \"address\": \"0xB9638272aD6998708de56BBC0A290a1dE534a578\",\n        \"decimals\": 18\n      }\n    },\n    {\n      \"name\": \"erc20-balance-of\",\n      \"network\": \"56\",\n      \"params\": {\n        \"address\": \"0x0e37d70b51ffa2b98b4d34a5712c5291115464e3\",\n        \"decimals\": 18\n      }\n    },\n    {\n      \"name\": \"erc20-balance-of\",\n      \"network\": 137,\n      \"params\": {\n        \"address\": \"0xfC0fA725E8fB4D87c38EcE56e8852258219C64Ee\",\n        \"decimals\": 18\n      }\n    }\n  ]\n}\n\n```\n"
  },
  "gooddollar-multichain": {
    "key": "gooddollar-multichain",
    "author": "sirpy",
    "version": "1.0.0",
    "examples": [
      {
        "name": "GoodDolalr Multichain",
        "strategy": {
          "name": "gooddollar-multichain",
          "params": {
            "symbol": "GOOD",
            "strategies": [
              {
                "name": "contract-call",
                "network": "122",
                "params": {
                  "symbol": "GOOD",
                  "address": "0x603b8c0f110e037b51a381cbcacabb8d6c6e4543",
                  "decimals": 18,
                  "methodABI": {
                    "name": "getVotes",
                    "type": "function",
                    "inputs": [
                      {
                        "name": "voter",
                        "type": "address",
                        "internalType": "address"
                      }
                    ],
                    "outputs": [
                      {
                        "name": "",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ],
                    "stateMutability": "view"
                  }
                }
              },
              {
                "name": "contract-call",
                "network": "1",
                "params": {
                  "symbol": "GOOD",
                  "address": "0x603b8c0f110e037b51a381cbcacabb8d6c6e4543",
                  "decimals": 18,
                  "methodABI": {
                    "name": "getVotes",
                    "type": "function",
                    "inputs": [
                      {
                        "name": "voter",
                        "type": "address",
                        "internalType": "address"
                      }
                    ],
                    "outputs": [
                      {
                        "name": "",
                        "type": "uint256",
                        "internalType": "uint256"
                      }
                    ],
                    "stateMutability": "view"
                  }
                }
              }
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x66582D24FEaD72555adaC681Cc621caCbB208324",
          "0xA48840D89a761502A4a7d995c74f3864D651A87F"
        ],
        "snapshot": 15000000
      }
    ],
    "schema": null,
    "about": "# max eth fuse\n\n** This strategy is limited to networks 1 and 122 and allows at most 2 sub strategies**\n\nThis is similar to the multichain strategy only that it chooses the chain with max voting power.\n\nHere is an example of parameters:\n\nIn the below example, the tokens on etherem and fuse are queried and the max value denotes the voting power\n\n```json\n{\n  \"symbol\": \"GOOD\",\n  \"strategies\": [\n    {\n      \"name\": \"contract-call\",\n      \"network\": \"122\",\n      \"params\": {\n        \"symbol\": \"GOOD\",\n        \"address\": \"0x603b8c0f110e037b51a381cbcacabb8d6c6e4543\",\n        \"decimals\": 18,\n        \"methodABI\": {\n          \"name\": \"getVotes\",\n          \"type\": \"function\",\n          \"inputs\": [\n            {\n              \"name\": \"voter\",\n              \"type\": \"address\",\n              \"internalType\": \"address\"\n            }\n          ],\n          \"outputs\": [\n            {\n              \"name\": \"\",\n              \"type\": \"uint256\",\n              \"internalType\": \"uint256\"\n            }\n          ],\n          \"stateMutability\": \"view\"\n        }\n      }\n    },\n    {\n      \"name\": \"contract-call\",\n      \"network\": \"1\",\n      \"params\": {\n        \"symbol\": \"GOOD\",\n        \"address\": \"0x603b8c0f110e037b51a381cbcacabb8d6c6e4543\",\n        \"decimals\": 18,\n        \"methodABI\": {\n          \"name\": \"getVotes\",\n          \"type\": \"function\",\n          \"inputs\": [\n            {\n              \"name\": \"voter\",\n              \"type\": \"address\",\n              \"internalType\": \"address\"\n            }\n          ],\n          \"outputs\": [\n            {\n              \"name\": \"\",\n              \"type\": \"uint256\",\n              \"internalType\": \"uint256\"\n            }\n          ],\n          \"stateMutability\": \"view\"\n        }\n      }\n    }\n  ]\n}\n```\n"
  },
  "uni": {
    "key": "uni",
    "author": "bonustrack",
    "version": "0.1.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "uni",
          "params": {
            "symbol": "UNI",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x2Ab4e42c2190C05b3dccD9B039dAf8743217392a",
          "0x00000583Cf2C6aA7488471fbe12ac7f0DfeB1cDa",
          "0xEF5AD662a5a42C3023e009035ee235082800B924",
          "0x7466ebF3B8aF67511f7163Ab1E31f928b2E60330"
        ],
        "snapshot": 10911534
      }
    ],
    "schema": null,
    "about": ""
  },
  "frax-finance": {
    "key": "frax-finance",
    "author": "FraxFinance",
    "version": "0.0.2",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "frax-finance",
          "params": {
            "symbol": "FXS",
            "decimals": 18,
            "FXS": "0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0",
            "VEFXS": "0xc8418aF6358FFddA74e09Ca9CC3Fe03Ca6aDC5b0",
            "UNI_LP_FRAX_FXS": "0xE1573B9D29e2183B1AF0e743Dc2754979A40D237",
            "FARMING_UNI_LP_FRAX_FXS": "0xda2c338350a0E59Ce71CDCED9679A3A590Dd9BEC"
          }
        },
        "network": "1",
        "addresses": [
          "0x36A87d1E3200225f881488E4AEedF25303FebcAe",
          "0x234D953a9404Bf9DbC3b526271d440cD2870bCd2",
          "0x6B175474E89094C44Da98b954EedeAC495271d0F",
          "0x22511ffA88433aB56495947b559dfB62B3d47633"
        ],
        "snapshot": 12557453
      }
    ],
    "schema": null,
    "about": ""
  },
  "yearn-vault": {
    "key": "yearn-vault",
    "author": "bonustrack",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Stakers on xDai (from POSDAO staking)",
        "strategy": {
          "name": "yearn-vault",
          "params": {
            "symbol": "YFI (yYFI)",
            "address": "0xBA2E7Fed597fd0E3e70f5130BcDbbFE06bB94fe1",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x8C612B03b3358C1E535706695c635C360034B968",
          "0x24d19f100ba142543a863fc2294b188e35ab55b9",
          "0x29cf39de6d963d092c177a60ce67879eea9910bb"
        ],
        "snapshot": 11884857
      }
    ],
    "schema": null,
    "about": ""
  },
  "moloch": {
    "key": "moloch",
    "author": "adridadou",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "moloch",
          "params": {
            "symbol": "CELO",
            "address": "0x471ece3750da237f93b8e339c536989b8978a438",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030"
        ],
        "snapshot": 13494433
      }
    ],
    "schema": null,
    "about": ""
  },
  "masterchef": {
    "key": "masterchef",
    "author": "0xKiwi",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "masterchef",
          "params": {
            "_comment_": "NOTE: this strategy only supports 1 pool in masterchef. If you need better support, contact @0xKiwi",
            "address": "0x4688a8b1f292fdab17e9a90c8bc379dc1dbd8713",
            "symbol": "COVER (Masterchef)"
          }
        },
        "network": "1",
        "addresses": [
          "0x2073513fdd01a70d4a1eb8b0361b992eb6f1c13b"
        ],
        "snapshot": 11838909
      }
    ],
    "schema": null,
    "about": ""
  },
  "sushiswap": {
    "key": "sushiswap",
    "author": "maxaleks",
    "version": "0.2.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "sushiswap",
          "params": {
            "address": "0xcafe001067cdef266afb7eb5a286dcfd277f3de5",
            "symbol": "PSP",
            "useStakedBalances": "true",
            "masterchefVersion": "v2"
          }
        },
        "network": "1",
        "addresses": [
          "0x058476edacb23e9507cff379e7dd8cf4dee4d2db",
          "0x5ba47f8c64fcf55e986e2f37860b91b501d1b1ed"
        ],
        "snapshot": 14080593
      }
    ],
    "schema": null,
    "about": "# Sushiswap\n\nThis strategy returns balances of the underlying token in Sushiswap LP pools\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0x0Ae055097C6d159879521C384F1D2123D1f195e6\",\n  \"useStakedBalances\": \"true\",\n  \"masterchefVersion\": \"v1\"\n}\n```\n\n- *address* - the underlying token\n- *useStakedBalances* - if **true** it will also return the token balances from the MasterChef LP Staking Pool\n- *masterchefVersion* - if **v2** it will return the token balances from the MasterChef v2 LP Staking Pool instead of MasterChef v1. Defaults to v1\n"
  },
  "uniswap": {
    "key": "uniswap",
    "author": "snapshot-labs",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "uniswap",
          "params": {
            "address": "0xde30da39c46104798bb5aa3fe8b9e0e1f348163f",
            "symbol": "DAI"
          }
        },
        "network": "1",
        "addresses": [
          "0x0DE92626498717585F06E5bF5B85A7A88872F5B3",
          "0x76F780c336dAc20a4A5e73677f98B6B3a78FBd86",
          "0xe0d0527fFC6D7D64A03c9509911323D4D15E5966"
        ],
        "snapshot": 1111000
      }
    ],
    "schema": null,
    "about": ""
  },
  "faraland-staking": {
    "key": "faraland-staking",
    "author": "edwardEvans094",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Faraland stake query",
        "strategy": {
          "name": "faraland-staking",
          "params": {
            "address": "0x3057A6EF2aCf803371315380d21D0193471E3EF8",
            "symbol": "FARA"
          }
        },
        "network": "56",
        "addresses": [
          "0x3f105F78359ad80562B4c34296a87b8e66c584C5"
        ],
        "snapshot": 10913859
      }
    ],
    "schema": null,
    "about": ""
  },
  "flashstake": {
    "key": "flashstake",
    "author": "anassohail99",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Flashstake query",
        "strategy": {
          "name": "flashstake",
          "params": {
            "address": "0x20398ad62bb2d930646d45a6d4292baa0b860c1f",
            "symbol": "FLASH",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x4BF4e3a59add035c479CDE89d98103Cb65DCa941",
          "0xd0f50C0431b76FA58Aeefdd68617acb4E0628051",
          "0x1e13e5B5ACBB0C3F0fDe50fE7661fdF75df8F932",
          "0xa54eEc957386246Ee0Da4FdB3D92c0c31528946E",
          "0x3D0Ec0ADbe7c22EE54F1221F5b023471a1c86E51"
        ],
        "snapshot": 12375794
      }
    ],
    "schema": null,
    "about": ""
  },
  "pancake": {
    "key": "pancake",
    "author": "pancake-swap",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "pancake",
          "params": {
            "symbol": "DAI",
            "address": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030"
        ],
        "snapshot": 13494433
      }
    ],
    "schema": null,
    "about": "# Contract call strategy\n\nAllows the tokens staked in chef contracts to be used to calculate voter scores.\n\n## Examples\n\nCan be used instead of the erc20-balance-of strategy, the space config will look like this:\n\n```JSON\n{\n  \"strategies\": [\n    [\"pancake\", {\n      \"address\": \"0x009cF7bC57584b7998236eff51b98A168DceA9B0\",\n      \"chefAddresses\": [\n          {\n            \"address\": \"0xFb1088Dae0f03C5123587d2babb3F307831E6367\",\n            \"decimals\": 18\n          },\n          {\n            \"address\": \"0x4086D46A650517fa756F620507dB704D3900Da07\",\n            \"decimals\": 6\n          }\n      ]\n    }]\n  ]\n}\n```\n"
  },
  "pancake-profile": {
    "key": "pancake-profile",
    "author": "skyrocktech",
    "version": "0.0.2",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "pancake-profile",
          "params": {
            "address": "0x0a8901b0E25DEb55A87524f0cC164E9644020EBA",
            "symbol": "PCS",
            "decimals": 18
          }
        },
        "network": "56",
        "addresses": [
          "0x89eBA09BbFf0CD6f750bCDB423A3cD1f09d876fD",
          "0x56d0b5ed3d525332f00c9bc938f93598ab16aaa7",
          "0x49e4dbff86a2e5da27c540c9a9e8d2c3726e278f",
          "0x4757ce43dc5429b8f1a132dc29ef970e55ae722b",
          "0xB4E597e34E3eC254e9e4795ECF1A31b9Fa1e40F4",
          "0xd7539FCdC0aB79a7B688b04387cb128E75cb77Dc",
          "0x6E33e22f7aC5A4b58A93C7f6D8Da8b46c50A3E20",
          "0xC9dA7343583fA8Bb380A6F04A208C612F86C7701",
          "0x5315A1C257FD6266F9608f31AC9b6501C98c5750",
          "0x2AC89522CB415AC333E64F52a1a5693218cEBD58",
          "0xd90c6f6D37716b1Cc4dd2B116be42e8683550F45",
          "0x69ABF813a683391C0ec888351912E14590B56e88",
          "0x5bFE87274C671b4Cf6A1AF554916819F6141EaA1",
          "0x85924aA0B2cb5a0BbeC583Dd090bF7CEdBa5D2Ea",
          "0x9149B2b87159c4CC9e2f10C2711357720Da4DA08",
          "0xa0710d3b4BA0f848f7edf9CC827aF70A183EAd26",
          "0xAE1220f6bFEb414Ed0A95fbb5A6Ecc303b10aa46",
          "0x776b913480d4326430F52F58b16DdF67eEB08DEb",
          "0xebe986802F7858E1919451C6Ff893e294F31CE54",
          "0x2d7cAA8462023af022A5004dA7b781b8ccF81Da7"
        ],
        "snapshot": 31132896
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "title": "Contract Address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. UNI"
              ],
              "maxLength": 16
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ]
            }
          },
          "required": [
            "address"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# pancake-profile\n\n## Description\n\nThis strategy calculates the voting power of users who have locked their NFTs from a specific collection within the Pancake Profile contract.\n\n```json\n{\n  \"address\": \"0x0a8901b0E25DEb55A87524f0cC164E9644020EBA\",\n  \"symbol\": \"PCS\",\n  \"decimals\": 18\n}\n```\n"
  },
  "synthetix": {
    "key": "synthetix",
    "author": "andytcf",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "synthetix",
          "params": {
            "address": "0x023c66b7e13d30a3c46aa433fd2829763d5817c5",
            "symbol": "WD"
          }
        },
        "network": "1",
        "addresses": [
          "0x78b037B39704e88a82DD23CFBE1f57f6AeF8EBC5",
          "0x0bc3668d2AaFa53eD5E5134bA13ec74ea195D000",
          "0xcAc59F91E4536Bc0E79aB816a5cD54e89f10433C",
          "0x6dc88B231Cd04Dd1b1e525161162993F47140006",
          "0x935D2fD458fdf41B6F7B62471f593797866a3Ce6",
          "0x24e445fe7708Bf4bC2ae8d4df1694C98Af8BDE4F",
          "0x49be88f0fcc3a8393a59d3688480d7d253c37d2a",
          "0x27Cc4d6bc95b55a3a981BF1F1c7261CDa7bB0931"
        ],
        "snapshot": 12643795
      }
    ],
    "schema": null,
    "about": "# Quadratic Debt Percentage Strategy\n\nCalculates the quadratic weighting of voters, based on their debt percentage in the previous fee period.\n\n## Examples\n\nCan be used instead of the erc20-balance-of strategy, the space config will look like this:\n\n```JSON\n{\n  \"strategies\": [\n    [\"synthetix\"]\n  ]\n}\n```\n"
  },
  "aelin-council": {
    "key": "aelin-council",
    "author": "0xcdb",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "aelin-council",
          "params": {
            "address": "0x023c66b7e13d30a3c46aa433fd2829763d5817c5",
            "symbol": "WD",
            "blockL1": 14445666,
            "blockL2": 4765677
          }
        },
        "network": "1",
        "addresses": [
          "0x02be99141f66c065e165caf2dbf6a987c8d107a5",
          "0x93b220bc7c36ea8e4c64192301b680273a184ec3",
          "0x30f1d1ffad34b24bb8310ad9dd237b854b4daea7",
          "0x961c18a23306fe44c4323adcb3bc343b0d193670",
          "0x5298f608567297f8644fcf097e0e7fe52f8aeac3",
          "0x10e19ba32927b28eb5424f7b6a3e2eaa5a607f47"
        ],
        "snapshot": 14445666
      }
    ],
    "schema": null,
    "about": "# Quadratic Debt Percentage Strategy\n\nCalculates the weighting of voters, based on their debt percentage in the previous fee period.\n\n## Examples\n\nCan be used instead of the erc20-balance-of strategy, the space config will look like this:\n\n```JSON\n{\n  \"strategies\": [\n    [\"aelin-council\"]\n  ]\n}\n```\n"
  },
  "ctoken": {
    "key": "ctoken",
    "author": "arr00",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "ctoken",
          "params": {
            "symbol": "cUNI",
            "address": "0x35A18000230DA775CAc24873d00Ff85BccdeD550",
            "decimals": 8,
            "offsetCheck": 40320,
            "borrowingRestricted": true
          }
        },
        "network": "1",
        "addresses": [
          "0x614812d04526C0C882A6cB993a135fcD559F33F9",
          "0xff91AcCd5277cc3de3E73DD77e3102b1980e439e",
          "0x05ff2b0db69458a0750badebc4f9e13add608c7f",
          "0xd1a8Dd23e356B9fAE27dF5DeF9ea025A602EC81e",
          "0x48f7cb174a2333de834452ad240ce8d3d827dc55",
          "0x0d3cae1ff719d6a2ac0fcd7cd22f599cac64b6ec",
          "0xE0e710A907a8E44c078e6212Efa336C1191F4CD1"
        ],
        "snapshot": 13494433
      }
    ],
    "schema": null,
    "about": "# Contract call strategy\n\nAllows for calculating the voting weight of cToken holders. This strategy allows for invalidating borrowers from voting and incorporating a waiting period between minting (or receiving) cTokens and votes becoming available. \n\n## Params\n\n- `offsetCheck` - Offset (or waiting period) between minting and voting becoming available\n- `borrowingRestricted` - If true, borrowers will have a 0 voting weight\n\n## Examples\n\nCan be used instead of the erc20-balance-of strategy, the space config will look like this:\n\n```JSON\n\"strategies\": [\n    {\n      \"name\": \"ctoken\",\n      \"params\": {\n        \"address\": \"0x35A18000230DA775CAc24873d00Ff85BccdeD550\",\n        \"symbol\": \"cUNI\",\n        \"decimals\": 8,\n        \"offsetCheck\":40320,\n        \"borrowingRestricted\":true\n      }\n    }\n  ]\n```\n"
  },
  "staked-uniswap": {
    "key": "staked-uniswap",
    "author": "vfatouros",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Build-ETH LP staked in rewards contract",
        "strategy": {
          "name": "staked-uniswap",
          "params": {
            "tokenAddress": "0x6e36556b3ee5aa28def2a8ec3dae30ec2b208739",
            "uniswapAddress": "0xdf6b861b4fbcfaffb62dd1906fcd3a863955704b",
            "stakingAddress": "0xfd15657341492d1918e3a8b7421e9627d52056e9",
            "symbol": "BUILD",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x87616fA850c87a78f307878f32D808dad8f4d401"
        ],
        "snapshot": 11270000
      }
    ],
    "schema": null,
    "about": ""
  },
  "xdai-easy-staking": {
    "key": "xdai-easy-staking",
    "author": "maxaleks",
    "version": "0.1.0",
    "examples": [
      {
        "name": "STAKE token holders (from EasyStaking)",
        "strategy": {
          "name": "xdai-easy-staking",
          "params": {
            "address": "0x0Ae055097C6d159879521C384F1D2123D1f195e6",
            "symbol": "STAKE",
            "decimals": 18,
            "start": 9877420
          }
        },
        "network": "1",
        "addresses": [
          "0x24d19f100ba142543a863fc2294b188e35ab55b9",
          "0x57e54ecf82df98b3fadc1cd50d6835d5dd870916",
          "0x9bc4a93883c522d3c79c81c2999aab52e2268d03",
          "0x3cfe51b61e25750ab1426b0072e5d0cc5c30aafa",
          "0x953533d6d085c503f6ec78a66cb2f454d090faed",
          "0x2390e5658cdc602b7655307882371c867be5013c",
          "0xac01ec664c1062234a73574d44523c906a3a6369"
        ],
        "snapshot": 11477385
      }
    ],
    "schema": null,
    "about": ""
  },
  "xdai-posdao-staking": {
    "key": "xdai-posdao-staking",
    "author": "maxaleks",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Stakers on xDai (from POSDAO staking)",
        "strategy": {
          "name": "xdai-posdao-staking",
          "params": {
            "symbol": "XDAI"
          }
        },
        "network": "1",
        "addresses": [
          "0x24d19f100ba142543a863fc2294b188e35ab55b9",
          "0x29cf39de6d963d092c177a60ce67879eea9910bb",
          "0x71FBE58b64f14854cF5A3645a67a72d10A09CaE4",
          "0x7ACEe696E2165e33c578d8956cbCf575e5d631d1",
          "0x2DdB8A7541e6cAA50F74e7FACFF9Fe9da00e0A6c",
          "0x481c034c6d9441db23Ea48De68BCAe812C5d39bA",
          "0x7D32e95f9894f679833edbf91f67211289e8f713",
          "0x5d2F076261F4f6c0209452c17f6e966C153ED3a7"
        ],
        "snapshot": 12140940
      }
    ],
    "schema": null,
    "about": ""
  },
  "xdai-stake-holders": {
    "key": "xdai-stake-holders",
    "author": "maxaleks",
    "version": "0.1.0",
    "examples": [
      {
        "name": "STAKE token holders on xDai",
        "strategy": {
          "name": "xdai-stake-holders",
          "params": {
            "symbol": "XDAI"
          }
        },
        "network": "1",
        "addresses": [
          "0x24d19f100ba142543a863fc2294b188e35ab55b9",
          "0x29cf39de6d963d092c177a60ce67879eea9910bb",
          "0x71FBE58b64f14854cF5A3645a67a72d10A09CaE4",
          "0x7ACEe696E2165e33c578d8956cbCf575e5d631d1",
          "0x2DdB8A7541e6cAA50F74e7FACFF9Fe9da00e0A6c",
          "0x481c034c6d9441db23Ea48De68BCAe812C5d39bA",
          "0x7D32e95f9894f679833edbf91f67211289e8f713",
          "0x5d2F076261F4f6c0209452c17f6e966C153ED3a7"
        ],
        "snapshot": 12140940
      }
    ],
    "schema": null,
    "about": ""
  },
  "xdai-stake-delegation": {
    "key": "xdai-stake-delegation",
    "author": "maxaleks",
    "version": "0.1.0",
    "examples": [
      {
        "name": "STAKE token holders",
        "strategy": {
          "name": "xdai-stake-delegation",
          "params": {
            "address": "0x0Ae055097C6d159879521C384F1D2123D1f195e6",
            "symbol": "STAKE",
            "decimals": 18,
            "start": 9877420
          }
        },
        "network": "1",
        "addresses": [
          "0x24d19f100ba142543a863fc2294b188e35ab55b9",
          "0x57e54ecf82df98b3fadc1cd50d6835d5dd870916",
          "0x9bc4a93883c522d3c79c81c2999aab52e2268d03",
          "0x3cfe51b61e25750ab1426b0072e5d0cc5c30aafa",
          "0x953533d6d085c503f6ec78a66cb2f454d090faed",
          "0x80B3a71723FD38CD9589Ca32FA40EDC781f1A9C2"
        ],
        "snapshot": 11724607
      }
    ],
    "schema": null,
    "about": ""
  },
  "defidollar": {
    "key": "defidollar",
    "author": "atvanguard",
    "version": "1.0.0",
    "examples": [
      {
        "name": "defidollar",
        "strategy": {
          "name": "defidollar",
          "params": {
            "address": "0xde157688a36ac94b6e5f52e99c196f79ac71cea3",
            "symbol": "ibDFD"
          }
        },
        "network": "1",
        "addresses": [
          "0x562574AF66836b1d30e69815bDf0740A7BD7C437",
          "0x6d3ee34a020e7565e78540c74300218104c8e4a9",
          "0xa91194363b0a498e9d8602a866c473cb7bc9467d"
        ],
        "snapshot": 12050071
      }
    ],
    "schema": null,
    "about": ""
  },
  "aavegotchi": {
    "key": "aavegotchi",
    "author": "candoizo",
    "version": "0.1.1",
    "examples": [
      {
        "name": "GHST, USDC-GHST, QUICK-GHST, WETH-GHST, WMATIC-GHST tokens staked in diamond",
        "strategy": {
          "name": "aavegotchi",
          "params": {
            "tokenAddress": "0x385Eeac5cB85A38A9a07A70c73e0a3271CfB54A7",
            "ghstQuickAddress": "0x8b1fd78ad67c7da09b682c5392b65ca7caa101b9",
            "ghstUsdcAddress": "0x096c5ccb33cfc5732bcd1f3195c13dbefc4c82f4",
            "ghstWethAddress": "0xccb9d2100037f1253e6c1682adf7dc9944498aff",
            "ghstWmaticAddress": "0xf69e93771F11AECd8E554aA165C3Fe7fd811530c",
            "stakingAddress": "0xA02d547512Bb90002807499F05495Fe9C4C3943f",
            "symbol": "GHST",
            "decimals": 18
          }
        },
        "network": "137",
        "addresses": [
          "0x027Ffd3c119567e85998f4E6B9c3d83D5702660c"
        ],
        "snapshot": 12089223
      }
    ],
    "schema": null,
    "about": ""
  },
  "aavegotchi-agip": {
    "key": "aavegotchi-agip",
    "author": "candoizo",
    "version": "0.2.5",
    "examples": [
      {
        "name": "AGIP 8+9: Voting power for GHST value of items, their aavegotchis equippedWearables + baseRarityScore",
        "strategy": {
          "name": "aavegotchi-agip",
          "params": {
            "tokenAddress": "0x86935f11c86623dec8a25696e1c19a8659cbf95d",
            "symbol": "GOTCHI"
          }
        },
        "network": "137",
        "addresses": [
          "0x51195e21BDaE8722B29919db56d95Ef51FaecA6C",
          "0xDd564df884Fd4e217c9ee6F65B4BA6e5641eAC63",
          "0xBfe09443556773958bae1699b786d8E9680B5571"
        ],
        "snapshot": 39986904
      }
    ],
    "schema": null,
    "about": ""
  },
  "mithcash": {
    "key": "mithcash",
    "author": "jeremyHD",
    "version": "0.1.0",
    "examples": [
      {
        "name": "MITH Cash",
        "strategy": {
          "name": "mithcash",
          "params": {
            "sushiswap": "0x066F3A3B7C8Fa077c71B9184d862ed0A4D5cF3e0",
            "boardroom": "0xb35f89160d1Dc47B6EAC1986D7821505c327AE09",
            "sharePool": "0x14E33e1D6Cc4D83D7476492C0A52b3d4F869d892",
            "token": "0x4b4D2e899658FB59b1D518b68fe836B100ee8958",
            "symbol": "MIS",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x0c11d0bde11fc110caf84d9361a1466adedf59b6",
          "0xbEA07b01E8Fe3936A3D206158521A87addB65cfE",
          "0xF5ecA360c5dE26A46D54b72E49800c87801c719b"
        ],
        "snapshot": 11605878
      }
    ],
    "schema": null,
    "about": ""
  },
  "stablexswap": {
    "key": "stablexswap",
    "author": "stablexswap",
    "version": "0.0.1",
    "examples": [
      {
        "name": "stablexswap",
        "strategy": {
          "name": "stablexswap",
          "params": {
            "symbol": "SXSWAP",
            "stax": {
              "address": "0x0da6ed8b13214ff28e9ca979dd37439e8a88f6c4",
              "decimals": "18"
            },
            "masterchef": {
              "address": "0xc80991f9106e26e43bf1c07c764829a85f294c71",
              "decimals": "18"
            },
            "stakingchef": {
              "address": "0x0c0c475e32212b748c328e451ab3862ffe07369e",
              "decimals": "18",
              "weightage": "8"
            },
            "pools": [
              {
                "poolId": "0",
                "weightage": "25"
              },
              {
                "poolId": "4",
                "weightage": "4"
              }
            ]
          }
        },
        "network": "56",
        "addresses": [
          "0xd8fa0957b8e3c3b07210a9b1c14da07572be3a69",
          "0xecae266b38fa64ddb443ab1db44602ff61ff2f3b",
          "0xa3E56A7d3C97681D443dE712e3d397D8d8D8A077",
          "0x3232d9fbb5f1937c90361c6bee938e0b8f98c71d"
        ],
        "snapshot": 9242933
      }
    ],
    "schema": null,
    "about": "# Contract call strategy\n\nAllows the tokens staked in chef contracts to be used to calculate voter scores. In the JSON, weights can be specified\n\n## Usage\n\nTo use locally we need to add Object.fromEntries:\n\n\"npm i -D polyfill-object.fromentries\"\n\nThen add \"require('polyfill-object.fromentries')\" in test/index.ts and run \"npm run test --strategy=stablexswap\"\n"
  },
  "dittomoney": {
    "key": "dittomoney",
    "author": "codingsh",
    "version": "0.1.1",
    "examples": [
      {
        "name": "Ditto.money",
        "strategy": {
          "name": "dittomoney",
          "params": {
            "autofarm": "0x0895196562C7868C5Be92459FaE7f877ED450452",
            "jetfuel": "0x3d6D415be40159f207540f95E398F29a7173dC20",
            "cafeswap": "0xc772955c33088a97D56d0BBf473d05267bC4feBB",
            "pancake": "0x470BC451810B312BBb1256f96B0895D95eA659B1",
            "sharePool": "0x27Da7Bc5CcB7c31baaeEA8a04CC8Bf0085017208",
            "token": "0x233d91a0713155003fc4dce0afa871b508b3b715",
            "symbol": "DITTO",
            "decimals": 18
          }
        },
        "network": "56",
        "addresses": [
          "0x614812d04526C0C882A6cB993a135fcD559F33F9",
          "0xff91AcCd5277cc3de3E73DD77e3102b1980e439e",
          "0x05ff2b0db69458a0750badebc4f9e13add608c7f",
          "0xd1a8Dd23e356B9fAE27dF5DeF9ea025A602EC81e",
          "0x48f7cb174a2333de834452ad240ce8d3d827dc55",
          "0x0d3cae1ff719d6a2ac0fcd7cd22f599cac64b6ec",
          "0xE0e710A907a8E44c078e6212Efa336C1191F4CD1"
        ],
        "snapshot": 5248103
      }
    ],
    "schema": null,
    "about": "# Contract call strategy\n\nThis strategy checks the amount of LP tokens staked and calculates the amount of DITTO associated with the stake. voting rights are the same for those who stake 1 DITTO and for those holding 1 DITTO\n\n## Params\n\n**Pancake** :[0x470BC451810B312BBb1256f96B0895D95eA659B1](https://bscscan.com/address/0x470BC451810B312BBb1256f96B0895D95eA659B1)\n\n**sharePool**: [0x27Da7Bc5CcB7c31baaeEA8a04CC8Bf0085017208](https://bscscan.com/address/0x27Da7Bc5CcB7c31baaeEA8a04CC8Bf0085017208)\n\n**Token[Ditto]**: [0x233d91a0713155003fc4dce0afa871b508b3b715](https://bscscan.com/address/0x233d91a0713155003fc4dce0afa871b508b3b715)\n\n## Examples\n\n```json\n[\n  {\n    \"name\": \"Ditto.money\",\n    \"strategy\": {\n      \"name\": \"dittomoney\",\n      \"params\": {\n        \"pancake\": \"0x470BC451810B312BBb1256f96B0895D95eA659B1\",\n        \"sharePool\": \"0x27Da7Bc5CcB7c31baaeEA8a04CC8Bf0085017208\",\n        \"token\": \"0x233d91a0713155003fc4dce0afa871b508b3b715\",\n        \"decimals\": 18,\n        \"minBalance\": 1\n      }\n    },\n    \"network\": \"56\",\n    \"addresses\": [\n    ],\n    \"snapshot\": 11605878\n  }\n]\n```\n"
  },
  "staked-keep": {
    "key": "staked-keep",
    "author": "corollari",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Staked Keep Example Query",
        "strategy": {
          "name": "staked-keep",
          "params": {
            "symbol": "SKEEP"
          }
        },
        "network": "1",
        "addresses": [
          "0x61912E0A8CB64061B9034B324E5ADbEB8dDDc673",
          "0x8540F80Fab2AFCAe8d8FD6b1557B1Cf943A0999b",
          "0xad32A8e6220741182940c5aBF610bDE99E737b2D",
          "0xB8A3AE209d153560993BFd8178E60F09B1c682E8",
          "0x3d24D77bEC08549D7Ea86c4e9937204C11E153f1"
        ],
        "snapshot": 11668787
      }
    ],
    "schema": null,
    "about": "## Explanation\nThis strategy just gets the amount of KEEP that an address has staked in the operators that it owns.\n\n## Parameters\nThis strategy doesn't take any parameters.\n\n## Testing\nThe numbers can be cross-checked against [All The Keeps](https://allthekeeps.com/operators).\n\n## Notes\nSome of the addresses provided in `examples.json` don't have any operators associated with them and thus don't have any staked KEEP."
  },
  "staked-daomaker": {
    "key": "staked-daomaker",
    "author": "paraswap",
    "version": "0.1.0",
    "examples": [
      {
        "name": "staked-daomaker",
        "strategy": {
          "name": "staked-daomaker",
          "params": {
            "address": "0x0f51bb10119727a7e5ea3538074fb341f56b09ad",
            "symbol": "DAO",
            "decimals": 18,
            "smartcontract": "0xd07e86f68C7B9f9B215A3ca3E79E74Bf94D6A847"
          }
        },
        "network": "1",
        "addresses": [
          "0x8097A41aE28a1aE6e333A8dEfC9d59E35a5f8945",
          "0x0018fc9ca03e305f312bb91c1893ce7874e630c5",
          "0x0050a84030dda38f929f8bf893e33c0dd7cb40d8",
          "0x005624c04a39abccf2a66fde732fe5aa4dd26aab",
          "0x005e1ecfafe45d0887428b8f6c5db978ec72296a",
          "0x008a696e9855aa357f4ff7bf94674eb640bb2d2a",
          "0x00a739ba820c0f98ac54ffd8284bfa12bca9194b",
          "0x00b97fa8b11433f9b93bb7bcf438f98a2b77a3cc",
          "0x00c5f023e6eea1e81170dd7d8c5293dac792a75c",
          "0x00c7969c285559f3b21fe48622fa6e51c104c153",
          "0x0218ea910135779376cf06be2d1d5c19c641aa0c",
          "0x0216ed3aabfdaa50e263600e5a39082121ceed9f",
          "0x0236f0869c0420b05eed924d4c5b559adec930f7",
          "0x029cbfe5fa5ea8ed04f0d4e8e7051400238b0b61",
          "0x02bc449b248f5c81b5a748db0b45402cd5ffa6b2",
          "0x02c2fba4f75f9e5e60546ba83c03277ad547b179",
          "0x03194d3df4e646b490b82a8acb4c720c32b31524"
        ],
        "snapshot": 13672525
      }
    ],
    "schema": null,
    "about": "# staked-psp-balance\n\nThis is a strategy to get DAO Maker Staked in DAO .\n\nIt calls `DAO.stakeCount(address)` for the DAO Smart contract `smartcontract`\nFor each `stakeCount` it gets the dao staked using `stakeLists`\n\n```json\n{\n  \"address\": \"0x0f51bb10119727a7e5ea3538074fb341f56b09ad\",\n  \"symbol\": \"DAO\",\n  \"decimals\": 18,\n  \"smartcontract\": \"0xd07e86f68C7B9f9B215A3ca3E79E74Bf94D6A847\"\n}\n```\n"
  },
  "balancer-unipool": {
    "key": "balancer-unipool",
    "author": "tempofeng",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Balancer LP staked in Unipool rewards contract",
        "strategy": {
          "name": "balancer-unipool",
          "params": {
            "symbol": "PERP",
            "decimals": 18,
            "tokenAddress": "0xbC396689893D065F41bc2C6EcbeE5e0085233447",
            "unipoolAddress": "0xb9840A4A8a671f79DE3Df3b812fEEb38047CE552",
            "bpoolAddress": "0xf54025af2dc86809be1153c1f20d77adb7e8ecf4"
          }
        },
        "network": "1",
        "addresses": [
          "0x09212c58107c8da21b0f67a63e2144bb68bee4eb",
          "0x8506d946CC63d1F1F3a303d68B0Da64597Cd64F3",
          "0xc5df4d5ed23f645687a867d8f83a41836fcf8811"
        ],
        "snapshot": "11635000"
      }
    ],
    "schema": null,
    "about": ""
  },
  "typhoon": {
    "key": "typhoon",
    "author": "PencilDad",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Typhoon",
        "strategy": {
          "name": "typhoon",
          "params": {
            "symbol": "TYP",
            "token": "0x79256DB1BDB6259315a1a3D7Dd237F69cADFd8FC",
            "micLP": "0x73F0D7D96206eE96F4A46eF3587A1BBd4385711e",
            "micRewardPool": "0x7D66Dcd9064272051656D961a25170DD50cDe526",
            "usdtLP": "0xD1482DC5d5f6C140A69157D945267831d1CF2D6e",
            "usdtRewardPool": "0x7dF50B4FCAE42581e40e2D91edD7d4FA1B37bae1"
          }
        },
        "network": "1",
        "addresses": [
          "0x544fca5eef17d75a273955ba6fd16fe3c6e620aa",
          "0xcc5b73e4dae936f3bd830f048303c076eae3edf9",
          "0x5382859146010ac16e142b6708f8e178e77f66bc"
        ],
        "snapshot": 11718702
      }
    ],
    "schema": null,
    "about": ""
  },
  "delegation": {
    "key": "delegation",
    "author": "bonustrack",
    "version": "0.1.0",
    "dependOnOtherAddress": true,
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "delegation",
          "params": {
            "symbol": "POH (delegated)",
            "strategies": [
              {
                "name": "erc20-balance-of",
                "params": {
                  "address": "0x1dAD862095d40d43c2109370121cf087632874dB",
                  "decimals": 0
                }
              }
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x3c13f2B56AF614aC6381265EcB3B619bA26CC641",
          "0x048fee7c3279a24af0790b6b002ded42be021d2b",
          "0x139a9032a46c3afe3456eb5f0a35183b5f189cae"
        ],
        "snapshot": 15705816
      }
    ],
    "schema": null,
    "about": "# delegation\n\nIf you want to delegate your voting power to another wallet address, you can do this using the “delegation strategy”. In delegation strategy, if A delegates to B and both of them vote, then the delegated voting power is not calculated. Only the vote of A will be calculated. The vote of B will be counted if A does not vote.\n\nIn delegation strategy, the sub strategies defined in params are used to delegate vote from one address to another.\n\n| Param Name      | Description |\n| ----------- | ----------- |\n| strategies      | list of sub strategies to calculate voting power based on delegation      |\n| delegationSpace (optional)   | Get delegations of a particular space (by default it take delegations of current space)  |\n\nHere is an example of parameters:\n\n```json\n{\n  \"symbol\": \"YFI (delegated)\",\n  \"strategies\": [\n    {\n      \"name\": \"erc20-balance-of\",\n      \"params\": {\n        \"address\": \"0xBa37B002AbaFDd8E89a1995dA52740bbC013D992\",\n        \"symbol\": \"YFI\",\n        \"decimals\": 18\n      }\n    },\n    {\n      \"name\": \"yearn-vault\",\n      \"params\": {\n        \"address\": \"0xBA2E7Fed597fd0E3e70f5130BcDbbFE06bB94fe1\",\n        \"symbol\": \"YFI (yYFI)\",\n        \"decimals\": 18\n      }\n    }\n  ]\n}\n\n```"
  },
  "delegation-with-cap": {
    "key": "delegation-with-cap",
    "author": "0xButterfield",
    "version": "0.1.0",
    "dependOnOtherAddress": true,
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "delegation-with-cap",
          "params": {
            "symbol": "veBAL (delegated)",
            "strategies": [
              {
                "name": "erc20-balance-of",
                "params": {
                  "symbol": "veBAL",
                  "address": "0xC128a9954e6c874eA3d62ce62B468bA073093F25",
                  "decimals": 18
                }
              }
            ],
            "delegationSpace": "balancer.eth",
            "capPercentage": 30
          }
        },
        "network": "1",
        "addresses": [
          "0xAD9992f3631028CEF19e6D6C31e822C5bc2442CC",
          "0x512fce9B07Ce64590849115EE6B32fd40eC0f5F3",
          "0x9f74662aD05840Ba35d111930501c617920dD68e"
        ],
        "snapshot": 17834154
      }
    ],
    "schema": null,
    "about": "# delegation-with-cap\n\nThis strategy is based on the [delegation](https://github.com/snapshot-labs/snapshot-strategies/tree/master/src/strategies/delegation) strategy, with an additional `capPercentage` parameter that caps the voting power of any address to a percentage of the total votes.\n\n| Param Name                 | Description                                                                             |\n|----------------------------|-----------------------------------------------------------------------------------------|\n| strategies                 | list of sub strategies to calculate voting power based on delegation                    |\n| capPercentage              | Maximum voting power for any address as a percentage of total votes                     |\n| delegationSpace (optional) | Get delegations of a particular space (by default it take delegations of current space) |\n\nHere is an example of parameters:\n\n```json\n{\n  \"symbol\": \"veBAL (delegated)\",\n  \"strategies\": [\n    {\n      \"name\": \"erc20-balance-of\",\n      \"params\": {\n        \"symbol\": \"veBAL\",\n        \"address\": \"0xC128a9954e6c874eA3d62ce62B468bA073093F25\",\n        \"decimals\": 18\n      }\n    }\n  ],\n  \"delegationSpace\": \"balancer.eth\",\n  \"capPercentage\": 30\n}\n\n```\n"
  },
  "delegation-with-overrides": {
    "key": "delegation-with-overrides",
    "author": "0xbutterfield",
    "version": "0.1.0",
    "dependOnOtherAddress": true,
    "examples": [
      {
        "name": "Example query",
        "space": "balancer.eth",
        "strategy": {
          "name": "delegation-with-overrides",
          "params": {
            "symbol": "veBAL (delegated)",
            "strategies": [
              {
                "name": "erc20-balance-of",
                "params": {
                  "symbol": "veBAL",
                  "address": "0xC128a9954e6c874eA3d62ce62B468bA073093F25",
                  "decimals": 18
                },
                "delegationSpace": "balancer.eth"
              }
            ],
            "overrides": {
              "0xAD9992f3631028CEF19e6D6C31e822C5bc2442CC": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"
            },
            "delegationSpace": "balancer.eth"
          }
        },
        "network": "1",
        "addresses": [
          "0xAD9992f3631028CEF19e6D6C31e822C5bc2442CC",
          "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
          "0x512fce9B07Ce64590849115EE6B32fd40eC0f5F3",
          "0xE58585B22cC2aC4270a2b92c2D2d8C5dB5A3330E"
        ],
        "snapshot": 16693494
      }
    ],
    "schema": null,
    "about": "# delegation-with-overrides\n\nThis strategy is based on the [delegation strategy](https://github.com/snapshot-labs/snapshot-strategies/tree/master/src/strategies/delegation), but with an optional `overrides` parameter: an address to address mapping, where the delegated voting power of each key will be forwarded to the corresponding value.\n\nFor example:\n\n```json lines\n{\n  \"overrides\": {\n    // The delegated votes of: 0xAD9992f3631028CEF19e6D6C31e822C5bc2442CC\n    // will be forwarded to:   0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\n    \"0xAD9992f3631028CEF19e6D6C31e822C5bc2442CC\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\"\n  }\n}\n```\n\n| Param Name                 | Description                                                                              |\n|----------------------------|------------------------------------------------------------------------------------------|\n| strategies                 | list of sub strategies to calculate voting power based on delegation                     |\n| delegationSpace (optional) | Get delegations of a particular space (by default it takes delegations of current space) |\n| overrides (optional)       | Address mapping used to override delegated votes and forward to another address          |\n\nHere is an example of parameters:\n\n```json\n{\n  \"symbol\": \"veBAL (delegated)\",\n  \"strategies\": [\n    {\n      \"symbol\": \"veBAL (delegated)\",\n      \"strategies\": [\n        {\n          \"name\": \"erc20-balance-of\",\n          \"params\": {\n            \"symbol\": \"veBAL\",\n            \"address\": \"0xC128a9954e6c874eA3d62ce62B468bA073093F25\",\n            \"decimals\": 18\n          }\n        }\n      ],\n      \"delegationSpace\": \"balancer.eth\"\n    }\n  ],\n  \"delegationSpace\": \"balancer.eth\",\n  \"overrides\": {\n    \"0xAD9992f3631028CEF19e6D6C31e822C5bc2442CC\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\"\n  }\n}\n\n```\n"
  },
  "with-delegation": {
    "key": "with-delegation",
    "author": "snapshot-labs",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "with-delegation",
          "params": {
            "symbol": "POH (delegated)",
            "delegationSpace": "poh.eth",
            "strategies": [
              {
                "name": "erc20-balance-of",
                "params": {
                  "address": "0x1dAD862095d40d43c2109370121cf087632874dB",
                  "decimals": 0
                }
              }
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x3c13f2B56AF614aC6381265EcB3B619bA26CC641",
          "0x048fee7c3279a24af0790b6b002ded42be021d2b",
          "0x139a9032a46c3afe3456eb5f0a35183b5f189cae"
        ],
        "snapshot": 15705816
      }
    ],
    "schema": null,
    "about": "# with-delegation\n\nIf you want to delegate your voting power to another wallet address,\nUnlike `delegation` strategy, delegator can't take back their voting power from the delegatee. and also delegate's voting power is added up. so no need to have an additional strategy\n\n```TEXT\nTotal VP = delegated VP + own VP (if not delegated to anyone)\n```\n\nThe sub strategies defined in params are used to delegate vote from one address to another. \n\n> Important Note: Don't pass strategies that need override\n\n| Param Name      | Description |\n| ----------- | ----------- |\n| strategies      | list of sub strategies to calculate voting power based on delegation      |\n| delegationSpace (optional)   | Get delegations of a particular space (by default it take delegations of current space)  |\n| delegationNetwork (optional)   | Get delegations of a particular network (by default it take delegations of current network)  |\n\nHere is an example of parameters:\n\n```json\n{\n  \"symbol\": \"YFI (delegated)\",\n  \"strategies\": [\n    {\n      \"name\": \"erc20-balance-of\",\n      \"params\": {\n        \"address\": \"0xBa37B002AbaFDd8E89a1995dA52740bbC013D992\",\n        \"symbol\": \"YFI\",\n        \"decimals\": 18\n      }\n    },\n    {\n      \"name\": \"yearn-vault\",\n      \"params\": {\n        \"address\": \"0xBA2E7Fed597fd0E3e70f5130BcDbbFE06bB94fe1\",\n        \"symbol\": \"YFI (yYFI)\",\n        \"decimals\": 18\n      }\n    }\n  ]\n}\n\n```\n"
  },
  "ticket": {
    "key": "ticket",
    "author": "bonustrack",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "ticket",
          "params": {
            "symbol": "TICKET"
          }
        },
        "network": "1",
        "addresses": [
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad"
        ],
        "snapshot": 11437846
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. DOODLE"
              ],
              "maxLength": 16
            },
            "value": {
              "type": "number",
              "title": "Voting power",
              "examples": [
                "e.g. 1"
              ]
            }
          },
          "required": [],
          "additionalProperties": false
        }
      }
    },
    "about": "# ticket\n\nTicket strategy gives one voting power per one address, you can also pass a `value` parameter to give more voting power to the voter.\n\n## Params\n\n| param | type | description | default |\n| --- | --- | --- | --- |\n| `value` | `number` | The number of votes to give to the voter | 1 |\n| `symbol` | `string` | The symbol of the token | optional |\n"
  },
  "work": {
    "key": "work",
    "author": "bonustrack",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "work",
          "params": {
            "whitelist": "0x473e11Aa2B90Ee6E3c46D8B860D968A4Bfc7569D",
            "stake": "0x402456616f2678D823414a973e057b63542aC5a8",
            "symbol": "WORK",
            "decimals": 18
          }
        },
        "network": "42",
        "addresses": [
          "0x737CA57695354079e50eDc878056f7D9d1B556ee",
          "0x5ab0Be21C3C777a1899eE1c024560eD5CeE2365D",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad"
        ],
        "snapshot": 23232581
      },
      {
        "name": "Example query xDAI",
        "strategy": {
          "name": "work",
          "params": {
            "whitelist": "0xc61a0A7db8E34A24d3f4AA1feF6907Ecf9d4e850",
            "stake": "0x3DCb8295f2c74C4Be77D8Ea329eB6240C47709B3",
            "symbol": "WORK",
            "decimals": 18
          }
        },
        "network": "100",
        "addresses": [
          "0x737CA57695354079e50eDc878056f7D9d1B556ee",
          "0x624123ec4A9f48Be7AA8a307a74381E4ea7530D4"
        ],
        "snapshot": 14352264
      }
    ],
    "schema": null,
    "about": ""
  },
  "ticket-validity": {
    "key": "ticket-validity",
    "author": "ethedev",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Ticket Validity",
        "strategy": {
          "name": "ticket-validity",
          "params": {
            "address": "0x6b175474e89094c44da98b954eedeac495271d0f",
            "symbol": "DAI"
          }
        },
        "network": "1",
        "addresses": [
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327"
        ],
        "snapshot": 11437846
      }
    ],
    "schema": null,
    "about": "# Ticket validity strategy\n\nWeight 1 score for any address that holds greater than 0 tokens.\n\nParameters:\n\n| Parameter | Description | Default value |\n| :--- | :--- | :--- |\n| `min` | Minimum voting power | 0 |\n| `address` | Token address to check | |\n| `symbol` | Token symbol | optional |\n\n## Examples\n\n```JSON\n{\n  {\n    \"address\": \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n    \"symbol\": \"DAI\"\n  }\n}\n```\n"
  },
  "validation": {
    "key": "validation",
    "author": "snapshot-labs",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Validation strategy",
        "strategy": {
          "name": "validation",
          "params": {
            "symbol": "UNI",
            "validationStrategies": [
              {
                "name": "erc20-balance-of",
                "params": {
                  "address": "0x6b175474e89094c44da98b954eedeac495271d0f",
                  "decimals": 18
                }
              },
              {
                "name": "erc20-balance-of",
                "params": {
                  "address": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                  "decimals": 6
                }
              }
            ],
            "validationThreshold": 1,
            "votingStrategies": [
              {
                "name": "ticket",
                "params": {}
              }
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0xbcca60bb61934080951369a648fb03df4f96263c"
        ],
        "snapshot": 11437846
      }
    ],
    "schema": null,
    "about": "# validation strategy\n\nChecks validity of users to vote with validationStrategies passed and if user is not valid it will return 0 as score. If user is valid it will return the voting power of the strategies passed into votingStrategies.\n\nParameters:\n\n| Parameter               | Description                                      | Default value |\n| -------------           | ------------------------------------------       | ------------- |\n| `symbol`                | Token symbol                                     | optional      |\n| `validationStrategies`  | List of strategies to check validation (Max 3)   |               |\n| `votingStrategies`      | List of strategies to return voting power (Max 3)|               |\n| `validationThreshold`   | Minimum voting power in a strategy               | 1             |\n\nExample to return 1 voting power if user hold any USDC:\n\n```json\n{\n    \"symbol\": \"UNI\",\n    \"validationStrategies\": [{\n        \"name\": \"erc20-balance-of\",\n        \"params\": {\n            \"address\": \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n            \"decimals\": 6\n        }\n    }],\n    \"validationThreshold\": 1,\n    \"votingStrategies\": [{\n        \"name\": \"ticket\",\n        \"params\": {}\n    }]\n}\n```\n"
  },
  "opium": {
    "key": "opium",
    "author": "alirun",
    "version": "0.0.1",
    "examples": [
      {
        "name": "opium",
        "strategy": {
          "name": "opium",
          "params": {
            "symbol": "OPIUM",
            "OPIUM": "0x888888888889c00c67689029d7856aac1065ec11",
            "wOPIUM": "0x7a8d51b82b36fa5b50fb77001d6d189e920d2f75",
            "LP_1INCH_OPIUM_ETH": "0x822e00a929f5a92f3565a16f92581e54af2b90ea",
            "FARMING_LP_1INCH_OPIUM_ETH": "0x18d410f651289bb978fc32f90d2d7e608f4f4560"
          }
        },
        "network": "1",
        "addresses": [
          "0xdbc2f7f3bccccf54f1bda43c57e8ab526e379df1",
          "0x65402c084f79d698e17f32617f6c4198751dc5a0",
          "0xfdde7ad56320b9cc691ad319a8fec2c8d6b993e6",
          "0x6ef7e40b1a35fc336cdf54141e0f11ae004337c0"
        ],
        "snapshot": 11766053
      }
    ],
    "schema": null,
    "about": ""
  },
  "ocean-marketplace": {
    "key": "ocean-marketplace",
    "author": "w1kke",
    "version": "0.1.0",
    "examples": [
      {
        "name": "ERC-20 OCEAN tokens staked on the marketplace",
        "strategy": {
          "name": "ocean-marketplace",
          "params": {
            "symbol": "OCEAN",
            "expectedResults": {
              "scores": {
                "0x655eFe6Eb2021b8CEfE22794d90293aeC37bb325": 234872.06400571144,
                "0xCe7BE31f48205C48A91A84E777a66252Bba87F0b": 184463.92011443214,
                "0x788550D00579F66c06ce209D14056C8F2c0A8188": 7288.420566804952,
                "0x18F93FA526e598769fd909F1D2C82315219d49Ed": 6163.508200256553,
                "0xA321025df54C18CEeFdE118c0671735390aCB318": 4532.791480521258,
                "0x8a4C36a99b0418BF95A155160C31A267EBCA8754": 3627.4502012669805,
                "0x5e22b34F2708EA7e25918B8FCF816F9CfF27a331": 4460.415948645305,
                "0xAAB9EaBa1AA2653c1Dda9846334700b9F5e14E44": 0,
                "0x12BD31628075C20919BA838b89F414241b8c4869": 250944.65161828607,
                "0xf88bD9c3F81f7148E4076bBB8b2e2B0951A8cE38": 34084.17596472631,
                "0xB9b14C4d0cbc18FC5f54701D578e85968cf19FD5": 2706.7321282426365
              }
            }
          }
        },
        "network": "1",
        "addresses": [
          "0x655eFe6Eb2021b8CEfE22794d90293aeC37bb325",
          "0xCe7BE31f48205C48A91A84E777a66252Bba87F0b",
          "0x788550D00579F66c06ce209D14056C8F2c0A8188",
          "0x18F93FA526e598769fd909F1D2C82315219d49Ed",
          "0xA321025df54C18CEeFdE118c0671735390aCB318",
          "0x8a4C36a99b0418BF95A155160C31A267EBCA8754",
          "0x5e22b34F2708EA7e25918B8FCF816F9CfF27a331",
          "0x12BD31628075C20919BA838b89F414241b8c4869",
          "0xf88bD9c3F81f7148E4076bBB8b2e2B0951A8cE38",
          "0xAAB9EaBa1AA2653c1Dda9846334700b9F5e14E44",
          "0xB9b14C4d0cbc18FC5f54701D578e85968cf19FD5"
        ],
        "snapshot": 12097120
      }
    ],
    "schema": null,
    "about": "# Ocean marketplace Snapshot strategy\n\n```version 0.1```\n\nThis strategy gives score aka votes to the liquidity providers on the [Ocean marketplace](https://market.oceanprotocol.com). This means that they can vote for OceanDAO votes hosted on the Snapshot platform without the need to remove their liquidity.\n\n## Solution description\n\nThe solution pulls the needed data from the Ocean Protocol mainnet subgraph endpoint:\n```https://subgraph.mainnet.oceanprotocol.com/subgraphs/name/oceanprotocol/ocean-subgraph```\n\nIt is pulling a bit more information than currently used so the solution can also be extended. The current limitation comes from only considering liquidity providers and ignoring pure token holders. This means that the tokens added to the liquidity pool by the pure token holders are accredited to the liquidity providers. This can be fixed but is a bit more complicated as the ratio of datatokens to Ocean tokens has to be considered in a general manner. And the token holders for each pool have to be extracted from the subgraph.\n\nSo the current solution checks for active pools with participants and then attributes votes to them like this:\n```\nuser_votes = user_pool_shares * (total_Ocean_in_the_pool / total_number_of_pool_shares)\n```\nThis is done for all pools and the votes for the users are added up.\n\nTo extend or run this strategy please use the setup described [here](https://docs.snapshot.page/strategies).\n\n## GraphQL queries:\n\n### Pools\n\n```\npools (first: 1000, orderBy: oceanReserve, orderDirection: desc) {\n  id,\n  holderCount,\n  oceanReserve,\n  active,\n  totalShares,\n  shares (first: 1000) {\n    id,\n    userAddress {\n      id,\n      tokensOwned {\n        id\n      }\n    },\n    balance\n  },\n  tokens {\n    balance,\n    denormWeight,\n    tokenId {\n      id\n    }\n  }\n}\n```\n\n### Datatokens\n\n```\n{\ndatatokens {\n  id,\n  balances {\n    userAddress {\n      id\n    }\n    balance\n  }\n}\n}\n```"
  },
  "the-graph-balance": {
    "key": "the-graph-balance",
    "author": "glmaljkovich",
    "version": "1.0.1",
    "examples": [
      {
        "name": "Graph Tokens Mainnet with Curators",
        "strategy": {
          "name": "the-graph-balance",
          "params": {
            "symbol": "B-GRT",
            "expectedResults": {
              "tokenLockWallets": [
                {
                  "beneficiary": "0x00139f52e71c80bc71b3fbd2bdb908b56beef1e1",
                  "id": "0x9c90a2b1c019ef38e52d979915fd5aa55777d217"
                }
              ],
              "scores": {
                "0x4fc20ad3bb384764fdc7d588ee3b4dc5eabefce7": 628798.551787525,
                "0x4a905ce2d555752f0d906ffdf628b26ad64a741a": 118259.26666409046,
                "0xe29b6ad7ecb8bbc798c7144dd0e4fdee11917ca8": 13622.825426152955,
                "0x00139f52e71c80bc71b3fbd2bdb908b56beef1e1": 30487.010146180415,
                "0x9c90a2b1c019ef38e52d979915fd5aa55777d217": 93750
              },
              "combinedScores": {
                "0x4fc20ad3bb384764fdc7d588ee3b4dc5eabefce7": 628798.551787525,
                "0x4a905ce2d555752f0d906ffdf628b26ad64a741a": 118259.26666409046,
                "0xe29b6ad7ecb8bbc798c7144dd0e4fdee11917ca8": 13622.825426152955,
                "0x00139f52e71c80bc71b3fbd2bdb908b56beef1e1": 124237.01014618042
              },
              "normalizationFactor": 1,
              "explanation": [
                "The first 3 addresses are Curators with no balance and no Token-lock wallets associated to their account.",
                "Their score is expected to be the sum of all signal GRT they have in active subgraph deployments.",
                "The last address (0x00139f52e71c80bc71b3fbd2bdb908b56beef1e1) is a Curator, has balance and is a beneficiary of ",
                "a Tocken-lock wallet. Its score is expected to be a combination of its active signal GRT, its balance and the balance",
                "of its TLW (0x9c90a2b1c019ef38e52d979915fd5aa55777d217)."
              ]
            }
          }
        },
        "network": "1",
        "snapshot": 13507803,
        "addresses": [
          "0x4fc20ad3bb384764fdc7d588ee3b4dc5eabefce7",
          "0x4a905ce2d555752f0d906ffdf628b26ad64a741a",
          "0xe29b6ad7ecb8bbc798c7144dd0e4fdee11917ca8",
          "0x00139f52e71c80bc71b3fbd2bdb908b56beef1e1"
        ]
      },
      {
        "name": "Graph Tokens Rinkeby",
        "strategy": {
          "name": "the-graph-balance",
          "params": {
            "symbol": "B-GRT",
            "expectedResults": {
              "tokenLockWallets": [
                {
                  "beneficiary": "0x93606b27cb5e4c780883ec4f6b7bed5f6572d1dd",
                  "id": "0x4236878343d286a2943453e045da46e86d12138d"
                },
                {
                  "beneficiary": "0x93606b27cb5e4c780883ec4f6b7bed5f6572d1dd",
                  "id": "0x460c51e3f7609b47c0f9b3a655be804286c04666"
                },
                {
                  "beneficiary": "0x93606b27cb5e4c780883ec4f6b7bed5f6572d1dd",
                  "id": "0x4a350a7bc84f8478028bfe662bcc6aa4390aff74"
                }
              ],
              "scores": {
                "0x93606b27cb5e4c780883ec4f6b7bed5f6572d1dd": 10800000,
                "0x7f11e5b7fe8c04c1e4ce0dd98ac5c922eccfa4ed": 900000,
                "0x140b9b9756ce3de8c8fd296fc9d3e7b3aaa1cb16": 900000,
                "0x14b98b26d82421a27608b21baf6bdefc181de546": 690000,
                "0xc1240af85ffac1dbf826b7250db2644d62c728c8": 700000,
                "0x4236878343d286a2943453e045da46e86d12138d": 800000,
                "0x460c51e3f7609b47c0f9b3a655be804286c04666": 900000,
                "0x4a350a7bc84f8478028bfe662bcc6aa4390aff74": 1000000
              },
              "combinedScores": {
                "0x93606b27cb5e4c780883ec4f6b7bed5f6572d1dd": 13500000,
                "0x7f11e5b7fe8c04c1e4ce0dd98ac5c922eccfa4ed": 900000,
                "0x140b9b9756ce3de8c8fd296fc9d3e7b3aaa1cb16": 900000,
                "0x14b98b26d82421a27608b21baf6bdefc181de546": 690000,
                "0xc1240af85ffac1dbf826b7250db2644d62c728c8": 700000
              },
              "normalizationFactor": 1
            }
          }
        },
        "network": "4",
        "snapshot": 8101550,
        "addresses": [
          "0x93606b27cB5e4c780883eC4F6b7Bed5f6572d1dd",
          "0x7F11E5B7Fe8C04c1E4Ce0dD98aC5c922ECcfA4ed",
          "0x140b9b9756cE3dE8c8fD296FC9D3E7B3AAa1Cb16",
          "0x14B98b26D82421a27608B21BaF6BdEfc181DE546",
          "0xc1240aF85fFAc1Dbf826b7250db2644D62c728c8"
        ]
      }
    ],
    "schema": null,
    "about": "# The Graph Balance Strategy\n\nThis strategy uses the amount of GRT an address holds to calculate its score.\n\n## Parameters\n\n```json\n{\n    \"symbol\": \"B-GRT\"\n}\n```"
  },
  "the-graph-delegation": {
    "key": "the-graph-delegation",
    "author": "glmaljkovich",
    "version": "1.0.1",
    "examples": [
      {
        "name": "Graph Tokens",
        "strategy": {
          "name": "the-graph-delegation",
          "params": {
            "symbol": "D-GRT",
            "expectedResults": {
              "tokenLockWallets": [
                {
                  "beneficiary": "0x93606b27cb5e4c780883ec4f6b7bed5f6572d1dd",
                  "id": "0x4236878343d286a2943453e045da46e86d12138d"
                },
                {
                  "beneficiary": "0x93606b27cb5e4c780883ec4f6b7bed5f6572d1dd",
                  "id": "0x460c51e3f7609b47c0f9b3a655be804286c04666"
                },
                {
                  "beneficiary": "0x93606b27cb5e4c780883ec4f6b7bed5f6572d1dd",
                  "id": "0x4a350a7bc84f8478028bfe662bcc6aa4390aff74"
                }
              ],
              "scores": {
                "0x93606b27cb5e4c780883ec4f6b7bed5f6572d1dd": 720471750.889876,
                "0x7f11e5b7fe8c04c1e4ce0dd98ac5c922eccfa4ed": 0,
                "0x140b9b9756ce3de8c8fd296fc9d3e7b3aaa1cb16": 0,
                "0x14b98b26d82421a27608b21baf6bdefc181de546": 2233477633.8478913,
                "0xc1240af85ffac1dbf826b7250db2644d62c728c8": 2161436975.654308,
                "0x4236878343d286a2943453e045da46e86d12138d": 720478991.8847693,
                "0x460c51e3f7609b47c0f9b3a655be804286c04666": 720478991.8847693,
                "0x4a350a7bc84f8478028bfe662bcc6aa4390aff74": 0
              },
              "combinedScores": {
                "0x93606b27cb5e4c780883ec4f6b7bed5f6572d1dd": 2161429734.659415,
                "0x7f11e5b7fe8c04c1e4ce0dd98ac5c922eccfa4ed": 0,
                "0x140b9b9756ce3de8c8fd296fc9d3e7b3aaa1cb16": 0,
                "0x14b98b26d82421a27608b21baf6bdefc181de546": 2233477633.8478913,
                "0xc1240af85ffac1dbf826b7250db2644d62c728c8": 2161436975.654308
              },
              "normalizationFactor": 7240.994893314264
            }
          }
        },
        "network": "4",
        "snapshot": 8101550,
        "addresses": [
          "0x93606b27cB5e4c780883eC4F6b7Bed5f6572d1dd",
          "0x7F11E5B7Fe8C04c1E4Ce0dD98aC5c922ECcfA4ed",
          "0x140b9b9756cE3dE8c8fD296FC9D3E7B3AAa1Cb16",
          "0x14B98b26D82421a27608B21BaF6BdEfc181DE546",
          "0xc1240aF85fFAc1Dbf826b7250db2644D62c728c8"
        ]
      }
    ],
    "schema": null,
    "about": "# The Graph Delegation Strategy\n\nThis strategy uses the amount of GRT an address has delegated to calculate its score.\n\n## Parameters\n\n```json\n{\n    \"symbol\": \"D-GRT\"\n}\n```"
  },
  "the-graph-indexing": {
    "key": "the-graph-indexing",
    "author": "glmaljkovich",
    "version": "1.0.1",
    "examples": [
      {
        "name": "Graph Tokens",
        "strategy": {
          "name": "the-graph-indexing",
          "params": {
            "symbol": "I-GRT",
            "expectedResults": {
              "tokenLockWallets": [
                {
                  "beneficiary": "0x93606b27cb5e4c780883ec4f6b7bed5f6572d1dd",
                  "id": "0x4236878343d286a2943453e045da46e86d12138d"
                },
                {
                  "beneficiary": "0x93606b27cb5e4c780883ec4f6b7bed5f6572d1dd",
                  "id": "0x460c51e3f7609b47c0f9b3a655be804286c04666"
                },
                {
                  "beneficiary": "0x93606b27cb5e4c780883ec4f6b7bed5f6572d1dd",
                  "id": "0x4a350a7bc84f8478028bfe662bcc6aa4390aff74"
                }
              ],
              "scores": {
                "0x93606b27cb5e4c780883ec4f6b7bed5f6572d1dd": 28163018.03253715,
                "0x7f11e5b7fe8c04c1e4ce0dd98ac5c922eccfa4ed": 28163018.03253715,
                "0x140b9b9756ce3de8c8fd296fc9d3e7b3aaa1cb16": 28163018.03253715,
                "0x14b98b26d82421a27608b21baf6bdefc181de546": 0,
                "0xc1240af85ffac1dbf826b7250db2644d62c728c8": 0,
                "0x4236878343d286a2943453e045da46e86d12138d": 28163018.03253715,
                "0x460c51e3f7609b47c0f9b3a655be804286c04666": 0,
                "0x4a350a7bc84f8478028bfe662bcc6aa4390aff74": 0
              },
              "combinedScores": {
                "0x93606b27cb5e4c780883ec4f6b7bed5f6572d1dd": 56326036.0650743,
                "0x7f11e5b7fe8c04c1e4ce0dd98ac5c922eccfa4ed": 28163018.03253715,
                "0x140b9b9756ce3de8c8fd296fc9d3e7b3aaa1cb16": 28163018.03253715,
                "0x14b98b26d82421a27608b21baf6bdefc181de546": 0,
                "0xc1240af85ffac1dbf826b7250db2644d62c728c8": 0
              },
              "normalizationFactor": 281.6301803253715
            }
          }
        },
        "network": "4",
        "snapshot": 8101550,
        "addresses": [
          "0x93606b27cB5e4c780883eC4F6b7Bed5f6572d1dd",
          "0x7F11E5B7Fe8C04c1E4Ce0dD98aC5c922ECcfA4ed",
          "0x140b9b9756cE3dE8c8fD296FC9D3E7B3AAa1Cb16",
          "0x14B98b26D82421a27608B21BaF6BdEfc181DE546",
          "0xc1240aF85fFAc1Dbf826b7250db2644D62c728c8"
        ]
      }
    ],
    "schema": null,
    "about": "# The Graph Delegation Strategy\n\nThis strategy uses the amount of GRT an address has staked to calculate its score.\n\n## Parameters\n\n```json\n{\n    \"symbol\": \"I-GRT\"\n}\n```"
  },
  "whitelist": {
    "key": "whitelist",
    "author": "bonustrack",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "whitelist",
          "params": {
            "symbol": "POINT",
            "addresses": [
              "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
              "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7"
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad"
        ],
        "snapshot": 11437846
      }
    ],
    "schema": null,
    "about": ""
  },
  "whitelist-weighted": {
    "key": "whitelist-weighted",
    "author": "vsergeev",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Whitelist weighted address strategy",
        "strategy": {
          "name": "whitelist-weighted",
          "params": {
            "symbol": "ABC",
            "addresses": {
              "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11": 5,
              "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7": 2
            }
          }
        },
        "network": "1",
        "addresses": [
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad"
        ],
        "snapshot": 11437846
      }
    ],
    "schema": null,
    "about": "# Whitelist Weighted Strategy\n\nThis strategy returns weighted votes for addresses matching a static whitelist.\n"
  },
  "tokenlon": {
    "key": "tokenlon",
    "author": "BenjaminLu",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Tokenlon",
        "strategy": {
          "name": "tokenlon",
          "params": {
            "symbol": "LON",
            "uniswap": "0x7924a818013f39cf800f5589ff1f1f0def54f31f",
            "sushiswap": "0x55d31f68975e446a40a2d02ffa4b0e1bfb233c2f",
            "stakingRewardUniswap2": "0xc348314f74B043Ff79396e14116B6f19122D69f4",
            "stakingRewardSushiSwap2": "0x11520d501E10E2E02A2715C4A9d3F8aEb1b72A7A",
            "stakingRewardUniswap3": "0x74379CEC6a2c9Fde0537e9D9346222a724A278e4",
            "stakingRewardSushiSwap3": "0x539a67B6f9c3caD58f434CC12624b2d520BC03F8",
            "stakingRewardUniswap4": "0xb6bC1a713e4B11fa31480d31C825dCFd7e8FaBFD",
            "stakingRewardSushiSwap4": "0x9648B119f442a3a096C0d5A1F8A0215B46dbb547",
            "xLON": "0xf88506B0F1d30056B9e5580668D5875b9cd30F23",
            "token": "0x0000000000095413afC295d19EDeb1Ad7B71c952",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x39422F5065cF7968242747Bc19e812B6Ae98B50F",
          "0x3e2764be2a583bab5589223cafabd78c2f9419cf",
          "0x77a6ece6eb5a8d54d1b643f03beebad7e6c6ff06",
          "0x50a01818f24435f965b09ea8fa80826e4355bed5",
          "0xbb66E696A8CE490BBDE612CE7490A948046DB074",
          "0x1de118e70cc9416ab658b5e695d3e3de3aba0be5",
          "0x57b3c68caf0ebea2d9173bdb013655fd8da31aa4",
          "0x69013C49A5818FbB6524D55Ef0eaC292567c3092"
        ],
        "snapshot": 13409044
      }
    ],
    "schema": null,
    "about": ""
  },
  "pob-hash": {
    "key": "pob-hash",
    "author": "dave4506",
    "version": "0.1.1",
    "SUBGRAPH_URL": {
      "1": "https://api.thegraph.com/subgraphs/name/proofofbeauty/hash"
    },
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "pob-hash",
          "params": {
            "symbol": "POB"
          }
        },
        "network": "1",
        "addresses": [
          "0x0154d25120ed20a516fe43991702e7463c5a6f6e",
          "0x0B7056e2D9064f2ec8647F1ae556BAcc06da6Db4",
          "0xcc5Ddc8CCD5B1E90Bc42F998ec864Ead0090A12B",
          "0x000000000000000000000000000000000000dead",
          "0x721931508df2764fd4f70c53da646cb8aed16ace"
        ],
        "snapshot": 12208247
      }
    ],
    "schema": null,
    "about": ""
  },
  "comp-like-votes": {
    "key": "comp-like-votes",
    "author": "Arr00",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example COMP like votes query",
        "strategy": {
          "name": "comp-like-votes",
          "params": {
            "address": "0xc00e94cb662c3520282e6f5717214004a7f26888",
            "symbol": "COMP"
          }
        },
        "network": "1",
        "addresses": [
          "0x2B384212EDc04Ae8bB41738D05BA20E33277bf33",
          "0xAC5720d6EE2d7872b88914C9c5Fa9BF38e72FaF6"
        ],
        "snapshot": 12050071
      }
    ],
    "schema": null,
    "about": ""
  },
  "governor-alpha": {
    "key": "governor-alpha",
    "author": "snapshot-labs",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example governor-alpha strategy to get delegated coins",
        "strategy": {
          "name": "governor-alpha",
          "params": {
            "address": "0xde30da39c46104798bb5aa3fe8b9e0e1f348163f",
            "symbol": "GTC",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x3c7d43de93Eb6598172f20Feb8ecFE8DEc70FE41",
          "0x839395e20bbB182fa440d08F850E6c7A8f6F0780",
          "0x44aa9c5a034c1499ec27906e2d427b704b567ffe"
        ],
        "snapshot": 12582006
      }
    ],
    "schema": null,
    "about": ""
  },
  "pagination": {
    "key": "pagination",
    "author": "bonustrack",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "pagination",
          "params": {
            "symbol": "DAI",
            "strategy": {
              "name": "erc20-balance-of",
              "params": {
                "address": "0x6b175474e89094c44da98b954eedeac495271d0f",
                "decimals": 18
              }
            }
          }
        },
        "network": "1",
        "addresses": [
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x8d07D225a769b7Af3A923481E1FdF49180e6A265",
          "0x8f60501dE5b9b01F9EAf1214dbE1924aA97F7fd0",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x17ea92D6FfbAA1c7F6B117c1E9D0c88ABdc8b84C",
          "0x38C0039247A31F3939baE65e953612125cB88268"
        ],
        "snapshot": 11437846
      }
    ],
    "schema": null,
    "about": ""
  },
  "ruler-staked-lp": {
    "key": "ruler-staked-lp",
    "author": "vfatouros",
    "version": "0.1.0",
    "examples": [
      {
        "name": "RULER-ETH SLP staked in rewards contract",
        "strategy": {
          "name": "ruler-staked-lp",
          "params": {
            "tokenAddress": "0x2aECCB42482cc64E087b6D2e5Da39f5A7A7001f8",
            "sushiPoolAddress": "0xb1EECFea192907fC4bF9c4CE99aC07186075FC51",
            "stakingAddress": "0x3423c8Af3a95D9FEE7Ec06c4e0E905D4fd559F89",
            "symbol": "RULER",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0xDd79dc5B781B14FF091686961ADc5d47e434f4B0"
        ],
        "snapshot": 12065630
      }
    ],
    "schema": null,
    "about": ""
  },
  "xcover": {
    "key": "xcover",
    "author": "crypto_pumpkin",
    "version": "0.1.0",
    "examples": [
      {
        "name": "xCOVER token",
        "strategy": {
          "name": "xcover",
          "params": {
            "_comment_": "Any standard xToken with `balanceOf` and `getShareValue` can use this strategy.",
            "tokenAddress": "0xa921392015eB37c5977c4Fd77E14DD568c59D5F8",
            "symbol": "xCOVER",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x406a0c87a6bb25748252cb112a7a837e21aacd98"
        ],
        "snapshot": 12067186
      }
    ],
    "schema": null,
    "about": ""
  },
  "niu-staked": {
    "key": "niu-staked",
    "author": "bonustrack",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "niu-staked",
          "params": {
            "address": "0xd53105e8efee1461d8c103d7ba979561d2fb4abe",
            "symbol": "NIU (staked)",
            "pool": 6,
            "decimals": 18
          }
        },
        "network": "56",
        "addresses": [
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C"
        ],
        "snapshot": 8027193
      }
    ],
    "schema": null,
    "about": ""
  },
  "mushrooms": {
    "key": "mushrooms",
    "author": "@MushroomsFinan1",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "mushrooms",
          "params": {
            "symbol": "MM-USDC UNI LP",
            "_comment_": "This strategy supports LP pool in masterchef style staking. by @MushroomsFinan1",
            "masterchef": "0xf8873a6080e8dbF41ADa900498DE0951074af577",
            "pool": 2,
            "type": "lp",
            "govtoken": "0xa283aA7CfBB27EF0cfBcb2493dD9F4330E0fd304"
          }
        },
        "network": "1",
        "addresses": [
          "0x98E55d2288385bc1B0EBBE0e56eAc6AEB099C496"
        ],
        "snapshot": 12087660
      }
    ],
    "schema": null,
    "about": ""
  },
  "curio-cards-erc20-weighted": {
    "key": "curio-cards-erc20-weighted",
    "author": "fafrd",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "curio-cards-erc20-weighted",
          "params": {
            "symbol": "CARD"
          }
        },
        "network": "1",
        "addresses": [
          "0x518e5A942Ed7Db4B45e9A491ce318373346dB240",
          "0xb618aacb9dcdc21ca69d310a6fc04674d293a193"
        ],
        "snapshot": 11437846
      }
    ],
    "schema": null,
    "about": "# Curio Cards ERC20 Weighted Voting Strategy\n\nCurio cards are a pseudo-NFT that predates the erc721 and erc1155 specifications. Each card is implemented as an erc20 with a max supply between 100-2000 tokens.\n\nThis strategy weights the vote according to the holdings of each card and relative scarcity of each card.\n"
  },
  "ren-nodes": {
    "key": "ren-nodes",
    "author": "noiach",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query for ren-nodes on Mainnet",
        "strategy": {
          "name": "ren-nodes",
          "params": {
            "symbol": "REN"
          }
        },
        "network": "1",
        "addresses": [
          "0x6f911B394745979667C2d2b2d1aB4588d93353a2",
          "0x89aa6d95FA5345B81F4A2FD627117A6d3694300a",
          "0xFA79618B49db3d4f7c5184D238d13EED7276219b",
          "0xCd7e8A1018F9B9f773f2c2faDD44F54Ca0D94cE3",
          "0x7f1D49272843186A125d7661e8140d612beC1889",
          "0xa032EC8f225d572d14DCba06b20c748a3A0A0cCc",
          "0x613FC06a5802a13CdAbC6B5E98dd01C5680c8Cce",
          "0xdC27DB9B1bAeb85D7f53a98ea106f5C12c2cd286",
          "0xD91B0C425B80103DfB174b2aB4c76Aa784cB5109",
          "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"
        ],
        "snapshot": 12094900
      },
      {
        "name": "Example query for ren-nodes on Kovan",
        "strategy": {
          "name": "ren-nodes",
          "params": {}
        },
        "network": "42",
        "addresses": [
          "0x8eDF844Ae6BDBf6C1DF929D7d9E98743472142ac",
          "0x797522Fb74d42bB9fbF6b76dEa24D01A538d5D66",
          "0xD5B5b26521665Cb37623DCA0E49c553b41dbF076",
          "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"
        ],
        "snapshot": 24028500
      }
    ],
    "schema": null,
    "about": ""
  },
  "reverse-voting-escrow": {
    "key": "reverse-voting-escrow",
    "author": "nascentxyz",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Reverse Voting Escrow Strategy Example",
        "strategy": {
          "name": "reverse-voting-escrow",
          "params": {
            "symbol": "RVE",
            "club": "0xF76d80200226AC250665139B9E435617e4Ba55F9",
            "vesting": "0xD46f00d9F1f6d2e65D9572F9ce283ba925FE591a",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x05e57688C639b0742ea3E940b4E9DC0fb69B1B88",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x135C21b2DA426760718E39DA954974c4572AE9f6"
        ],
        "snapshot": 14490773
      }
    ],
    "schema": null,
    "about": "# Reverse Voting Escrow Strategy\n\nThis strategy calculates voting power using the token contract address and a vesting contract.\n\nIt is custom-built for [SeedClub](https://seedclub.xyz/).\n\n## Overview\n\nThere are 3 states votable tokens can be in:\n- In a users wallet\n- Unclaimed in the vesting contract but vested\n- Unvested in the vesting contract\n\nWhen a user connects to snapshot to vote on a Seed Club proposal their voting power should be calculated as follows.\n\n**Voting power formula**\n```md\nVoting power = tokens in wallet + unclaimed tokens in vesting contract + vesting tokens * 0.1\n```\n\n\n## Contract Details\n\n[$CLUB Contract](https://etherscan.io/address/0xf76d80200226ac250665139b9e435617e4ba55f9)\n[Vesting Contract](https://etherscan.io/address/0xD46f00d9F1f6d2e65D9572F9ce283ba925FE591a)\n[Vesting Backend](https://github.com/agoraxyz/club-backend#endpoints) (hosted at club.agora.space/api/ )\n\nVesting data is currently stored off-chain on a backend. All the data is encoded in a merkle tree and only the root is stored in the contract. When someone wants to claim, their data and proof are checked if they are a valid node of the tree.\n\n\n## Contributing & Issues\n\nContribute to this strategy on [Nascent's](https://nascent.xyz) Snapshot Strategies Github fork: [nascentxyz/snapshot-strategies](https://github.com/nascentxyz/snapshot-strategies).\n\nFor technical assistance, reach out to [@andreasbigger](https://twitter.com/andreasbigger) on twitter or email `andreas@nascent.xyz`.\n\n## Custom Testing\n\nInstall `ts-node` if it's not already installed on your machine:\n```sh\nnpm install -g typescript\nnpm install -g ts-node\n```\n\nThen, run the test script from the root project directory:\n```sh\nts-node src/strategies/reverse-voting-escrow/test.ts\n```\n\n"
  },
  "multisig-owners": {
    "key": "multisig-owners",
    "author": "davekaj",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Multisig owners",
        "strategy": {
          "name": "multisig-owners",
          "params": {
            "symbol": "MSO",
            "address": "0x48301Fe520f72994d32eAd72E2B6A8447873CF50"
          }
        },
        "network": "1",
        "addresses": [
          "0x47c6c166F462a2886cb45EFeE7FEAf29941ECEb2",
          "0x65DCD62932fEf5af25AdA91F0F24658e94e259c5",
          "0x38FA68D1C06BD272893908a74E6BcC67E28d4Da8",
          "0xE0FADeFDb233C32C67a1e428951aEfE8dF6ce639",
          "0xE1FDD398329C6b74C14cf19100316f0826a492d3"
        ],
        "snapshot": 12115328
      }
    ],
    "schema": null,
    "about": "# Multisig Strategy\n\nTo use this strategy, you would have a multisig contract which has a set of owners. Pass the\naddress of that multisig into the params for the strategy. Then, each owner of the multisig will\nhave one vote for the strategy. This is great when you have a council of multisig members, where\neach members vote is worth one."
  },
  "tranche-staking": {
    "key": "tranche-staking",
    "author": "ayush-jibrel",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "tranche-staking",
          "params": {
            "address": "0x5ce49f584257606426498bfd16d770c50bb20254",
            "tokenAddress": "0x0AeE8703D34DD9aE107386d3eFF22AE75Dd616D1",
            "symbol": "SLICE",
            "decimals": 18,
            "start": 12113995
          }
        },
        "network": "1",
        "addresses": [
          "0xd2ddb0e1c223a873c77ee80497e9d82c1002e483",
          "0xbfdc3fe26553ac0c6041c1e6e0081f95b8c824b3"
        ],
        "snapshot": 12114000
      }
    ],
    "schema": null,
    "about": ""
  },
  "pepemon": {
    "key": "pepemon",
    "author": "pepemon",
    "version": "0.1.0",
    "examples": [
      {
        "name": "PPBLZ, Uniswap and tokens+LP tokens staked on app ",
        "strategy": {
          "name": "pepemon",
          "params": {
            "tokenAddress": "0x4D2eE5DAe46C86DA2FF521F7657dad98834f97b8",
            "uniswapAddress": "0x9479b62FD1CB36F8FEd1EEBb1Bb373d238d08216",
            "stakingAddress": "0xf1F508c7C9f0d1b15a76fbA564eEf2d956220cf7",
            "symbol": "PPBLZ",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0xE71FbB197BC8fD11090FA657C100d52Dbb407662",
          "0x2fe452D036014EEAdb1901C90c5BF227546Da43e",
          "0xf653113e4b91aecca73d65e9745cab25bf7b9251",
          "0xdaa3d460bfa9a20dc3de7ce4fd967617b25a3a51"
        ],
        "snapshot": "latest"
      }
    ],
    "schema": null,
    "about": ""
  },
  "erc1155-all-balances-of": {
    "key": "erc1155-all-balances-of",
    "author": "snapshot-labs",
    "version": "0.2.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc1155-all-balances-of",
          "params": {
            "address": "0x71eb5c179ceb640160853144cbb8df5bd24ab5cc",
            "symbol": "CORGI"
          }
        },
        "network": "1",
        "addresses": [
          "0x06658Fd70023f527BFAc1A6d9141C56d99c65129"
        ],
        "snapshot": 14597922
      },
      {
        "name": "Example query",
        "strategy": {
          "name": "erc1155-all-balances-of",
          "params": {
            "address": "0x2939b94BDc377e66A377cfc15028DF3Bd6aC6C28",
            "symbol": "CORGI"
          }
        },
        "network": "137",
        "addresses": [
          "0xb165014c736c50da0638283eac2e19c88eab74f3",
          "0x28adbf7bd37c08965746669471a1dcef6dc91009",
          "0xe6fecee69a9e3726324498830bb0e898a866eccc",
          "0x715c624ff8a8ebae3a2030c0b0868a5b447c956f"
        ],
        "snapshot": 27088229
      }
    ],
    "schema": null,
    "about": "# erc1155-all-balances-of\n\nThis strategy return the balances of the voters for all tokens in a ERC1155 contract.\n\n### Limit:\nOn polygon, works only with contracts with total tokenIds less than 6000"
  },
  "erc1155-with-multiplier": {
    "key": "erc1155-with-multiplier",
    "author": "fabianschu",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc1155-with-multiplier",
          "params": {
            "address": "0x2C56b43983Ca77cc29b27B4a731F0f0d54ae7e52",
            "tokenId": 1,
            "symbol": "DAWN",
            "decimals": 0,
            "multiplier": 5
          }
        },
        "network": "4",
        "addresses": [
          "0x9cA70B93CaE5576645F5F069524A9B9c3aef5006",
          "0xb5aE5169F4D750e802884d81b4f9eC66c525396F"
        ],
        "snapshot": 9694956
      }
    ],
    "schema": null,
    "about": ""
  },
  "saffron-finance": {
    "key": "saffron-finance",
    "author": "saffron.finance",
    "version": "0.1.0",
    "examples": [
      {
        "name": "saffron-finance",
        "strategy": {
          "name": "saffron-finance",
          "params": {
            "symbol": "SFI",
            "votingSchemes": [
              {
                "name": "oneToOne",
                "type": "DirectBoostScheme",
                "multiplier": 1
              },
              {
                "name": "staking",
                "type": "DirectBoostScheme",
                "multiplier": 1.1
              },
              {
                "name": "uniswap",
                "type": "LPReservePairScheme",
                "multiplier": 1.1
              },
              {
                "name": "sushiswap",
                "type": "LPReservePairScheme",
                "multiplier": 1.1
              }
            ],
            "dexLpTypes": [
              {
                "name": "uniswap",
                "lpToken": "0xC76225124F3CaAb07f609b1D147a31de43926cd6"
              },
              {
                "name": "sushiswap",
                "lpToken": "0x23a9292830Fc80dB7f563eDb28D2fe6fB47f8624"
              }
            ],
            "contracts": [
              {
                "votingScheme": "oneToOne",
                "label": "SFI",
                "tokenAddress": "0xb753428af26e81097e7fd17f40c88aaa3e04902c"
              },
              {
                "votingScheme": "oneToOne",
                "label": "TEAM_HODL_TOKEN",
                "tokenAddress": "0x4e5ee20900898054e998fd1862742c28c651bf5d"
              },
              {
                "votingScheme": "staking",
                "label": "E2_SFISTAK_LP_PRINCIPAL",
                "tokenAddress": "0x1A9aA87F180A502930c22361e2a746137Ba74750"
              },
              {
                "votingScheme": "staking",
                "label": "E3_SFISTAK_LP_PRINCIPAL",
                "tokenAddress": "0xEd4eaeB6e20d899143b74a5b4130322418d87765"
              },
              {
                "votingScheme": "staking",
                "label": "E4_SFISTAK_LP_PRINCIPAL",
                "tokenAddress": "0x11942800A0596D3fe9641a116eeaeD387b638c1A"
              },
              {
                "votingScheme": "staking",
                "label": "E5_SFISTAK_LP_PRINCIPAL",
                "tokenAddress": "0x3b3570c445a7Eb359dedD91F8348dC746223A87D"
              },
              {
                "votingScheme": "staking",
                "label": "E6_SFISTAK_LP_PRINCIPAL",
                "tokenAddress": "0xbAD5Cc4fFA06e16e367a6D492ADd8Ca04aEAe4A2"
              },
              {
                "votingScheme": "staking",
                "label": "E7_SFISTAK_LP_PRINCIPAL",
                "tokenAddress": "0x03B41d734D3dcd23F1B3f1AFF65270Bf6eB233eA"
              },
              {
                "votingScheme": "staking",
                "label": "E8_SFISTAK_LP_PRINCIPAL",
                "tokenAddress": "0xceF561E639b53e04aB9E82653fdfacAe135A0Ad0"
              },
              {
                "votingScheme": "staking",
                "label": "E9_SFISTAK_LP_PRINCIPAL",
                "tokenAddress": "0x3C3105CDbC01350C9A303352C163216A8fb2180f"
              },
              {
                "votingScheme": "staking",
                "label": "E10_SFISTAK_LP_PRINCIPAL",
                "tokenAddress": "0x96B45C15bB1AE5DD175a4Bc721868B28b8AD2291"
              },
              {
                "votingScheme": "staking",
                "label": "E11_SFISTAK_LP_PRINCIPAL",
                "tokenAddress": "0x77B2914Fe065b5bf38553D1CF3f3717f32B7C4c8"
              },
              {
                "votingScheme": "uniswap",
                "label": "E2_SFIETH_UNI_LP_PRINCIPAL",
                "tokenAddress": "0xF489fF098BFC862F09ec583c01bCFD2D4C43c589"
              },
              {
                "votingScheme": "uniswap",
                "label": "E3_SFIETH_UNI_LP_PRINCIPAL",
                "tokenAddress": "0x68b03AbC0b41Bc2F113d103CffC39bD9aD850f8f"
              },
              {
                "votingScheme": "sushiswap",
                "label": "E3_SFIETH_SUSHI_LP_PRINCIPAL",
                "tokenAddress": "0x531B49EFd42775788f72a470a64E6b54d198f0be"
              },
              {
                "votingScheme": "uniswap",
                "label": "E4_SFIETH_UNI_LP_PRINCIPAL",
                "tokenAddress": "0x531B49EFd42775788f72a470a64E6b54d198f0be"
              },
              {
                "votingScheme": "sushiswap",
                "label": "E4_SFIETH_SUSHI_LP_PRINCIPAL",
                "tokenAddress": "0x898932Fd99355953DC46cb6Aa47F76a183ACb381"
              },
              {
                "votingScheme": "uniswap",
                "label": "E5_SFIETH_UNI_LP_PRINCIPAL",
                "tokenAddress": "0x2E44c39a205BD8F807d1f1AE97B921F0DA32f225"
              },
              {
                "votingScheme": "sushiswap",
                "label": "E5_SFIETH_SUSHI_LP_PRINCIPAL",
                "tokenAddress": "0x32c93305FF2c79D139e344B913a6202572c67cA4"
              },
              {
                "votingScheme": "uniswap",
                "label": "E6_SFIETH_UNI_LP_PRINCIPAL",
                "tokenAddress": "0x9DaB689F26688C6da25869CE414E4BDcCfD0289F"
              },
              {
                "votingScheme": "sushiswap",
                "label": "E6_SFIETH_SUSHI_LP_PRINCIPAL",
                "tokenAddress": "0x740b3e7dD42D7ff4769c2dE4Cb3C968E4e0aa6B6"
              },
              {
                "votingScheme": "uniswap",
                "label": "E7_SFIETH_UNI_LP_PRINCIPAL",
                "tokenAddress": "0x7972790bADE77686852309F60d9C60912b899C39"
              },
              {
                "votingScheme": "sushiswap",
                "label": "E7_SFIETH_SUSHI_LP_PRINCIPAL",
                "tokenAddress": "0x7DF684a871fAF58579f210CBcC001CB02b5D1b7F"
              },
              {
                "votingScheme": "uniswap",
                "label": "E8_SFIETH_UNI_LP_PRINCIPAL",
                "tokenAddress": "0x20A1ad2122B145F1629713b41af3A8C15aDBF499"
              },
              {
                "votingScheme": "sushiswap",
                "label": "E8_SFIETH_SUSHI_LP_PRINCIPAL",
                "tokenAddress": "0x20A1ad2122B145F1629713b41af3A8C15aDBF499"
              },
              {
                "votingScheme": "uniswap",
                "label": "E9_SFIETH_UNI_LP_PRINCIPAL",
                "tokenAddress": "0xe4B9FfC784A0cD9e5411B5880e2066E6D6E436c3"
              },
              {
                "votingScheme": "sushiswap",
                "label": "E9_SFIETH_SUSHI_LP_PRINCIPAL",
                "tokenAddress": "0x063E86d5A10cadA77d4a7385F93A09a1A5d2178B"
              },
              {
                "votingScheme": "uniswap",
                "label": "E10_SFIETH_UNI_LP_PRINCIPAL",
                "tokenAddress": "0xff1c79Ef1b3096314a3Bed7F0bD71f1D9A422eC6"
              },
              {
                "votingScheme": "sushiswap",
                "label": "E10_SFIETH_SUSHI_LP_PRINCIPAL",
                "tokenAddress": "0x9D128c1a98a229670A5D4FDa1DCbdB33Ee54cB7d"
              },
              {
                "votingScheme": "uniswap",
                "label": "E11_SFIETH_UNI_LP_PRINCIPAL",
                "tokenAddress": "0x386DbC8Aae0B53dE186D1a9AaC0a4AD48B4Ac624"
              },
              {
                "votingScheme": "sushiswap",
                "label": "E11_SFIETH_SUSHI_LP_PRINCIPAL",
                "tokenAddress": "0x016b05626510c1c599c3F5dA3C290e3b1c734884"
              }
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0xc8482e19c3fcd56b499d376ab1aad069442ba0cb",
          "0xa0019248a3e80225c9c552c5796ea890bbbd3ce0",
          "0x9cbadd5ce7e14742f70414a6dcbd4e7bb8712719",
          "0xc8c2b727d864cc75199f5118f0943d2087fb543b",
          "0xd51d953b017e6f2fc76446b0e6ba26e271305952",
          "0x86282134ce9fc4ac724b84b93d6d5b41ce59a40d",
          "0x5cfa9d7ed59d6ba0ea17626ac15f949d005a2239",
          "0x1c012b03f1c2dea274d2eeeb566b0eeabfe3af1a",
          "0x49531b794aecf2c823c1426a4c9990c4c45df501",
          "0x988abfbb8743cc440e7ff7da6d2f4c60e301501f",
          "0x69e0e2b3d523d3b247d798a49c3fa022a46dd6bd",
          "0x47edf911b3c4915c947dc2b66bec977b8db65ab0",
          "0x0a53e28f2f7b27971e18a6305c2c74a449badd2e"
        ],
        "snapshot": 12206854
      }
    ],
    "schema": null,
    "about": ""
  },
  "saffron-finance-v2": {
    "key": "saffron-finance-v2",
    "author": "turpintinz",
    "version": "2.0.1",
    "examples": [
      {
        "name": "Example Saffron V2",
        "strategy": {
          "name": "saffron-finance-v2",
          "params": {
            "symbol": "SAFF_STAK_V2",
            "decimals": 18,
            "multiplier": 1.1,
            "stakingPool": "0x4eB4C5911e931667fE1647428F38401aB1661763",
            "singleAssets": [
              "0xb753428af26E81097e7fD17f40c88aaA3E04902c",
              "0xf34960d9d60be18cc1d5afc1a6f012a723a28811"
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x5AE6eb5fE2195885fDBf62285936A3e89F92e17a",
          "0xD90B866039E8820c2Cd082840fceeD81Cef691F8",
          "0x905D6a479C4be28aF08364CE1c8e02eBC9c4bdA8",
          "0x64eacbcdbc6123bcc8b90a5fde8dd099aadb0e56",
          "0x9cbadd5ce7e14742f70414a6dcbd4e7bb8712719",
          "0xA43Cfc82083cd5EdaC9ABf13059bDb2447A10a80",
          "0x854cd0603e0c72c4758798ebeb110e882973239f",
          "0xcef2d0c7d89c3dcc7a8e8af561b0294bcd6e9ebd",
          "0x91dca37856240e5e1906222ec79278b16420dc92",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x3478697c64578D3D8092925EE365168CcabfeB66",
          "0x905D6a479C4be28aF08364CE1c8e02eBC9c4bdA8",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x8d07D225a769b7Af3A923481E1FdF49180e6A265",
          "0x8f60501dE5b9b01F9EAf1214dbE1924aA97F7fd0",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x17ea92D6FfbAA1c7F6B117c1E9D0c88ABdc8b84C"
        ],
        "snapshot": 14394748
      }
    ],
    "schema": null,
    "about": "# Saffron Finance V2 Strategy\n\nThis strategy scans all the pools defined in the SaffronStakingV2 counting up staked SFI. Voting scores are increased\nby 10% as a default. The `multiplier` option can be set to numbers such as `1.1` (10% increase) and `1.2` (20% increase).\n\nThis strategy does not include counting an account's balances of either [SFI](https://etherscan.io/token/0xb753428af26e81097e7fd17f40c88aaa3e04902c)\nor the [SFI Hodl Contract](https://etherscan.io/address/0x4e5ee20900898054e998fd1862742c28c651bf5d). Those are counted by the\n`saffron-finance` strategy.\n\n## Testing Saffron Finance strategies\n\nTo run Snapshot tests:\n\n```bash\nyarn test --strategy=saffron-finance-v2 --more=500\n```\n\n## Strategy Parameters\n\nExample strategy params:\n\n```json\n{\n  \"symbol\": \"SAFF_STAK_V2\",\n  \"decimals\": 18,\n  \"multiplier\": 1.1,\n  \"stakingPool\": \"0x4eB4C5911e931667fE1647428F38401aB1661763\",\n  \"singleAssets\": [ \"0xb753428af26E81097e7fD17f40c88aaA3E04902c\", \"0xf34960d9d60be18cc1d5afc1a6f012a723a28811\"]\n}\n```\n\n| Parameter      | Description                                                                                |\n|----------------|--------------------------------------------------------------------------------------------|\n| symbol         | Label for the strategy configuration                                                       |\n| decimals       | Number of decimals used by the asset used to calculate voting. Default: 18.                |\n| multiplier     | Voting score is multiplied by this value to provide additional voting power. Default: 1.1. |\n| stakingPool    | The address of the SaffronStakingV2 contract.                                              |\n|                |     Default: \"0x4eB4C5911e931667fE1647428F38401aB1661763\" (_SaffronStakingV2 Contract_).   |\n| singleAssets   | Array of contract addresses of single asset stakings.                                      |\n|                |     Default: [ \"0xb753428af26E81097e7fD17f40c88aaA3E04902c\" ]. (_SFI address_).            |\n\n\nTo count SFI and Hodl Contract balances, use the strategy, `saffron-finance`:\n\n```json\n{\n      \"symbol\": \"SFI\",\n      \"votingSchemes\": [\n        {\n          \"name\": \"oneToOne\",\n          \"type\": \"DirectBoostScheme\",\n          \"multiplier\": 1.0\n        },\n        {\n          \"name\": \"staking\",\n          \"type\": \"DirectBoostScheme\",\n          \"multiplier\": 1.1\n        },\n        {\n          \"name\": \"uniswap\",\n          \"type\": \"LPReservePairScheme\",\n          \"multiplier\": 1.1\n        },\n        {\n          \"name\": \"sushiswap\",\n          \"type\": \"LPReservePairScheme\",\n          \"multiplier\": 1.1\n        }\n      ],\n      \"dexLpTypes\": [\n        {\n          \"name\": \"uniswap\",\n          \"lpToken\": \"0xC76225124F3CaAb07f609b1D147a31de43926cd6\"\n        },\n        {\n          \"name\": \"sushiswap\",\n          \"lpToken\": \"0x23a9292830Fc80dB7f563eDb28D2fe6fB47f8624\"\n        }\n      ],\n      \"contracts\": [\n        {\n          \"votingScheme\": \"oneToOne\",\n          \"label\": \"SFI\",\n          \"tokenAddress\": \"0xb753428af26e81097e7fd17f40c88aaa3e04902c\"\n        },\n        {\n          \"votingScheme\": \"oneToOne\",\n          \"label\": \"TEAM_HODL_TOKEN\",\n          \"tokenAddress\": \"0x4e5ee20900898054e998fd1862742c28c651bf5d\"\n        }\n      ]\n}\n\n```\n"
  },
  "tranche-staking-lp": {
    "key": "tranche-staking-lp",
    "author": "ayush-jibrel",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "tranche-staking-lp",
          "params": {
            "address": "0x05db908E095662745595Ee42C9C90aaDC5D51c98",
            "tokenAddress": "0x0aee8703d34dd9ae107386d3eff22ae75dd616d1",
            "lpTokenAddress": "0xa21ECe44Cc5dAc03E3805362bd3f68F22a49Ea1e",
            "symbol": "SLICE",
            "decimals": 18,
            "start": 12240380
          }
        },
        "network": "1",
        "addresses": [
          "0x625c94ab09883bf455141c54be3a145bdc68a277",
          "0x6FD3D5DC46e49BE296c934b97533123C86229999",
          "0x6c5c952e85643cc3e229d37a6f2aacd248931d55",
          "0x8e3a50fd3564b7027cc2a0d79d606d489ebc58bd"
        ],
        "snapshot": 12240385
      }
    ],
    "schema": null,
    "about": ""
  },
  "masterchef-pool-balance": {
    "key": "masterchef-pool-balance",
    "author": "my-swarm",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "masterchef-pool-balance",
          "params": {
            "symbol": "CHEF",
            "chefAddress": "0xD38abbAeC03a9FF287eFc9a5F0d0580E07335D1D",
            "uniPairAddress": null,
            "tokenIndex": null,
            "pid": "0",
            "weight": 1,
            "weightDecimals": 0
          }
        },
        "network": "1",
        "addresses": [
          "0xfCA5a27d4cfF104FC276897CA3f32cFeDc6f50BA",
          "0x577bfa0898187c10bbbbb3d001c94aafb5cfc0e4",
          "0x068e48e984b83387afe772614916780a753929d9"
        ],
        "snapshot": 12288851
      },
      {
        "name": "Pool 1 balance",
        "strategy": {
          "name": "masterchef-pool-balance",
          "params": {
            "symbol": "CHEF LP",
            "chefAddress": "0xD38abbAeC03a9FF287eFc9a5F0d0580E07335D1D",
            "uniPairAddress": "0xe0b1433e0174b47e8879ee387f1069a0dbf94137",
            "tokenIndex": 0,
            "pid": "1",
            "weight": 5,
            "weightDecimals": 1
          }
        },
        "network": "1",
        "addresses": [
          "0xfCA5a27d4cfF104FC276897CA3f32cFeDc6f50BA",
          "0x577bfa0898187c10bbbbb3d001c94aafb5cfc0e4",
          "0x068e48e984b83387afe772614916780a753929d9"
        ],
        "snapshot": 12288851
      }
    ],
    "schema": null,
    "about": ""
  },
  "masterchef-pool-balance-price": {
    "key": "masterchef-pool-balance-price",
    "author": "joaomajesus",
    "version": "0.2.0",
    "examples": [
      {
        "name": "Example query - Count of tokens in single token Pool",
        "strategy": {
          "name": "masterchef-pool-balance-price",
          "params": {
            "symbol": "CHEF",
            "chefAddress": "0x8bE82Ab9B6179bE6EB88431E3E4E0fd93b9E607C",
            "tokenAddress": "0x72572ccf5208b59f4bcc14e6653d8c31cd1fc5a0",
            "pid": "3",
            "weight": 1,
            "weightDecimals": 0,
            "decimals": 0
          }
        },
        "network": "137",
        "addresses": [
          "0x4f9c817035Ac15A3c4C17FD3b60fabE9a4A8EEEF"
        ],
        "snapshot": 17368223
      },
      {
        "name": "Example query - Price of tokens in single token Pool",
        "strategy": {
          "name": "masterchef-pool-balance-price",
          "params": {
            "chefAddress": "0x8bE82Ab9B6179bE6EB88431E3E4E0fd93b9E607C",
            "tokenAddress": "0x72572ccf5208b59f4bcc14e6653d8c31cd1fc5a0",
            "pid": "3",
            "weight": 1,
            "weightDecimals": 0,
            "decimals": 0,
            "usePrice": true
          }
        },
        "network": "137",
        "addresses": [
          "0x4f9c817035Ac15A3c4C17FD3b60fabE9a4A8EEEF"
        ],
        "snapshot": 17368223
      },
      {
        "name": "Example query - Sum of uniPair token0 and token1 count",
        "strategy": {
          "name": "masterchef-pool-balance-price",
          "params": {
            "chefAddress": "0x8bE82Ab9B6179bE6EB88431E3E4E0fd93b9E607C",
            "uniPairAddress": "0x668269d6E5D2c2dE31D132Ac218044211643622B",
            "token0": {
              "address": "0x2791bca1f2de4661ed88a30c99a7a9449aa84174",
              "weight": 1,
              "weightDecimals": 0
            },
            "token1": {
              "address": "0x72572ccf5208b59f4bcc14e6653d8c31cd1fc5a0",
              "weight": 1,
              "weightDecimals": 0
            },
            "pid": "0",
            "weight": 1,
            "weightDecimals": 0
          }
        },
        "network": "137",
        "addresses": [
          "0x4f9c817035Ac15A3c4C17FD3b60fabE9a4A8EEEF"
        ],
        "snapshot": 16828978
      },
      {
        "name": "Example query - Sum of uniPair token0 and token1 count",
        "strategy": {
          "name": "masterchef-pool-balance-price",
          "params": {
            "chefAddress": "0x8bE82Ab9B6179bE6EB88431E3E4E0fd93b9E607C",
            "uniPairAddress": "0x668269d6E5D2c2dE31D132Ac218044211643622B",
            "token0": {
              "address": "0x2791bca1f2de4661ed88a30c99a7a9449aa84174",
              "weight": 1,
              "weightDecimals": 0
            },
            "token1": {
              "address": "0x72572ccf5208b59f4bcc14e6653d8c31cd1fc5a0",
              "weight": 1,
              "weightDecimals": 0
            },
            "pid": "0",
            "weight": 1,
            "weightDecimals": 0
          }
        },
        "network": "137",
        "addresses": [
          "0x4f9c817035Ac15A3c4C17FD3b60fabE9a4A8EEEF"
        ],
        "snapshot": 16828978
      },
      {
        "name": "Example query - uniPair token count",
        "strategy": {
          "name": "masterchef-pool-balance-price",
          "params": {
            "chefAddress": "0x8bE82Ab9B6179bE6EB88431E3E4E0fd93b9E607C",
            "uniPairAddress": "0x668269d6E5D2c2dE31D132Ac218044211643622B",
            "pid": "0",
            "weight": 1,
            "weightDecimals": 0
          }
        },
        "network": "137",
        "addresses": [
          "0x4f9c817035Ac15A3c4C17FD3b60fabE9a4A8EEEF"
        ],
        "snapshot": 16828978
      },
      {
        "name": "Example query - uniPair token price",
        "strategy": {
          "name": "masterchef-pool-balance-price",
          "params": {
            "chefAddress": "0x8bE82Ab9B6179bE6EB88431E3E4E0fd93b9E607C",
            "uniPairAddress": "0x668269d6E5D2c2dE31D132Ac218044211643622B",
            "token0": {
              "address": "0x2791bca1f2de4661ed88a30c99a7a9449aa84174",
              "weight": 1,
              "weightDecimals": 0
            },
            "token1": {
              "address": "0x72572ccf5208b59f4bcc14e6653d8c31cd1fc5a0",
              "weight": 1,
              "weightDecimals": 0
            },
            "pid": "0",
            "weight": 1,
            "weightDecimals": 0,
            "usePrice": true
          }
        },
        "network": "137",
        "addresses": [
          "0x4f9c817035Ac15A3c4C17FD3b60fabE9a4A8EEEF"
        ],
        "snapshot": 16828978
      },
      {
        "name": "Example query - uniPair token0 count",
        "strategy": {
          "name": "masterchef-pool-balance-price",
          "params": {
            "chefAddress": "0x8bE82Ab9B6179bE6EB88431E3E4E0fd93b9E607C",
            "uniPairAddress": "0x668269d6E5D2c2dE31D132Ac218044211643622B",
            "token0": {
              "address": "0x2791bca1f2de4661ed88a30c99a7a9449aa84174",
              "weight": 1,
              "weightDecimals": 0
            },
            "pid": "0",
            "weight": 1,
            "weightDecimals": 0
          }
        },
        "network": "137",
        "addresses": [
          "0x4f9c817035Ac15A3c4C17FD3b60fabE9a4A8EEEF"
        ],
        "snapshot": 16828978
      },
      {
        "name": "Example query - uniPair token0 price",
        "strategy": {
          "name": "masterchef-pool-balance-price",
          "params": {
            "chefAddress": "0x8bE82Ab9B6179bE6EB88431E3E4E0fd93b9E607C",
            "uniPairAddress": "0x668269d6E5D2c2dE31D132Ac218044211643622B",
            "token0": {
              "address": "0x2791bca1f2de4661ed88a30c99a7a9449aa84174",
              "weight": 1,
              "weightDecimals": 0
            },
            "pid": "0",
            "weight": 1,
            "weightDecimals": 0,
            "usePrice": true
          }
        },
        "network": "137",
        "addresses": [
          "0x4f9c817035Ac15A3c4C17FD3b60fabE9a4A8EEEF"
        ],
        "snapshot": 16828978
      },
      {
        "name": "Example query - uniPair token1 count",
        "strategy": {
          "name": "masterchef-pool-balance-price",
          "params": {
            "chefAddress": "0x8bE82Ab9B6179bE6EB88431E3E4E0fd93b9E607C",
            "uniPairAddress": "0x668269d6E5D2c2dE31D132Ac218044211643622B",
            "token1": {
              "address": "0x72572ccf5208b59f4bcc14e6653d8c31cd1fc5a0",
              "weight": 1,
              "weightDecimals": 0
            },
            "pid": "0",
            "weight": 1,
            "weightDecimals": 0
          }
        },
        "network": "137",
        "addresses": [
          "0x4f9c817035Ac15A3c4C17FD3b60fabE9a4A8EEEF"
        ],
        "snapshot": 16828978
      },
      {
        "name": "Example query - uniPair token1 price",
        "strategy": {
          "name": "masterchef-pool-balance-price",
          "params": {
            "chefAddress": "0x8bE82Ab9B6179bE6EB88431E3E4E0fd93b9E607C",
            "uniPairAddress": "0x668269d6E5D2c2dE31D132Ac218044211643622B",
            "token1": {
              "address": "0x72572ccf5208b59f4bcc14e6653d8c31cd1fc5a0",
              "weight": 1,
              "weightDecimals": 0
            },
            "pid": "0",
            "weight": 1,
            "weightDecimals": 0,
            "usePrice": true
          }
        },
        "network": "137",
        "addresses": [
          "0x4f9c817035Ac15A3c4C17FD3b60fabE9a4A8EEEF"
        ],
        "snapshot": 16828978
      },
      {
        "name": "Example query - uniPair token price with anti-whale measure",
        "strategy": {
          "name": "masterchef-pool-balance-price",
          "params": {
            "chefAddress": "0x8bE82Ab9B6179bE6EB88431E3E4E0fd93b9E607C",
            "uniPairAddress": "0xd4689694e9928564647ad483c075f271419b2a5f",
            "token0": {
              "address": "0x16eccfdbb4ee1a85a33f3a9b21175cd7ae753db4",
              "weight": 1,
              "weightDecimals": 0
            },
            "token1": {
              "address": "0x72572ccf5208b59f4bcc14e6653d8c31cd1fc5a0",
              "weight": 1,
              "weightDecimals": 0
            },
            "pid": "12",
            "weight": 1,
            "weightDecimals": 0,
            "usePrice": true,
            "currency": "eur",
            "antiWhale": {
              "enable": true,
              "inflectionPoint": 1000,
              "threshold": 250,
              "exponent": 0.5
            }
          }
        },
        "network": "137",
        "addresses": [
          "0x4f9c817035Ac15A3c4C17FD3b60fabE9a4A8EEEF"
        ],
        "snapshot": 16828978
      }
    ],
    "schema": null,
    "about": "# Generic masterchef pool balance or price strategy\n\n## Description\n\nThis strategy gets the balance or price of any combination of tokens for a pool using a masterchef contract.\n\nIt allows to get the balance or price of any of the pool pair tokens separately or the combination of both.\n\nOptionally, an anti-whale measure can be applied to reduce the impact of big wallets in the resulting value.\n\nThe price is sourced from CoinGecko.\n\n## Accepted options\n\n- **chefAddress:** masterchef contract address\n  \n- **pid:** masterchef pool id (starting with zero)\n\n- **uniPairAddress:** Address of a uniswap pair (or a sushi pair or any other with the same interface)\n  - If the uniPairAddress option is provided, converts staked LP token balance to base token balance (based on the pair total supply and base token reserve)\n\n  - If uniPairAddress is null or undefined, returns staked token balance of the pool\n\n- **tokenAddress**: Address of a token for single token Pools.\n  - If the uniPairAddress is provided the tokenAddress is ignored.\n\n- **weight:** Integer multiplier of the result (for combining strategies with different weights, totally optional)\n\n- **weightDecimals:** Integer value of number of decimal places to apply to the final result\n\n- **token0.address:** Address of the uniPair token 0. If defined, the strategy will return the result for the token0.\n  - can be used in conjunction with token1Address to get the sum of tokens or the UniPair token price when used with usePrice and token1Address.\n\n  - Can be used with usePrice to get the price value of the staked amount of token0\n\n- **token0.weight:** Integer multiplier of the result for token0\n\n- **token0.weightDecimals:** Integer value of number of decimal places to apply to the result of token0\n\n- **token1.address:** Address of the uniPair token 1. If defined, the strategy will return the result for the token1.\n  - can be used in conjunction with token0Address to get the sum of tokens or the UniPair token price\n\n  - when used with usePrice and token0Address.\n\n  - can be used with usePrice to get the price value of the staked amount of token1.\n\n- **token1.weight:** Integer multiplier of the result for token1.\n\n- **token1.weightDecimal:** Integer value of number of decimal places to apply to the result of token1\n\n- **usePrice:** Boolean flag return the result in usd instead of token count\n\n- **currency:** currency for the price. (defaulted to `usd`).\n\n- **log:** Boolean flag to enable or disable logging to the console (used for debugging purposes during development)\n\n- **antiWhale.enable:** Boolean flag to apply an anti-whale measure reducing the effect on the voting power as the token amount increases.\n  - if enabled will apply the the following to the result:\n  \n      ```none\n      If result > antiWhale.threshold\n        result = antiWhale.inflectionPoint * ( result / antiWhale.inflectionPoint ) ^ antiWhale.exponent\n  \n      If result <= antiWhale.threshold {\n        thresholdMultiplier = ( antiWhale.inflectionPoint * ( antiWhale.threshold / antiWhale.inflectionPoint )^antiWhale.exponent ) / antiWhale.threshold\n\n        result = result * thresholdMultiplier\n      }\n      ```\n\n    - **thresholdMultiplier:** The multiplier at which all results below threshold are multiplied. This is ratio of antiWhale/result at the threshold point.\n\n- **antiWhale.threshold:** Point at which antiWhale effect no longer applies. Results less than this will be treated with a static multiplier. This is to reduce infinite incentive for multiple wallet exploits.\n  - default: 1625.\n\n  - lower cap: > 0 - set to default if <= 0.\n\n- **antiWhale.inflectionPoint:** Point at which output matches result. Results less than this increase output. Results greater than this decrease output.\n  - default: 6500.\n\n  - lower cap: > 0 - set to default if <= 0.\n\n  - must be >= antiWhale.threshold. Otherwise will be same as antiWhale.threshold.\n\n- **antiWhale.exponent:** The exponent is responsible for the antiWhale effect. Must be less than one, or else it will have a pro-whale effect. Must be greater than zero, or else it will cause total voting power to trend to zero.\n  - default: 0.5.\n\n  - upper cap: 1.\n\n  - lower cap: > 0 - set to default if <= 0.\n  \n## Examples\n\n```json\n[\n  {\n    \"name\": \"Example query - Count of tokens in single token Pool\",\n    \"strategy\": {\n      \"name\": \"masterchef-pool-balance-price\",\n      \"params\": {\n        \"chefAddress\": \"0x8bE82Ab9B6179bE6EB88431E3E4E0fd93b9E607C\",\n        \"tokenAddress\": \"0x72572ccf5208b59f4bcc14e6653d8c31cd1fc5a0\",\n        \"pid\": \"3\",\n        \"weight\": 1,\n        \"weightDecimals\": 0,\n        \"decimals\": 0\n      }\n    },\n    \"network\": \"137\",\n    \"addresses\": [\n      \"0x4f9c817035Ac15A3c4C17FD3b60fabE9a4A8EEEF\"\n    ],\n    \"snapshot\": 17368223\n  },\n  {\n    \"name\": \"Example query - Price of tokens in single token Pool\",\n    \"strategy\": {\n      \"name\": \"masterchef-pool-balance-price\",\n      \"params\": {\n        \"chefAddress\": \"0x8bE82Ab9B6179bE6EB88431E3E4E0fd93b9E607C\",\n        \"tokenAddress\": \"0x72572ccf5208b59f4bcc14e6653d8c31cd1fc5a0\",\n        \"pid\": \"3\",\n        \"weight\": 1,\n        \"weightDecimals\": 0,\n        \"decimals\": 0, \n        \"usePrice\": true\n      }\n    },\n    \"network\": \"137\",\n    \"addresses\": [\n      \"0x4f9c817035Ac15A3c4C17FD3b60fabE9a4A8EEEF\"\n    ],\n    \"snapshot\": 17368223\n  },\n  {\n    \"name\": \"Example query - Sum of uniPair token0 and token1 count\",\n    \"strategy\": {\n      \"name\": \"masterchef-pool-balance-price\",\n      \"params\": {\n        \"chefAddress\": \"0x8bE82Ab9B6179bE6EB88431E3E4E0fd93b9E607C\",\n        \"uniPairAddress\": \"0x668269d6E5D2c2dE31D132Ac218044211643622B\",\n        \"token0\": {\n          \"address\": \"0x2791bca1f2de4661ed88a30c99a7a9449aa84174\",\n          \"weight\": 1,\n          \"weightDecimals\": 0\n        },\n        \"token1\": {\n          \"address\": \"0x72572ccf5208b59f4bcc14e6653d8c31cd1fc5a0\",\n          \"weight\": 1,\n          \"weightDecimals\": 0\n        },\n        \"pid\": \"0\",\n        \"weight\": 1,\n        \"weightDecimals\": 0\n      }\n    },\n    \"network\": \"137\",\n    \"addresses\": [\n      \"0x4f9c817035Ac15A3c4C17FD3b60fabE9a4A8EEEF\"\n    ],\n    \"snapshot\": 16828978\n  },\n  {\n    \"name\": \"Example query - Sum of uniPair token0 and token1 count\",\n    \"strategy\": {\n      \"name\": \"masterchef-pool-balance-price\",\n      \"params\": {\n        \"chefAddress\": \"0x8bE82Ab9B6179bE6EB88431E3E4E0fd93b9E607C\",\n        \"uniPairAddress\": \"0x668269d6E5D2c2dE31D132Ac218044211643622B\",\n        \"token0\": {\n          \"address\": \"0x2791bca1f2de4661ed88a30c99a7a9449aa84174\",\n          \"weight\": 1,\n          \"weightDecimals\": 0\n        },\n        \"token1\": {\n          \"address\": \"0x72572ccf5208b59f4bcc14e6653d8c31cd1fc5a0\",\n          \"weight\": 1,\n          \"weightDecimals\": 0\n        },\n        \"pid\": \"0\",\n        \"weight\": 1,\n        \"weightDecimals\": 0\n      }\n    },\n    \"network\": \"137\",\n    \"addresses\": [\n      \"0x4f9c817035Ac15A3c4C17FD3b60fabE9a4A8EEEF\"\n    ],\n    \"snapshot\": 16828978\n  },\n  {\n    \"name\": \"Example query - uniPair token count\",\n    \"strategy\": {\n      \"name\": \"masterchef-pool-balance-price\",\n      \"params\": {\n        \"chefAddress\": \"0x8bE82Ab9B6179bE6EB88431E3E4E0fd93b9E607C\",\n        \"uniPairAddress\": \"0x668269d6E5D2c2dE31D132Ac218044211643622B\",\n        \"pid\": \"0\",\n        \"weight\": 1,\n        \"weightDecimals\": 0\n      }\n    },\n    \"network\": \"137\",\n    \"addresses\": [\n      \"0x4f9c817035Ac15A3c4C17FD3b60fabE9a4A8EEEF\"\n    ],\n    \"snapshot\": 16828978\n  },\n  {\n    \"name\": \"Example query - uniPair token price\",\n    \"strategy\": {\n      \"name\": \"masterchef-pool-balance-price\",\n      \"params\": {\n        \"chefAddress\": \"0x8bE82Ab9B6179bE6EB88431E3E4E0fd93b9E607C\",\n        \"uniPairAddress\": \"0x668269d6E5D2c2dE31D132Ac218044211643622B\",\n        \"token0\": {\n          \"address\": \"0x2791bca1f2de4661ed88a30c99a7a9449aa84174\",\n          \"weight\": 1,\n          \"weightDecimals\": 0\n        },\n        \"token1\": {\n          \"address\": \"0x72572ccf5208b59f4bcc14e6653d8c31cd1fc5a0\",\n          \"weight\": 1,\n          \"weightDecimals\": 0\n        },\n        \"pid\": \"0\",\n        \"weight\": 1,\n        \"weightDecimals\": 0,\n        \"usePrice\": true\n      }\n    },\n    \"network\": \"137\",\n    \"addresses\": [\n      \"0x4f9c817035Ac15A3c4C17FD3b60fabE9a4A8EEEF\"\n    ],\n    \"snapshot\": 16828978\n  },\n  {\n    \"name\": \"Example query - uniPair token0 count\",\n    \"strategy\": {\n      \"name\": \"masterchef-pool-balance-price\",\n      \"params\": {\n        \"chefAddress\": \"0x8bE82Ab9B6179bE6EB88431E3E4E0fd93b9E607C\",\n        \"uniPairAddress\": \"0x668269d6E5D2c2dE31D132Ac218044211643622B\",\n        \"token0\": {\n          \"address\": \"0x2791bca1f2de4661ed88a30c99a7a9449aa84174\",\n          \"weight\": 1,\n          \"weightDecimals\": 0\n        },\n        \"pid\": \"0\",\n        \"weight\": 1,\n        \"weightDecimals\": 0\n      }\n    },\n    \"network\": \"137\",\n    \"addresses\": [\n      \"0x4f9c817035Ac15A3c4C17FD3b60fabE9a4A8EEEF\"\n    ],\n    \"snapshot\": 16828978\n  },\n  {\n    \"name\": \"Example query - uniPair token0 price\",\n    \"strategy\": {\n      \"name\": \"masterchef-pool-balance-price\",\n      \"params\": {\n        \"chefAddress\": \"0x8bE82Ab9B6179bE6EB88431E3E4E0fd93b9E607C\",\n        \"uniPairAddress\": \"0x668269d6E5D2c2dE31D132Ac218044211643622B\",\n        \"token0\": {\n          \"address\": \"0x2791bca1f2de4661ed88a30c99a7a9449aa84174\",\n          \"weight\": 1,\n          \"weightDecimals\": 0\n        },\n        \"pid\": \"0\",\n        \"weight\": 1,\n        \"weightDecimals\": 0,\n        \"usePrice\": true\n      }\n    },\n    \"network\": \"137\",\n    \"addresses\": [\n      \"0x4f9c817035Ac15A3c4C17FD3b60fabE9a4A8EEEF\"\n    ],\n    \"snapshot\": 16828978\n  },\n  {\n    \"name\": \"Example query - uniPair token1 count\",\n    \"strategy\": {\n      \"name\": \"masterchef-pool-balance-price\",\n      \"params\": {\n        \"chefAddress\": \"0x8bE82Ab9B6179bE6EB88431E3E4E0fd93b9E607C\",\n        \"uniPairAddress\": \"0x668269d6E5D2c2dE31D132Ac218044211643622B\",\n        \"token1\": {\n          \"address\": \"0x72572ccf5208b59f4bcc14e6653d8c31cd1fc5a0\",\n          \"weight\": 1,\n          \"weightDecimals\": 0\n        },\n        \"pid\": \"0\",\n        \"weight\": 1,\n        \"weightDecimals\": 0\n      }\n    },\n    \"network\": \"137\",\n    \"addresses\": [\n      \"0x4f9c817035Ac15A3c4C17FD3b60fabE9a4A8EEEF\"\n    ],\n    \"snapshot\": 16828978\n  },\n  {\n    \"name\": \"Example query - uniPair token1 price\",\n    \"strategy\": {\n      \"name\": \"masterchef-pool-balance-price\",\n      \"params\": {\n        \"chefAddress\": \"0x8bE82Ab9B6179bE6EB88431E3E4E0fd93b9E607C\",\n        \"uniPairAddress\": \"0x668269d6E5D2c2dE31D132Ac218044211643622B\",\n        \"token1\": {\n          \"address\": \"0x72572ccf5208b59f4bcc14e6653d8c31cd1fc5a0\",\n          \"weight\": 1,\n          \"weightDecimals\": 0\n        },\n        \"pid\": \"0\",\n        \"weight\": 1,\n        \"weightDecimals\": 0,\n        \"usePrice\": true\n      }\n    },\n    \"network\": \"137\",\n    \"addresses\": [\n      \"0x4f9c817035Ac15A3c4C17FD3b60fabE9a4A8EEEF\"\n    ],\n    \"snapshot\": 16828978\n  },\n  {\n    \"name\": \"Example query - uniPair token price with anti-whale measure\",\n    \"strategy\": {\n      \"name\": \"masterchef-pool-balance-price\",\n      \"params\": {\n        \"chefAddress\": \"0x8bE82Ab9B6179bE6EB88431E3E4E0fd93b9E607C\",\n        \"uniPairAddress\": \"0xd4689694e9928564647ad483c075f271419b2a5f\",\n        \"token0\": {\n          \"address\": \"0x16eccfdbb4ee1a85a33f3a9b21175cd7ae753db4\",\n          \"weight\": 1,\n          \"weightDecimals\": 0\n        },\n        \"token1\": {\n          \"address\": \"0x72572ccf5208b59f4bcc14e6653d8c31cd1fc5a0\",\n          \"weight\": 1,\n          \"weightDecimals\": 0\n        },\n        \"pid\": \"12\",\n        \"weight\": 1,\n        \"weightDecimals\": 0,\n        \"usePrice\": true,\n        \"currency\": \"eur\",\n        \"antiWhale\": {\n          \"enable\": true,\n          \"inflectionPoint\": 1000,\n          \"threshold\": 250,\n          \"exponent\": 0.5\n        }\n      }\n    },\n    \"network\": \"137\",\n    \"addresses\": [\n      \"0x4f9c817035Ac15A3c4C17FD3b60fabE9a4A8EEEF\"\n    ],\n    \"snapshot\": 16828978\n  }\n]\n```\n"
  },
  "api": {
    "key": "api",
    "author": "ganzai-san",
    "version": "0.1.2",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "api",
          "params": {
            "api": "https://gateway.pinata.cloud/ipfs",
            "strategy": "QmbmhTivxYuLE5uhNEALoBmvP7Yg9acA2Lkw9V9PqaEmw6"
          }
        },
        "network": "1",
        "addresses": [
          "0xeD2bcC3104Da5F5f8fA988D6e9fAFd74Ae62f319",
          "0x3c4B8C52Ed4c29eE402D9c91FfAe1Db2BAdd228D",
          "0xd649bACfF66f1C85618c5376ee4F38e43eE53b63",
          "0x726022a9fe1322fA9590FB244b8164936bB00489",
          "0xc6665eb39d2106fb1DBE54bf19190F82FD535c19",
          "0x6ef2376fa6e12dabb3a3ed0fb44e4ff29847af68"
        ],
        "snapshot": 11437846
      }
    ],
    "schema": null,
    "about": "# API strategy\n\nVoting strategy using a REST API endpoint. Number of votes depends on the return of the API endpoint.\n\n## Constructing the API URL\nThis strategy will create an `api_url` based on the supplied parameters and the Proposal&Space settings. \n\n`api_url` is constructed as such:\n\n### For IPFS endpoints\nIPFS endpoint is defined as a url starting with any of the following:\n  - https://gateway.pinata.cloud/ipfs/\n  - https://ipfs.io/ipfs/\n  - https://cloudflare-ipfs.com/ipfs/\n\n1. `param.api`: The first part of the URL (e.g. https://gateway.pinata.cloud/ipfs/)\n\n2. `param.strategy`: The IPFS hash\n\n3. `param.additionalParameters` (optional): Any additional parameters you want to include\n\nThe final URL is expected to look something like: `https://gateway.pinata.cloud/ipfs/QmbmhTivxYuLE5uhNEALoBmvP7Yg9acA2Lkw9V9PqaEmw6`\n\n## For static endpoints\nIf your endpoint is not IPFS, but API is returning static data:\nYou can use an API URL that ends with `.json` for example: `https://www.myapi.com/vote_count.json`\nOr You can use the `staticFile` param so not all addresses are passed to the API. This is useful for APIs that have a limit on the number of addresses that can be passed in a single request.\n\n1. `param.api`: The first part of the URL (e.g. https://www.myapi.com/)\n\n2. `param.strategy`: The resource name (e.g. get_vote_count)\n\n3. `param.staticFile`: Set to `true`\n\n### For non-IPFS endpoints:\n\n1. `param.api`: The first part of the URL (e.g. https://www.myapi.com/)\n\n2. `param.strategy`: The resource name (e.g. get_vote_count)\n\n3. `network`: Set by the Snapshot space settings (e.g. Ethereum = 1)\n\n4. `snapshot`: Set by blockheight of the proposal (e.g. 11437846)\n\n5. `addresses`: A comma separated list of addresses to be queried\n\nThe final URL is expected to look something like: `https://www.myapi.com/get_vote_count?network=1&snapshot=11437846&addresses=0xeD2bcC3104Da5F5f8fA988D6e9fAFd74Ae62f319,0x3c4B8C52Ed4c29eE402D9c91FfAe1Db2BAdd228D`\n\n### List of params:\n| Param | Description | Required | Default |\n| --- | --- | --- | --- |\n| `api` | The first part of the URL (e.g. https://www.myapi.com/) | Yes | |\n| `strategy` (optional) | The resource name (e.g. get_vote_count) | Yes | '' |\n| `staticFile` (optional) | Set to `true` if you want to use the `static` endpoint | No | `false` |\n| `additionalParameters` (optional) | Any additional parameters you want to include | No | |\n| `decimals` (optional) | The number of decimals to use when processing the scores from the API response | No | `0` |\n\n## Expected return of API\nThe API should return an object with the following structure:\n```\n{\n  \"score\": [\n    {\n      \"address\": \"0xeD2bcC3104Da5F5f8fA988D6e9fAFd74Ae62f319\",\n      \"score\": \"184000000000000000000\"\n    },\n    {\n      \"address\": \"0x3c4B8C52Ed4c29eE402D9c91FfAe1Db2BAdd228D\",\n      \"score\": \"7469258545106344000000000\"\n    },\n    {\n      \"address\": \"0xd649bACfF66f1C85618c5376ee4F38e43eE53b63\",\n      \"score\": \"2509787861801245\"\n    },\n    {\n      \"address\": \"0x726022a9fe1322fA9590FB244b8164936bB00489\",\n      \"score\": \"2179896139461561200000\"\n    },\n    {\n      \"address\": \"0xc6665eb39d2106fb1DBE54bf19190F82FD535c19\",\n      \"score\": \"0\"\n    },\n    {\n      \"address\": \"0x6ef2376fa6e12dabb3a3ed0fb44e4ff29847af68\",\n      \"score\": \"100420\"\n    }\n  ]\n}\n```\n\nNote that for the example above, `element.score` is a string representation in wei. Your response can return any value as long as:\n  1. The return can be stringified `.toString()`\n  2. The stringified version of your response can be passed into the second argument of `formatUnits`: https://docs.ethers.org/v3/api-utils.html?highlight=formatunits#ether-strings-and-wei\n\n## Testing\nYou can test this strategy by updating the `examples.json` file and running `npm run test --strategy=api`\n\nTo test local changes, change to this directory and run: `npm run build & npm run test --strategy=api`\n"
  },
  "api-post": {
    "key": "api-post",
    "author": "miertschink",
    "version": "0.1.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "api-post",
          "params": {
            "api": "https://dao-staging.polychainmonsters.com/v1/votingPowerTestMock",
            "symbol": "Points",
            "decimals": 0
          }
        },
        "network": "1",
        "addresses": [
          "0xEA2E9cEcDFF8bbfF107a349aDB9Ad0bd7b08a7B7",
          "0x3c4B8C52Ed4c29eE402D9c91FfAe1Db2BAdd228D",
          "0xd649bACfF66f1C85618c5376ee4F38e43eE53b63",
          "0x726022a9fe1322fA9590FB244b8164936bB00489",
          "0xc6665eb39d2106fb1DBE54bf19190F82FD535c19",
          "0x6ef2376fa6e12dabb3a3ed0fb44e4ff29847af68"
        ],
        "snapshot": 11437846
      }
    ],
    "schema": null,
    "about": "# API POST strategy\n\n## Description\n\nThis strategy can be used if you want to call a custom HTTP-Endpoint to request the voting power/score for the\nparticipating addresses.\n\nYou can configure the endpoint via the options object when selecting the strategy in your settings.\n\nThe options object is passed to the API as well.<br/>\nYou may add an API-Key here for example\n\n##Attention\nMake sure your API is secured!<br/>\nThe request may contain values that can harm your system.<br/>\nIt's most unlikely to happen but it's good to keep this in mind!\n\n### Example Request that is sent to your custom endpoint\n```json\nPOST your-project.tld/path/to/your/endpoint\n{\n  \"options\": { your strategy options object},\n  \"network\": \"1\",\n  \"addresses\": [\n    \"0xEA2E9cEcDFF8bbfF107a349aDB9Ad0bd7b08a7B7\",\n    \"0x3c4B8C52Ed4c29eE402D9c91FfAe1Db2BAdd228D\",\n    \"0xd649bACfF66f1C85618c5376ee4F38e43eE53b63\",\n    \"0x726022a9fe1322fA9590FB244b8164936bB00489\",\n    \"0xc6665eb39d2106fb1DBE54bf19190F82FD535c19\",\n    \"0x6ef2376fa6e12dabb3a3ed0fb44e4ff29847af68\"\n  ],\n  \"snapshot\": 11437846\n}\n```\n\n### Example Response\nThe response that is sent by your endpoint should look like this\n```json\n{\n  \"score\": [\n    {\n      \"score\": 123,\n      \"address\": \"0xEA2E9cEcDFF8bbfF107a349aDB9Ad0bd7b08a7B7\"\n    },\n    {\n      \"score\": 456,\n      \"address\": \"0x3c4B8C52Ed4c29eE402D9c91FfAe1Db2BAdd228D\"\n    },\n    {\n      and so on\n    }\n  ]\n}\n```\n"
  },
  "api-v2": {
    "key": "api-v2",
    "author": "snapshot-labs",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "api-v2",
          "params": {
            "url": "ipfs://QmbmhTivxYuLE5uhNEALoBmvP7Yg9acA2Lkw9V9PqaEmw6",
            "type": "ipfs"
          }
        },
        "network": "1",
        "addresses": [
          "0xeD2bcC3104Da5F5f8fA988D6e9fAFd74Ae62f319",
          "0x3c4B8C52Ed4c29eE402D9c91FfAe1Db2BAdd228D",
          "0xd649bACfF66f1C85618c5376ee4F38e43eE53b63",
          "0x726022a9fe1322fA9590FB244b8164936bB00489",
          "0xc6665eb39d2106fb1DBE54bf19190F82FD535c19",
          "0x6ef2376fa6e12dabb3a3ed0fb44e4ff29847af68",
          "0x89446aF03652c5257dB5C8E4E85495EB754196c5"
        ],
        "snapshot": 11437846
      }
    ],
    "schema": null,
    "about": "# API V2 strategy\n\nVoting strategy using a REST API endpoint. Number of votes depends on the return of the API endpoint.\n(Unlike the `api` strategy, this strategy does not depend on voting power of other addresses)\n\n> Note: Better to use this strategy only if you are not using any override strategies (example: delegation strategy).\n\n## Parameters\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `url` | `string` | URL of the API endpoint | `undefined` |\n| `type` | `string` | Type of the API endpoint ( `api-get` or `api-post` or `ipfs` or `json` ) | `api-get` |\n| `additionalParams` | `string` | Additional parameters for the API endpoint (optional) | `` |\n\nIf you are passing a IPFS url use following format:\n\n```JSON\n{\n  \"url\": \"ipfs://...\",\n  \"type\": \"ipfs\"\n}\n```\n\nIf you are passing a JSON url use following format:\n\n```JSON\n{\n  \"url\": \"https://...\",\n  \"type\": \"json\"\n}\n```\n\nIf you are passing a API url use following format: (all voter addresses will be passed in the query string)\n\n```JSON\n{\n  \"url\": \"https://...\",\n  \"type\": \"api-get\"\n}\n```\n\nIf you are passing a API url with POST method use following format:\n\n```JSON\n{\n  \"url\": \"https://...\",\n  \"type\": \"api-post\"\n}\n```\n"
  },
  "api-v2-override": {
    "key": "api-v2-override",
    "author": "snapshot-labs",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "api-v2-override",
          "params": {
            "url": "ipfs://QmbmhTivxYuLE5uhNEALoBmvP7Yg9acA2Lkw9V9PqaEmw6",
            "type": "ipfs"
          }
        },
        "network": "1",
        "addresses": [
          "0xeD2bcC3104Da5F5f8fA988D6e9fAFd74Ae62f319",
          "0x3c4B8C52Ed4c29eE402D9c91FfAe1Db2BAdd228D",
          "0xd649bACfF66f1C85618c5376ee4F38e43eE53b63",
          "0x726022a9fe1322fA9590FB244b8164936bB00489",
          "0xc6665eb39d2106fb1DBE54bf19190F82FD535c19",
          "0x6ef2376fa6e12dabb3a3ed0fb44e4ff29847af68",
          "0x89446aF03652c5257dB5C8E4E85495EB754196c5"
        ],
        "snapshot": 11437846
      }
    ],
    "schema": null,
    "about": "# API V2 Override strategy\n\nSame as the `api-v2` strategy, but passes all voter addresses in the query string / body payload of the API endpoint.\nPrefer `api-post` method for better scalability.\n\n## Params\n\nAll params are same as the `api-v2` strategy.\nRefer to the `api-v2` strategy's documentation for more details.\n"
  },
  "xseen": {
    "key": "xseen",
    "author": "JayWelsh",
    "version": "0.1.0",
    "examples": [
      {
        "name": "xSEEN token",
        "strategy": {
          "name": "xseen",
          "params": {
            "_comment_": "The seen.haus governance token, where xSEEN represents a value of SEEN tokens including rewards.",
            "tokenAddress": "0x38747baf050d3c22315a761585868dba16abfd89",
            "symbol": "xSEEN",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x8a83716acd66d9e1fb18c9b79540b72e04f80ac0"
        ],
        "snapshot": 12328235
      }
    ],
    "schema": null,
    "about": ""
  },
  "moloch-all": {
    "key": "moloch-all",
    "author": "scottrepreneur",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Moloch All",
        "strategy": {
          "name": "moloch-all",
          "params": {
            "symbol": "MCV",
            "address": "0x4570b4faf71e23942b8b9f934b47ccedf7540162",
            "decimals": 0
          }
        },
        "network": "1",
        "addresses": [
          "0xc9283bbd79b016230838e57ce19e6aca12dd2c0d",
          "0x6159aaaf32d1ac8b4b96b1a9d7197aed612a59cb",
          "0x442eC679337Ab3Ad148A8c3D61db54AB75816D1f",
          "0x85ac9e682995ebebde8ff107fbbbfe7c40992e4a",
          "0x3d1df1a816577a62db61281f673c4f43ae063490",
          "0xd6e371526cdaee04cd8af225d42e37bc14688d9e",
          "0x839395e20bbb182fa440d08f850e6c7a8f6f0780"
        ],
        "snapshot": 14883665
      }
    ],
    "schema": null,
    "about": ""
  },
  "moloch-loot": {
    "key": "moloch-loot",
    "author": "scottrepreneur",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Moloch Loot",
        "strategy": {
          "name": "moloch-loot",
          "params": {
            "symbol": "LOOT",
            "address": "0xb152b115c94275b54a3f0b08c1aa1d21f32a659a",
            "decimals": 0
          }
        },
        "network": "100",
        "addresses": [
          "0xc9283bbd79b016230838e57ce19e6aca12dd2c0d",
          "0x85ac9e682995ebebde8ff107fbbbfe7c40992e4a",
          "0x3d1df1a816577a62db61281f673c4f43ae063490",
          "0xd6e371526cdaee04cd8af225d42e37bc14688d9e",
          "0x839395e20bbb182fa440d08f850e6c7a8f6f0780"
        ],
        "snapshot": 15848545
      }
    ],
    "schema": null,
    "about": ""
  },
  "hopr-uni-lp-farm": {
    "key": "hopr-uni-lp-farm",
    "author": "hoprnet",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Get nominal HOPR tokens from HOPR LP token, incl. those staked in the HoprFarm",
        "strategy": {
          "name": "hopr-uni-lp-farm",
          "params": {
            "symbol": "HOPR",
            "farmAddress": "0x2fc0e2cfe5d6ea300d555e5907319a5f7e09884f",
            "uniPoolAddress": "0x92c2fc5f306405eab0ff0958f6d85d7f8892cf4d",
            "hoprAddress": "0xf5581dfefd8fb0e4aec526be659cfab1f8c781da",
            "daiAddress": "0x6b175474e89094c44da98b954eedeac495271d0f",
            "farmDeployBlock": 12094980,
            "xHoprAddress": "0xd057604a14982fe8d88c5fc25aac3267ea142a08",
            "wxHoprAddress": "0xd4fdec44db9d44b8f2b6d529620f9c0c7066a2c1"
          }
        },
        "network": "1",
        "addresses": [
          "0x04BBB7eA18EA570aE47d4489991645E4E49bBf37",
          "0x2aF80738aC01e7883d11c912dFe8322C129ae5C5",
          "0x0bb43EFc1a613658177D8f67CcF9CFFD8B25b906",
          "0x53e85186ebF5A7d4BD06324F7b9D8B3623EF0307",
          "0x2DCDB99930E279f1e9Ad11F491163051432542A0",
          "0x4326990033eCd87A5444383Cf8c715E696301910",
          "0xEd6a59A7C1D5a88b7cb5eb877A7A6078A7e801C7",
          "0xeFC05B0D0C8bE8D4Cb3a220ef582E9f7E6FBCd00",
          "0xC7B169b108c5e75991C520AEA97140534291C81D",
          "0x04Be52434EB64aDdF373137310551ac42013677c",
          "0xBE8C93a8C18AF63aAB449994AFAc13E71240ccC4",
          "0xf813773eBDD4759c1B780d745081f046A5B776fB",
          "0x7F26C34Ed10bF66602009231bBFF24f2f84e9270",
          "0x4abd7276C53279b3aBFFF2B5D8A47c0AFc84833B",
          "0x3e1A12a6019ee26418F22B656926fE38F5e58C5f",
          "0x7A27A4D91231aCB3282b410Cc784517B417FA0DA"
        ],
        "snapshot": 12509840
      }
    ],
    "schema": null,
    "about": ""
  },
  "apescape": {
    "key": "apescape",
    "author": "apescape",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "apescape",
          "params": {
            "symbol": "ROKT"
          }
        },
        "network": "56",
        "addresses": [
          "0x9Fa02A6DedD0383cF339aeCB9353bfaE1E319Aa6"
        ],
        "snapshot": 7218577
      }
    ],
    "schema": null,
    "about": ""
  },
  "liftkitchen": {
    "key": "liftkitchen",
    "author": "Gruffin",
    "version": "0.1.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "liftkitchen",
          "params": {
            "ctrl": "0xA31fDbaA772745D11843EFEDA9922dcbf5460672",
            "boardroom": "0x3223689b39Db8a897a9A9F0907C8a75d42268787",
            "symbol": "CTRL",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x3223689b39Db8a897a9A9F0907C8a75d42268787"
        ],
        "snapshot": 12377525
      }
    ],
    "schema": null,
    "about": ""
  },
  "decentraland-estate-size": {
    "key": "decentraland-estate-size",
    "author": "2fd",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "decentraland-estate-size",
          "params": {
            "symbol": "ESTATE",
            "multiplier": 2000
          }
        },
        "network": "1",
        "addresses": [
          "0x4eac6325e1dbf1ac90434d39766e164dca71139e",
          "0xa65be351527ebcf8c1707d1e444dac38b41a5faf",
          "0xa89473630bc2d2724279d1002ebdcfb000ad708c"
        ],
        "snapshot": 12453375
      }
    ],
    "schema": null,
    "about": "# Decentraland Wearable Rarity\n\nThis strategy allows users to calculate the total amount of Decentraland lands in estates and apply a multiplier to the result.\n\n## Example\n\nThe parameters should look like this:\n\n```json\n{\n    \"symbol\": \"ESTATE\",\n    \"multiplier\": 2000\n}\n```\n"
  },
  "decentraland-wearable-rarity": {
    "key": "decentraland-wearable-rarity",
    "author": "2fd",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "decentraland-wearable-rarity",
          "params": {
            "symbol": "WEARABLE",
            "collections": [
              "0x32b7495895264ac9d0b12d32afd435453458b1c6",
              "0xd35147be6401dcb20811f2104c33de8e97ed6818",
              "0xc04528c14c8ffd84c7c1fb6719b4a89853035cdd",
              "0xc1f4b0eea2bd6690930e6c66efd3e197d620b9c2",
              "0xf64dc33a192e056bb5f0e5049356a0498b502d50",
              "0xc3af02c0fd486c8e9da5788b915d6fff3f049866"
            ],
            "multipliers": {
              "unique": 1000000,
              "mythic": 100000,
              "legendary": 10000,
              "epic": 1000,
              "rare": 100,
              "uncommon": 10,
              "common": 1
            }
          }
        },
        "network": "1",
        "addresses": [
          "0xd210dc1dd26751503cbf1b8c9154224707820da8",
          "0x8cff6832174091dae86f0244e3fd92d4ced2fe07",
          "0xFC9C4C0e17c3A3139a77d86282eCf18687C14780"
        ],
        "snapshot": 12453375
      }
    ],
    "schema": null,
    "about": "# Decentraland Wearable Rarity\n\nThis strategy allows users to calculate the total amount of Decentraland wearables and apply a multiplier to each rarity. Additionally you can limit the collections that will be taken into account using a list of ids.\n\n## Example\n\nThe parameters should look like this:\n\n```json\n{\n    \"symbol\": \"WEARABLE\",\n    \"multipliers\": {\n        \"unique\": 1000000,\n        \"mythic\": 100000,\n        \"legendary\": 10000,\n        \"epic\": 1000,\n        \"rare\": 100,\n        \"uncommon\": 10,\n        \"common\": 1\n    }\n}\n```\n\nIf you want to restrict which collection is taken into account, parameters should look like this:\n\n```json\n{\n    \"symbol\": \"WEARABLE\",\n    \"collections\": [\n        \"0x32b7495895264ac9d0b12d32afd435453458b1c6\",\n        \"0xd35147be6401dcb20811f2104c33de8e97ed6818\",\n        \"0xc04528c14c8ffd84c7c1fb6719b4a89853035cdd\",\n        \"0xc1f4b0eea2bd6690930e6c66efd3e197d620b9c2\",\n        \"0xf64dc33a192e056bb5f0e5049356a0498b502d50\",\n        \"0xc3af02c0fd486c8e9da5788b915d6fff3f049866\"\n    ],\n    \"multipliers\": {\n        \"unique\": 1000000,\n        \"mythic\": 100000,\n        \"legendary\": 10000,\n        \"epic\": 1000,\n        \"rare\": 100,\n        \"uncommon\": 10,\n        \"common\": 1\n    }\n}\n```\n"
  },
  "decentraland-rental-lessors": {
    "key": "decentraland-rental-lessors",
    "author": "fzavalia",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Get VP of LAND and Estate owner's that have their assets locked in the Rentals contract",
        "strategy": {
          "name": "decentraland-rental-lessors",
          "params": {
            "subgraphs": {
              "rentals": "https://api.thegraph.com/subgraphs/name/decentraland/rentals-ethereum-goerli",
              "marketplace": "https://api.thegraph.com/subgraphs/name/decentraland/marketplace-goerli"
            },
            "addresses": {
              "estate": "0xc9a46712e6913c24d15b46ff12221a79c4e251dc",
              "land": "0x25b6b4bac4adb582a0abd475439da6730777fbf7"
            },
            "multipliers": {
              "estateSize": 2000,
              "land": 2000
            }
          }
        },
        "network": "5",
        "addresses": [
          "0x747c6f502272129bf1ba872a1903045b837ee86c",
          "0xbad79d832671d91b4bba85f600932faec0e5fd7c",
          "0x24e5f44999c151f08609f8e27b2238c773c4d020",
          "0x2f89ec84e0413950d9adf8e56dd56c2b2f5066cb"
        ],
        "snapshot": 7866054
      }
    ],
    "schema": null,
    "about": "# Decentraland Rental Lessors\n\nThis strategy allows calculating the VP of Land/Estate owners after ownership is transferred to the Rentals contract.\n\nThanks to this, the VP that the user had before utilizing the rentals feature will not be lost.\n\n## Example\n\nThe following example params are for obtaining the VP users have after sending their Lands/Estates to the Rentals contract in the Goerli network.\n\n```json\n{\n  \"subgraphs\": {\n    \"rentals\": \"https://api.thegraph.com/subgraphs/name/decentraland/rentals-ethereum-goerli\",\n    \"marketplace\": \"https://api.thegraph.com/subgraphs/name/decentraland/marketplace-goerli\"\n  },\n  \"addresses\": {\n    \"estate\": \"0xc9a46712e6913c24d15b46ff12221a79c4e251dc\",\n    \"land\": \"0x25b6b4bac4adb582a0abd475439da6730777fbf7\"\n  },\n  \"multipliers\": {\n    \"estateSize\": 2000,\n    \"land\": 2000\n  }\n}\n```\n\nThe land multiplier determines how much VP is given by each Land the address possesses in the Rentals contract. For example, if the user has 5 Lands in the Rentals contract, it will be given 5 \\* 2000 VP.\n\nThe estateSize multiplier determines how much VP is given to the original owner according to the size of their Estates currently on the Rentals contract. For example, if the address has 1 Estate in the Rentals contract composed of 5 Lands, the user will be given 5 \\* 2000 VP as well.\n"
  },
  "brightid": {
    "key": "brightid",
    "author": "bonustrack",
    "version": "0.1.1",
    "examples": [
      {
        "name": "Example query (Official Registry)",
        "strategy": {
          "name": "brightid",
          "params": {
            "registry": "v5",
            "symbol": "ID"
          }
        },
        "network": "1",
        "addresses": [
          "0x7A38760C295f1ea086005214a279fb1280010483",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x38C0039247A31F3939baE65e953612125cB88268"
        ],
        "snapshot": 14266000
      }
    ],
    "schema": null,
    "about": "# BrightID\n\nThis strategy returns a score of 1 for voters verified in a BrightID user registry. You can learn more about the smart contract used on this strategy from the following sources:\n\n- Public Registry(v5): https://github.com/BrightID/BrightID-SmartContract/blob/v5/snapshot/BrightIDSnapshot.sol\n- Private Registry: https://github.com/clrfund/monorepo/tree/develop/contracts/contracts/userRegistry\n\nPublic registries are maintained by BrightID and can be used if a DAO has no interest on setting one up themselves.\n\nHere is an example of parameters for using a public registry contract:\nNote that when using a public registry, the network is always set to IDChain(74).\n\n```json\n{\n  \"registry\": \"v5\",\n  \"symbol\": \"verified\"\n}\n```\n\nHere's a list of all public registry contracts currently deployed on IDChain:\n\n- v5(https://explorer.idchain.one/address/0x81591DC4997A76A870c13D383F8491B288E09344/contracts)\n\nTo provide users with a better experience, a custom built frontend site is recommended for interacting with public / private registry contracts.\n\ne.g. Frontend for public v5 registry built by SongADAO (https://github.com/SongADAO/songaday-brightid-registration)\n\nIn the example below, an alternative private registry contract is used:\nNote that when using a private registry, the network is set to the space's network.\n\n```json\n{\n  \"registry\": \"0xF99e2173db1f341a947CE9Bd7779aF2245309f91\",\n  \"symbol\": \"verified\"\n}\n```\n\nA private registry would need to implement a similar logic to the public registry, while also implementing the following function:\n\n```\nfunction isVerifiedUser(address _user) external view returns (bool)\n```\n\nWhere when passed in an address `_user`, the contract would return a boolean value representing the address' verification status.\n"
  },
  "inverse-xinv": {
    "key": "inverse-xinv",
    "author": "0xKiwi",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "inverse-xinv",
          "params": {
            "symbol": "xINV",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x08d816526bdc9d077dd685bd9fa49f58a5ab8e48",
          "0x3ee505ba316879d246a8fd2b3d7ee63b51b44fab"
        ],
        "snapshot": 12511580
      }
    ],
    "schema": null,
    "about": "# inverse-xinv\n\nThis is a strategy for counting staked INV balance inside of anchor. Referred to as xINV. \nHere is an example of parameters:\n\n```json\n{\n  \"symbol\": \"xINV\",\n  \"decimals\": 18\n}\n```\n"
  },
  "modefi": {
    "key": "modefi",
    "author": "OxAL7",
    "version": "0.0.1",
    "examples": [
      {
        "name": "modefi",
        "strategy": {
          "name": "modefi",
          "params": {
            "address": "0xea1ea0972fa092dd463f2968f9bb51cc4c981d71",
            "symbol": "MOD",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x6f0b57730f7d51476e93cc46093ec9139010caa2",
          "0xe5aec22bb09186e205cf3366236f1fc8e9606fa4"
        ],
        "snapshot": 12560234
      }
    ],
    "schema": null,
    "about": ""
  },
  "iotex-staked-balance": {
    "key": "iotex-staked-balance",
    "author": "iotex",
    "version": "0.0.2",
    "examples": [
      {
        "name": "iotex query",
        "strategy": {
          "name": "iotex-staked-balance",
          "params": {
            "address": "0x1904BFcb93EdC9BF961Eead2e5c0de81dCc1D37D",
            "symbol": "IOTX",
            "decimals": 18
          }
        },
        "network": "4689",
        "addresses": [
          "0x49e4dbff86a2e5da27c540c9a9e8d2c3726e278f",
          "0x4757ce43dc5429b8f1a132dc29ef970e55ae722b"
        ],
        "snapshot": 5161495
      }
    ],
    "schema": null,
    "about": ""
  },
  "xrc20-balance-of": {
    "key": "xrc20-balance-of",
    "author": "iotexproject",
    "version": "0.0.2",
    "examples": [
      {
        "name": "XRC20 query",
        "strategy": {
          "name": "xrc20-balance-of",
          "params": {
            "address": "0x0043c2cc478d4c01e662ffc75bd3d712420ca5af",
            "symbol": "USDT",
            "decimals": 6
          }
        },
        "network": "4690",
        "addresses": [
          "0x0ddfc506136fb7c050cc2e9511eccd81b15e7426",
          "0x1904BFcb93EdC9BF961Eead2e5c0de81dCc1D37D",
          "0x87Eea07540789af85B64947aEA21A3f00400B597"
        ],
        "snapshot": 8947000
      }
    ],
    "schema": null,
    "about": ""
  },
  "spookyswap": {
    "key": "spookyswap",
    "author": "ooGwei",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example spookyswap query",
        "strategy": {
          "name": "spookyswap",
          "params": {
            "symbol": "SPOOKY",
            "boo": {
              "numerator": 3,
              "denominator": 1
            },
            "lp": {
              "numerator": 5,
              "denominator": 1
            },
            "vaultTokens": [
              {
                "symbol": "BOO in beefy",
                "address": "0xEe3a7c885Fd3cc5358FF583F2DAB3b8bC473316f",
                "numerator": 1,
                "denominator": 1,
                "decimals": 18
              }
            ]
          }
        },
        "network": "250",
        "addresses": [
          "0x1F0C5a9046f0db0e8b651Cd9E8e23ba4Efe4B86d",
          "0x95478C4F7D22D1048F46100001c2C69D2BA57380"
        ],
        "snapshot": 8070436
      }
    ],
    "schema": null,
    "about": ""
  },
  "glide": {
    "key": "glide",
    "author": "racollette",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Glide Finance Query",
        "strategy": {
          "name": "glide",
          "params": {
            "symbol": "GLIDE",
            "glide": {
              "numerator": 1,
              "denominator": 1
            },
            "lp": {
              "numerator": 1,
              "denominator": 1
            }
          }
        },
        "network": "20",
        "addresses": [
          "0x3Ac3935326cCA3146365a39458b5905bCdAe476b",
          "0x9e33Cc5b5835518609f1C432C0B75f6e28524e7f",
          "0x61ffC37eFB973561d5fe91B11c14EbAd603F7d67"
        ],
        "snapshot": 10018666
      }
    ],
    "schema": null,
    "about": ""
  },
  "rnbw-balance": {
    "key": "rnbw-balance",
    "author": "mystbrent",
    "version": "0.1.0",
    "examples": [
      {
        "name": "halodao.eth",
        "strategy": {
          "name": "rnbw-balance",
          "params": {
            "token": "0x90ac0B8f17cE29Ed6A1CDb78eE2150927b3c0Cd5",
            "symbol": "RNBW",
            "decimals": 18
          }
        },
        "network": "42",
        "addresses": [
          "0x30Ca8F1e13978a7A819af012665CFa7E49F1c554"
        ],
        "snapshot": 25241929
      }
    ],
    "schema": null,
    "about": ""
  },
  "celer-sgn-delegation": {
    "key": "celer-sgn-delegation",
    "author": "dominator008",
    "version": "0.2.0",
    "examples": [
      {
        "name": "Celer SGN Delegation example query",
        "strategy": {
          "name": "celer-sgn-delegation",
          "params": {
            "v1StakingAddress": "0x5216db4d4cb22d1ba38866867c38d8e862974e82",
            "v2StakingViewerAddress": "0x5803457E3074E727FA7F9aED60454bf2F127853b",
            "symbol": "CELR"
          }
        },
        "network": "1",
        "addresses": [
          "0x884ad5933693d8575c37247774c9c1148a1c4e9b",
          "0xe136fee678e352b5438d9c87af83d57e495cf432",
          "0xa554ab2c38c1aa82281e6627ff3d2ea5a08adbb0",
          "0xf977814e90da44bfa03b6295a0616a897441acec",
          "0xd7539FCdC0aB79a7B688b04387cb128E75cb77Dc",
          "0x6E33e22f7aC5A4b58A93C7f6D8Da8b46c50A3E20",
          "0xC9dA7343583fA8Bb380A6F04A208C612F86C7701",
          "0x2AC89522CB415AC333E64F52a1a5693218cEBD58",
          "0xd90c6f6D37716b1Cc4dd2B116be42e8683550F45",
          "0x69ABF813a683391C0ec888351912E14590B56e88",
          "0x85924aA0B2cb5a0BbeC583Dd090bF7CEdBa5D2Ea",
          "0x9149B2b87159c4CC9e2f10C2711357720Da4DA08",
          "0xa0710d3b4BA0f848f7edf9CC827aF70A183EAd26",
          "0xAE1220f6bFEb414Ed0A95fbb5A6Ecc303b10aa46",
          "0x2edd637af99f6822d983bd3406d6f414e73108cc",
          "0x6f69286d7c51de0f0cf5f3c03c8ca3eda8a322f9",
          "0xf4c9bd3b5f6c589b3a25f8f9d7aeb0aa81c5f4b3",
          "0x7e9c5d07dbdfa95e1645328c345ace45c4d43b9b",
          "0x5a477cf891d4603cd40679155d09b5d37c48cf2c",
          "0x804c4ac4fdc73767b54f8e69eb447d64516f912f",
          "0xcec9e5318e427b7014c3a207d02e10288e333d0d",
          "0x67c8db836b46e61804a744478bdc7d3804782577",
          "0xd55a339509b514ef4499bbe416c94a00bbe87fcc",
          "0x228b0f599ad555161b91c1f53a133bef8b664864",
          "0xcbd77b27e76cc4725081e34763fac6a919898f4c",
          "0xdb7bbd7445d149cbd8650901d1d76a27545044f0"
        ],
        "snapshot": 14887099
      }
    ],
    "schema": null,
    "about": "# celer-sgn-delegation\n\nStrategy to count the number of CELR tokens delegated to SGN validators.\n\nHere is an example of parameters:\n\n```json\n{\n  \"v1StakingAddress\": \"0x5216db4d4cb22d1ba38866867c38d8e862974e82\",\n  \"v2StakingViewerAddress\": \"0x5803457E3074E727FA7F9aED60454bf2F127853b\"\n}\n```\n"
  },
  "infinityprotocol-liquidity-pools": {
    "key": "infinityprotocol-liquidity-pools",
    "author": "vfatouros",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "infinityprotocol-liquidity-pools",
          "params": {
            "address": "0xd8a1734945b9ba38eb19a291b475e31f49e59877",
            "symbol": "SHARD",
            "scoreMultiplier": 1
          }
        },
        "network": "56",
        "addresses": [
          "0x2130fd01026867a6c8dde24ad5e64f2e2dfce196",
          "0x1d197fd4e7975efd21add0ce3128c488bbd70b83",
          "0x81c2a7b359855520d0ca251975218fa82ee83fba",
          "0xf17067c512d0ca64900e724172761a0f0527466f"
        ],
        "snapshot": 8438110
      }
    ],
    "schema": null,
    "about": "# Liquidity Providers\n\nThis strategy will return the scores of all users who have provided token liquidity on any Uniswap style exchange. Users can change the subGraphURL field to direct their request to a different subgraph. \n\n\n## Example\n\nThe space config will look like this:\n\n```JSON\n{\n  \"strategies\": [\n    [\"infinityprotocol-liquidity-pools\", {\n      // token parameters\n    \"params\": {\n        \"address\": \"0xc168e40227e4ebd8c1cae80f7a55a4f0e6d66c97\",\n        \"symbol\": \"DFYN\"\n        // subgraphURL for the request\n        \"subGraphURL\": \"https://api.thegraph.com/subgraphs/name/ss-sonic/dfyn-v5\",\n        // scoreMultiplier can be used to increase users' scores by a certain magnitude\n        \"scoreMultiplier\": 1,\n      },\n    }],\n  ]\n}\n```\n"
  },
  "aave-governance-power": {
    "key": "aave-governance-power",
    "author": "kartojal",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example of Aave Governance Power strategy",
        "strategy": {
          "name": "aave-governance-power",
          "params": {
            "symbol": "AAVE+stkAAVE",
            "decimals": 18,
            "powerType": "vote",
            "governanceStrategy": "0xb7e383ef9b1e9189fc0f71fb30af8aa14377429e"
          }
        },
        "network": "1",
        "addresses": [
          "0x329c54289Ff5D6B7b7daE13592C6B1EDA1543eD4",
          "0x57ab7ee15cE5ECacB1aB84EE42D5A9d0d8112922",
          "0x0ab97008cad303a8C90ea630c282760284c19e93"
        ],
        "snapshot": 18054498
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. DOODLE"
              ],
              "maxLength": 16
            },
            "governanceStrategy": {
              "type": "string",
              "title": "Contract address",
              "examples": [
                "e.g. 0x1f9840a85d5af5bf1d1762f925bdaddc4201f984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "powerType": {
              "type": "string",
              "title": "Power type",
              "enum": [
                "vote",
                "proposition"
              ]
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ],
              "minimum": 0,
              "maximum": 18
            }
          },
          "required": [
            "governanceStrategy",
            "powerType",
            "decimals"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# aave-governance-power strategy\n\nAllows to get Voting power or Proposition power from an Aave GovernanceStrategy contract.\n\n## Params\n\n| Param | Type | Description |\n| --- | --- | --- |\n| governanceStrategy | string | The Ethereum address of the GovernanceStrategy contract to measure voting or proposition power from an address at a block. |\n| powerType | string | Use `vote` for Voting Power or `proposition` for Proposition Power |\n"
  },
  "cake": {
    "key": "cake",
    "author": "pancake-swap",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "cake",
          "params": {
            "symbol": "CAKE"
          }
        },
        "network": "56",
        "addresses": [
          "0x8b017905DC96B38f817473dc885F84D4C76bC113",
          "0x21fF20E7e1B820020415707298b92299CF0951fE",
          "0xa7A01B93B889ff0639d5ec02914A77529924a46F",
          "0x68e0c606036CAcb83D1755ca31f79630468F044e"
        ],
        "snapshot": 16308675
      },
      {
        "name": "Example query - before 16300686 snapshot",
        "strategy": {
          "name": "cake",
          "params": {
            "symbol": "CAKE"
          }
        },
        "network": "56",
        "addresses": [
          "0x8b017905DC96B38f817473dc885F84D4C76bC113",
          "0x21fF20E7e1B820020415707298b92299CF0951fE",
          "0x68e0c606036CAcb83D1755ca31f79630468F044e"
        ],
        "snapshot": 15204010
      }
    ],
    "schema": null,
    "about": "# Contract Call Strategy\n\nFetches [CAKE](https://bscscan.com/address/0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82) balance from the following sources:\n\n- Wallet\n- CAKE-BNB LP Farm\n- CAKE Pool\n- CAKE Vault\n- Pools that were active at the time of the snapshot\n"
  },
  "aks": {
    "key": "aks",
    "author": "akshaysoam8",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "aks",
          "params": {
            "symbol": "AKS"
          }
        },
        "network": "56",
        "addresses": [
          "0xF677b8EF72C34f63c43f47C30612B1A3Ec1b622F",
          "0xd7eAd7DD37EFf97531beA958a58282Fa6D3a31A5"
        ],
        "snapshot": 8599985
      }
    ],
    "schema": null,
    "about": "# Contract Call Strategy\n\nFetches [AKS](https://bscscan.com/address/0xbf6357daa2d199ff2b4d992471e93a264da6abe3) balance from the following sources:\n\n- Wallet\n- AKS-BNB LP Farm\n- AKS Pool\n- AKS Vault\n- Pools that were active at the time of the snapshot\n"
  },
  "ogn": {
    "key": "ogn",
    "author": "franckc",
    "version": "0.2.0",
    "examples": [
      {
        "name": "OGN Snapshot strategy",
        "strategy": {
          "name": "ogn",
          "params": {
            "ognAddress": "0x8207c1ffc5b6804f6024322ccf34f29c3541ae26",
            "seriesAddress": "0xCcE8E784c777fb9435F89f4E45f8b7FC49f7669f",
            "symbol": "OGN",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0xD85A569F3C26f81070544451131c742283360400",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x8d07D225a769b7Af3A923481E1FdF49180e6A265",
          "0x8f60501dE5b9b01F9EAf1214dbE1924aA97F7fd0",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x17ea92D6FfbAA1c7F6B117c1E9D0c88ABdc8b84C",
          "0x38C0039247A31F3939baE65e953612125cB88268"
        ],
        "snapshot": 16767676
      }
    ],
    "schema": null,
    "about": "# ogn\n\nA strategy for Origin Story governance.\n\nThe score is based on the amount of OGN held in the wallet and the OGN staking contract.\nAn average balance is calculated at the specified block number and 30 days prior to that.\n\nHere is an example of parameters:\n\n```json\n{\n  \"ognAddress\": \"0x8207c1ffc5b6804f6024322ccf34f29c3541ae26\",\n  \"stakingAddress\": \"0x501804B374EF06fa9C427476147ac09F1551B9A0\",\n  \"symbol\": \"OGN\",\n  \"decimals\": 18\n}\n```\n"
  },
  "oolongswap": {
    "key": "oolongswap",
    "author": "Quantumlyy",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "oolongswap",
          "params": {
            "address": "0x66a2a913e447d6b4bf33efbec43aaef87890fbbc",
            "symbol": "USDC"
          }
        },
        "network": "288",
        "addresses": [
          "0x4f6798d42feb2a9169f4fbe0f986d005e1b76180"
        ],
        "snapshot": 399991
      }
    ],
    "schema": null,
    "about": ""
  },
  "impossible-finance": {
    "key": "impossible-finance",
    "author": "impossible-finance",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example IF governance snapshot",
        "strategy": {
          "name": "impossible-finance",
          "params": {
            "address": "0xb0e1fc65c1a741b4662b813eb787d369b8614af1",
            "symbol": "IF",
            "decimals": 18,
            "pairs": [
              {
                "address": "0xf1f52f33aBab0629EC8657C330ad556824B844E1",
                "name": "IF/WBNB pool",
                "decimals": 18,
                "weightNumerator": 6,
                "weightDenominator": 5
              },
              {
                "address": "0x68a37e14D080436B57119e379a04d32F4CA7f92d",
                "name": "IF/BUSD pool",
                "decimals": 18,
                "weightNumerator": 6,
                "weightDenominator": 5
              },
              {
                "address": "0xB5ceFC854801Bc6976B76dc34e2A986556F3cd11",
                "name": "IF/USDT pool",
                "decimals": 18,
                "weightNumerator": 6,
                "weightDenominator": 5
              },
              {
                "address": "0x1bfE758d6061c6A221437b2C673F27876B1E3416",
                "name": "IF/DAI pool",
                "decimals": 18,
                "weightNumerator": 6,
                "weightDenominator": 5
              }
            ]
          }
        },
        "network": "56",
        "addresses": [
          "0x85511EB52e17c014A8665ED98B9ea79d4F2E30e2",
          "0x3C9584426432eb851e5689230d5cFc50659103D5"
        ],
        "snapshot": 8925299
      }
    ],
    "schema": null,
    "about": "## Impossible Finance Governance Strategy\n\nThis strategy makes calls to check balances of IF and IF-X LP tokens associated with input addresses. For IF-X LP tokens, the strategy is able to calculate how much IF underlying should be associated with that LP token. We are also able to assign weights to tokens from LP tokens to allow stakeholders that are aligned with our ecosystem to have more voting power.\n\nNote that STAX tokens and STAX-X LP tokens have no voting power with this strategy.\n"
  },
  "immutable-x": {
    "key": "immutable-x",
    "author": "immutable",
    "version": "1.0.0",
    "name": "immutable-x",
    "examples": [
      {
        "name": "Immutable X (L1 + L2) vote weighting strategy",
        "strategy": {
          "name": "immutable-x",
          "params": {
            "symbol": "imx",
            "address": "0x26b81657e09d3a6a18ff1c6d776fd09f4bb9ee80",
            "decimals": 18,
            "pageSize": 100
          }
        },
        "network": "3",
        "addresses": [
          "0x6f78046c7441c9ae8063f78af53ef29b47871a3e",
          "0xed6f74e896e6853959a02f27634d4ff0b58286ff",
          "0x9f797c209fa19627cb4cb52232b5a615dd04f3f8",
          "0x60bdc16bd3b001a4c7fb3ef598f4b075ad586d5d",
          "0xc8714f989ce817e5d21349888077aa5db4a9bcf6",
          "0x49632a466ee268ebb756fc4d963af98143f259d0",
          "0x6b32a7add2673a3bc84bd7c5f3bccfb3e96fd611",
          "0xca65c6c80562163d49bd12690c2c7ae7d005c6fb",
          "0x2d7e665acb06d5907b0b169bbea61ddf5e206b95",
          "0x2915f444dca40cf23e0050e12e30e35d864fb451",
          "0x973eb49bbdd2754609ba5f3da0b7836948636e62",
          "0xdb0d4032c8e03f946477eca6336fac87d1e8ef2f",
          "0xed6f74e896e6853959a02f27634d4ff0b58286ff",
          "0xdb0d4032c8e03f946477eca6336fac87d1e8ef2f",
          "0xca65c6c80562163d49bd12690c2c7ae7d005c6fb",
          "0xc8714f989ce817e5d21349888077aa5db4a9bcf6",
          "0x9f797c209fa19627cb4cb52232b5a615dd04f3f8",
          "0x973eb49bbdd2754609ba5f3da0b7836948636e62",
          "0x6f78046c7441c9ae8063f78af53ef29b47871a3e",
          "0x6b32a7add2673a3bc84bd7c5f3bccfb3e96fd611",
          "0x60bdc16bd3b001a4c7fb3ef598f4b075ad586d5d",
          "0x49632a466ee268ebb756fc4d963af98143f259d0",
          "0x2d7e665acb06d5907b0b169bbea61ddf5e206b95",
          "0x2915f444dca40cf23e0050e12e30e35d864fb451",
          "0xed6f74e896e6853959a02f27634d4ff0b58286ff",
          "0xdb0d4032c8e03f946477eca6336fac87d1e8ef2f",
          "0xca65c6c80562163d49bd12690c2c7ae7d005c6fb",
          "0xc8714f989ce817e5d21349888077aa5db4a9bcf6",
          "0x9f797c209fa19627cb4cb52232b5a615dd04f3f8",
          "0x973eb49bbdd2754609ba5f3da0b7836948636e62"
        ],
        "snapshot": 11850372
      }
    ],
    "schema": null,
    "about": ""
  },
  "zrx-voting-power": {
    "key": "zrx-voting-power",
    "author": "benlyaunzon",
    "version": "0.1.0",
    "examples": [
      {
        "name": "ZRX Voting Power strategy",
        "strategy": {
          "name": "zrx-voting-power",
          "params": {
            "address": "0xe41d2489571d322189246dafa5ebde1f4699f498",
            "symbol": "ZRX",
            "governerContract": "0x0bB1810061C2f5b2088054eE184E6C79e1591101",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x6bf18019d3b286c7f9fd675de7ef1d89fd985104",
          "0xba4f44e774158408e2dc6c5cb65bc995f0a89180",
          "0x4990cE223209FCEc4ec4c1ff6E0E81eebD8Cca08",
          "0x5265bde27f57e738be6c1f6ab3544e82cdc92a8f"
        ],
        "snapshot": 12855152
      }
    ],
    "schema": null,
    "about": "# Contract call strategy\n\nAllows to get Voting power from ZRX governer contract + erc20 balance\n\n## Strategy Parameters\n"
  },
  "tomb-finance": {
    "key": "tomb-finance",
    "author": "thecryptoundertaker",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example tomb-finance query",
        "strategy": {
          "name": "tomb-finance",
          "params": {
            "symbol": "TOMB",
            "vaultTokens": [
              {
                "symbol": "TSHARE in MLNL",
                "address": "0x88DBF6b60c939999084e752dA7fa62fE84621193",
                "decimals": 18
              }
            ]
          }
        },
        "network": "250",
        "addresses": [
          "0x0fA5a3B6f8e26a7C2C67bd205fFcfA9f89B0e8d1",
          "0x32439F5A7Dc35590e83AAc0a80762dE27Ab76046"
        ],
        "snapshot": 12368542
      }
    ],
    "schema": null,
    "about": ""
  },
  "tranche-staking-slice": {
    "key": "tranche-staking-slice",
    "author": "ayush-jibrel",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Staked SLICE Query",
        "strategy": {
          "name": "tranche-staking-slice",
          "params": {
            "address": "0xAB4235a9ACf00A45557E90F7dB127f3b293cA45A",
            "symbol": "SLICE",
            "decimals": 18,
            "start": 12779442
          }
        },
        "network": "1",
        "addresses": [
          "0xb6f1072B42dB824F8Bcc5d28eF9536Ff9a0C1Ed1",
          "0x8de003a17ec9b684f1f8daefa277c3a78a27f242",
          "0x099745e5657f3cd139d6d9c234593b805f625c0b"
        ],
        "snapshot": 12779447
      }
    ],
    "schema": null,
    "about": ""
  },
  "unipool-univ2-lp": {
    "key": "unipool-univ2-lp",
    "author": "dapplion",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Unipool rewards contract - staked token = Univ2 LP for token",
        "strategy": {
          "name": "unipool-univ2-lp",
          "params": {
            "symbol": "TOKN",
            "decimals": 18,
            "tokenAddress": "0x39A2fad92db0ba608869115eB2E6d26eF16CABC5",
            "unipoolAddress": "0x2c46430D4dA467Cf247E49A33ECd27DE1e16F451",
            "lpTokenAddress": "0x415bd1074305ac16d3da4f6f1fcac7dd9d9b61a6"
          }
        },
        "network": "4",
        "addresses": [
          "0xc46c67bb7e84490d7ebdd0b8ecdaca68cf3823f4",
          "0x839395e20bbb182fa440d08f850e6c7a8f6f0780",
          "0x09fac217f9a9f47b50651fb8c7c641dd0d39efc8",
          "0xaa989e7f79b1efde9c34d3674f085e489f4c612a",
          "0x826976d7c600d45fb8287ca1d7c76fc8eb732030",
          "0x33d2b8460128dfa03d187a919211ce5155a008dd"
        ],
        "snapshot": 8953000
      }
    ],
    "schema": null,
    "about": ""
  },
  "unipool-xsushi": {
    "key": "unipool-xsushi",
    "author": "orakurudata",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Unipool rewards contract (xsushi) - staked token = Univ2 LP for token",
        "strategy": {
          "name": "unipool-xsushi",
          "params": {
            "symbol": "xSUSHI",
            "decimals": 18,
            "tokenAddress": "0x39A2fad92db0ba608869115eB2E6d26eF16CABC5",
            "unipoolAddress": "0x2c46430D4dA467Cf247E49A33ECd27DE1e16F451",
            "lpTokenAddress": "0x415bd1074305ac16d3da4f6f1fcac7dd9d9b61a6"
          }
        },
        "network": "4",
        "addresses": [
          "0xc46c67bb7e84490d7ebdd0b8ecdaca68cf3823f4",
          "0x839395e20bbb182fa440d08f850e6c7a8f6f0780",
          "0x09fac217f9a9f47b50651fb8c7c641dd0d39efc8",
          "0xaa989e7f79b1efde9c34d3674f085e489f4c612a",
          "0x826976d7c600d45fb8287ca1d7c76fc8eb732030",
          "0x33d2b8460128dfa03d187a919211ce5155a008dd"
        ],
        "snapshot": 8953000
      }
    ],
    "schema": null,
    "about": ""
  },
  "taraxa-delegation": {
    "key": "taraxa-delegation",
    "author": "Taraxa-project",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "taraxa-delegation",
          "params": {
            "address": "0x00000000000000000000000000000000000000fe",
            "symbol": "TARA",
            "decimals": 18
          }
        },
        "network": "841",
        "addresses": [
          "0xc6a808A6EC3103548f0b38d32DCb6a705B734c89",
          "0xf3F6dBBE59AA219eAcE04955Bd6c3045ab4fF615",
          "0x0dc0d841f962759da25547c686fa440cf6c28c61",
          "0x4a179a005dcbe770c6970ee390a43d2284f67527",
          "0x931d0b36e648906a27a67bc6057579984765e198",
          "0xfc43217e71ec0a1cc480f3d210cd07cbde7374ec",
          "0x21db400dcb1ef3bc3aee4f3d028ec1939b7fadd6",
          "0x1daaa59a8d4a5c08080cadb65204d2d275838a99"
        ],
        "snapshot": 3112430
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. TARA"
              ],
              "maxLength": 16
            },
            "address": {
              "type": "string",
              "title": "Contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ]
            }
          },
          "required": [
            "address",
            "decimals"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# Simple Taraxa Delegation Strategy\n\nCalculates the stakes of voters, based on their DPOS stakes in the previous specified snapshot.\n\n## Examples\n\nUsed as the base vote strategy for Taraxa Governance, the space config will look like this:\n\n```JSON\n{\n  \"strategies\": [\n    [\"taraxa-delegation\"]\n  ]\n}\n```\n"
  },
  "poap": {
    "key": "poap",
    "author": "greenealexander",
    "version": "1.2.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "poap",
          "params": {
            "symbol": "POAP",
            "eventIds": [
              "1213",
              "1293"
            ]
          }
        },
        "network": "100",
        "addresses": [
          "0x837d21cfda71e93e5257f95ce2c49751675ebcb1",
          "0x00ac36c51500e900ab0f4e692fc1338cf70571b2",
          "0xdd6f702c2907ce401888d993d7dc185e7a824466"
        ],
        "snapshot": 25283078
      }
    ],
    "schema": null,
    "about": "# POAP (erc721)\n\nEach POAP is implemented as an erc721 with a max supply tokens.\n\nIf no `eventIds` are passed, then this strategy returns the number of tokens owned by each account. Otherwise, it returns the number of tokens per account where the event id is included in `eventIds`.\n\nHere are some examples of parameters:\n\n```json\n{\n  \"symbol\": \"POAP\",\n  \"eventIds\": [\"1213\", \"1293\"]\n}\n```\n"
  },
  "poap-with-weight": {
    "key": "poap-with-weight",
    "author": "gawainb",
    "version": "1.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "poap-with-weight",
          "params": {
            "symbol": "POAP",
            "tokenIds": [
              {
                "id": "100001",
                "weight": 100
              },
              {
                "id": "100002",
                "weight": 10
              },
              {
                "id": "1000",
                "weight": 1
              }
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x837d21cfda71e93e5257f95ce2c49751675ebcb1",
          "0x00ac36c51500e900ab0f4e692fc1338cf70571b2",
          "0xdd6f702c2907ce401888d993d7dc185e7a824466"
        ],
        "snapshot": 13040844
      }
    ],
    "schema": null,
    "about": "# POAP (erc721) tokenid with weight\n\nEach POAP is implemented as an erc721 with a max supply tokens.\n\nThis strategy weights the vote with a specific ERC721 NFT with a given TokenId according to the holdings of each POAP and relative scarcity of each NFT.\n\nHere is an example of parameters:\n\n```json\n{\n  \"symbol\": \"POAP\",\n  \"tokenIds\": [\n    {\"id\":\"100001\", \"weight\": 100}, \n    {\"id\":\"100002\", \"weight\": 10}, \n    {\"id\":\"1000\", \"weight\": 1}\n  ]\n}\n```\n"
  },
  "poap-with-weight-v2": {
    "key": "poap-with-weight-v2",
    "author": "gawainb",
    "version": "2.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "poap-with-weight-v2",
          "params": {
            "symbol": "POAP",
            "eventIds": [
              {
                "id": "1213",
                "weight": 10
              },
              {
                "id": "1293",
                "weight": 1
              }
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0xab6f255dac71103ea6d57b320eaf0eec901b05aa",
          "0x878aac6eeaf3e3207d11723b820d6eb1105fa892",
          "0x837d21cfda71e93e5257f95ce2c49751675ebcb1"
        ],
        "snapshot": 13040844
      }
    ],
    "schema": null,
    "about": "# POAP (erc721) eventId with weight\n\nEach POAP is implemented as an erc721 with a max supply tokens.\n\nThis strategy weights the vote with a specific ERC721 NFT with a given EventId according to the holdings of each POAP and relative scarcity of each NFT.\n\nHere is an example of parameters:\n\n```json\n{\n  \"symbol\": \"POAP\",\n  \"eventIds\": [\n    { \"id\": \"1213\", \"weight\": 10 },\n    { \"id\": \"1293\", \"weight\": 1 }\n  ]\n}\n```\n"
  },
  "uniswap-v3": {
    "key": "uniswap-v3",
    "author": "anassohail99",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Uniswap-v3 query",
        "strategy": {
          "name": "uniswap-v3",
          "params": {
            "symbol": "UNI",
            "poolAddress": "0xfc9f572124d8f469960b94537b493f2676776c03",
            "tokenReserve": 0
          }
        },
        "network": "1",
        "addresses": [
          "0x1a62c9d1746de9fd9d449e80ddbb8a67d2a72a94",
          "0x790398726a68a2e81aec3ed0f7cc3758bccc5681"
        ],
        "snapshot": 12952757
      }
    ],
    "schema": null,
    "about": ""
  },
  "uniswap-v3-staking": {
    "key": "uniswap-v3-staking",
    "author": "ribbon-finance",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Uniswap-v3-staking query",
        "strategy": {
          "name": "uniswap-v3-staking",
          "params": {
            "symbol": "UNI",
            "poolAddress": "0x94981f69f7483af3ae218cbfe65233cc3c60d93a",
            "tokenReserve": 0,
            "rewardToken": "0x6123B0049F904d730dB3C36a31167D9d4121fA6B",
            "startTime": 1633694400,
            "endTime": 1638878400,
            "refundee": "0xDAEada3d210D2f45874724BeEa03C7d4BBD41674"
          }
        },
        "network": "1",
        "addresses": [
          "0xfce3a97b5f1d3403f481903da3679039f522089c"
        ],
        "snapshot": 13411250
      }
    ],
    "schema": null,
    "about": "# uniswap-v3-staking\n\nThis strategy counts the token balance of a staked Uniswap V3 position on the canonical [Uniswap V3 Staker contract](https://github.com/Uniswap/v3-staker). It also accounts for the unclaimed token rewards for an incentive program.\n\nHere is an example of parameters:\n\n```json\n{\n    \"symbol\": \"RBN\",\n    \"poolAddress\": \"0x94981f69f7483af3ae218cbfe65233cc3c60d93a\",\n    \"tokenReserve\": 0,\n    \"rewardToken\": \"0x6123B0049F904d730dB3C36a31167D9d4121fA6B\",\n    \"startTime\": 1633694400,\n    \"endTime\": 1638878400,\n    \"refundee\": \"0xDAEada3d210D2f45874724BeEa03C7d4BBD41674\"\n}\n```\n\nThe `poolAddress`, `rewardToken`, `startTime`, `endTime` and `refundee` comes from the [IncentiveKey](https://github.com/Uniswap/v3-staker/blob/main/contracts/interfaces/IUniswapV3Staker.sol) for a Staker Incentive program.\n\nThe `tokenReserve` refers to which side of the pair to count the token balance of. It must be either 0 or 1.\n"
  },
  "l2-deversifi": {
    "key": "l2-deversifi",
    "author": "deversifi",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "l2-deversifi",
          "params": {
            "symbol": "L2",
            "api": "https://api.deversifi.dev/v1/trading/r/tokenBalancesHistory",
            "token": "xDVF"
          }
        },
        "network": "3",
        "addresses": [
          "0xd4fcde55c9bbe8eff062f92a59047393b44abaee",
          "0x9ab450355b4ab504cbc0e4de484781dac08e6a26",
          "0xed48ba4eb763b8514210b53cd272688c66175533"
        ],
        "snapshot": 10802061
      }
    ],
    "schema": null,
    "about": ""
  },
  "vested-deversifi": {
    "key": "vested-deversifi",
    "author": "deversifi",
    "version": "0.1.0",
    "examples": [
      {
        "name": "DeversiFi vested strategy",
        "strategy": {
          "name": "vested-deversifi",
          "params": {
            "symbol": "VEST",
            "xDVFAddress": "0xdddd0e38d30dd29c683033fa0132f868597763ab",
            "decimals": 18,
            "vestedContracts": [
              "0x273E9a126EC9609f4d82F27D9e2A29B70225d087",
              "0x5a6D5344B786D96fe4237f8FE75e11E4B6f2FBD9",
              "0x6cba14acf33de1e581774e7b6b33dd1810a3d956",
              "0x59fbb80184ceC833981D0940044bB59a69E5E7cd",
              "0xad8A0432b0d78189adae17b535f1E9E110920aa2",
              "0x0302f75047aA0935052275E77d15C40BeE7b63B2",
              "0xD6aCCa55EC6aDf37b114A5fA10414d290C7c773f",
              "0xF1b86628c060603D213D23076DF06abBF86a2b6f",
              "0xc2391b7307C783D3c8c93dE55c6eA3f7e94f075C",
              "0x9977936A421f9b06C81AFc0cCF1988B92Decb31F",
              "0x09De35FBBd04E347368f65997A88121e3aCfA232",
              "0x9b1Ab202831417076E4d8a4e1650B8bC4eEcD0c0",
              "0xe7Ef4A761F195C5C6e9574d874B6a82d9CaA6423",
              "0x8aa593464D906512372DdB2A5719F2ecbec49a56",
              "0x216CEf65Bd8eaC33fb08a42032913aaD26c7a1e1",
              "0x153Db97D1ADBda7FF6dda87E002544E0F5747Cb2",
              "0x174dA672c3b8C45619910FD22b8dF57111ea128b",
              "0xcC3eB61737B3161438ab859d1D0DD1A1138C30ab",
              "0x839Fd7873702C2cC238dC87338fF3cbf4ee33d66",
              "0xef0d1247F9fB0148A85bb342eB8B98b56BA338d3",
              "0x773b6601f5bbbEdE75006A728BB22D5efBEA7744",
              "0xE05685Cd4b6b3f120EE7539C6c44647CAa413AB8",
              "0xF2748C4BC1842B38f466a860D30DE2330203C0e0",
              "0x5C6a76A0217D41A5F7c4132b042B0b2CdFd488cF",
              "0xc6441cB2d7620c92B636BE864C35Da068F73D157",
              "0xEF98E4cad451f55178E3Af2Fca79e67b9d4C587B",
              "0x6A9a903C82f662D07497Cd066B134E000B1f06A6",
              "0xf4232686a18468Fdd4C60B69033235E6c61e4f22",
              "0xE711A0489dEAe50340E9950fA14072ab40a75d95",
              "0xa7675EC8b81639caA8a6bd61138D8a45AEd297bB",
              "0x93a70c645c70307ca47bad645706c9d9aa429cf2",
              "0xFc19ce8f91955458Ad135bedDd201D554DB4Cd09",
              "0x6ED13b9BdfEA976D6E9e1D509F4Eb1AbB84C584c",
              "0xbe48fb5D4D1cf72f77685b943A291C7293490164",
              "0x5adc091c463291a425763C5C225A8dD04A10Ac42",
              "0xa8e1B76426aC2B1B93502B30b92445D504d5E9da",
              "0x21EA8bbF6C5BadEA97367F7f5dC0773DA2B4621D",
              "0x5E0f9bE7BCCBcF500FA1A586a8781A44A35a3E32",
              "0x140DCa39e274397aCaf3fD955af31400091A1c49",
              "0xfA1807d861cAD31255bF75534e41e7115D498Ed7",
              "0x1F3473b2369DbBEad23d4Ba7327013Eb6a1082ED",
              "0xF12dE004D643A8e942267A1f0A1933ec4168312E",
              "0x9DDa29c60A2739eF92cD4B3A27f3bA4CcD245C16",
              "0x9f99E8821813E043A2dEd641A3D130CbBa3E0c66",
              "0x4f113098d798E7444255C0D0be7C64A1508Fd0ba",
              "0x4e1aDfD70cB9Fbbe78e3a0d7f3D995cdC31AbE02",
              "0xCfFFbD937A2B03808a5582B550e9F8F151A463AB",
              "0x2F76A1dfaFc7dD90060bc3F04a9C698CCff29f49",
              "0x7A06B23E138F2CC2A5ccEc7e0648F589FBC8CEde"
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0xC24da173A250e9Ca5c54870639EbE5f88be5102d",
          "0x6ae83EAB68b7112BaD5AfD72d6B24546AbFF137D",
          "0x2895059cB5a492BEd58D1fB22713006EfaD465eA",
          "0x9B5ea8C719e29A5bd0959FaF79C9E5c8206d0499",
          "0x57BB6525C489EE43BEe420F90379B047d7c40f31",
          "0x4B49530484be6d742F5af6AC7eb00e290d7Bf0e6",
          "0xF14c9dbDb31b0a18aF44Fcf97Ed12b0abfE1b92e",
          "0xCef1B4Bf8F05F623A2A688b56d9dA679D302EBa7",
          "0x1D801181Ed73e8cF3CA738a3fc5E279e17e27181",
          "0xe918CD1c2fB9840B1ab682BF7CC939bbbAA9bC8A",
          "0x72e7BB93E73b2885a22CA29c34759361399a5C0e",
          "0xF5Fb27b912D987B5b6e02A1B1BE0C1F0740E2c6f",
          "0x0DC874Fb5260Bd8749e6e98fd95d161b7605774D",
          "0x8387ad1Bb69F398B510959e3BE50B6216Ef194BB",
          "0xe016ec54349E1Fdc09C86878F25760ED317a7911",
          "0x1e550B93a628Dc2bD7f6A592f23867241e562AeE",
          "0xF692F721855278611C61A3f8318AcA6377DD0E18",
          "0xCd3Df2aaE3fEaCe8BA79e1FA3f57e4478cef1211",
          "0x229595552101DE62a8dD2DB99dD3b2239d262709",
          "0x9327b80ebB00e4B9215087250CD655F2F07d5e75",
          "0x120D214767aca9DEc81457E0CB0e436B866097f3",
          "0x160834291e67Aa55F830062cA8a47186b5E319A9",
          "0xf0cF9631EE58CC8F3EEC5bd8a78797C1447BB476",
          "0x329c54289Ff5D6B7b7daE13592C6B1EDA1543eD4",
          "0xb5EDbE540411B60139BCD01A087BdCf52a1dE120",
          "0x32254b28F793CC18B3575C86c61fE3D7421cbbef",
          "0xBE058618FA6CDcBb77Ec443975368fb4AB48d326",
          "0x773bCe9123b1D866b3Be7b4E22255c8f7B76eAB2",
          "0x0E93910D2f34A2519a23c488d95D0492516a4300",
          "0x80163E9126260E34851FFd82DB2f2897C8751E50",
          "0xef8527a364CCEE8EbD2C5Dd17244449e884890f4",
          "0xEbCEB5c380E305fC9f061E35ca2B71309b17e6b1",
          "0x75726dd8C3766b5B35da749Ea420db4B9be6e5e1",
          "0x3d4AD2333629eE478E4f522d60A56Ae1Db5D3Cdb"
        ],
        "snapshot": 12992220
      }
    ],
    "schema": null,
    "about": ""
  },
  "biswap": {
    "key": "biswap",
    "author": "biswap-dex",
    "version": "0.0.2",
    "examples": [
      {
        "name": "Example query Biswap",
        "strategy": {
          "name": "biswap",
          "params": {
            "address": "0x965F527D9159dCe6288a2219DB51fc6Eef120dD1",
            "masterChef": "0xDbc1A13490deeF9c3C12b44FE77b503c1B061739",
            "autoBsw": "0x97a16ff6fd63a46bf973671762a39f3780cda73d",
            "autoBswSecond": "0xa4b20183039b2F9881621C3A03732fBF0bfdff10",
            "bswLPs": [
              {
                "address": "0x2b30c317cedfb554ec525f85e79538d59970beb0",
                "pid": 9
              },
              {
                "address": "0x46492b26639df0cda9b2769429845cb991591e0a",
                "pid": 10
              }
            ],
            "symbol": "BSW",
            "decimals": 18
          }
        },
        "network": "56",
        "addresses": [
          "0xdBE55A0daDc80EF88e884f15CE41c26c0Af933a0"
        ],
        "snapshot": 15078771
      }
    ],
    "schema": null,
    "about": "# Biswap\n\nThis is the most common strategy, it returns the balances of the voters for a balances BSW token\nin Biswap project(pools, farms, Liquidity, token).\n\nHere is an example of parameters:\n```json\n[\n  {\n    \"name\": \"Example query Biswap\",\n    \"strategy\": {\n      \"name\": \"biswap\",\n      \"params\": {\n        \"address\": \"0x965F527D9159dCe6288a2219DB51fc6Eef120dD1\",\n        \"masterChef\": \"0xDbc1A13490deeF9c3C12b44FE77b503c1B061739\",\n        \"autoBsw\": \"0x97a16ff6fd63a46bf973671762a39f3780cda73d\",\n        \"autoBswSecond\": \"0xa4b20183039b2F9881621C3A03732fBF0bfdff10\",\n        \"bswLPs\": [\n          {\n            \"address\": \"0x2b30c317cedfb554ec525f85e79538d59970beb0\",\n            \"pid\": 9\n          },\n          {\n            \"address\": \"0x46492b26639df0cda9b2769429845cb991591e0a\",\n            \"pid\": 10\n          }\n        ],\n        \"symbol\": \"BSW\",\n        \"decimals\": 18\n      }\n    },\n    \"network\": \"56\",\n    \"addresses\": [\n      \"0xdBE55A0daDc80EF88e884f15CE41c26c0Af933a0\"\n    ],\n    \"snapshot\": 15078771\n  }\n]\n\n\n```\n"
  },
  "honeyswap": {
    "key": "honeyswap",
    "author": "Kittyslasher",
    "version": "0.2.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "honeyswap",
          "params": {
            "symbol": "WXDAI",
            "address": "0xe91d153e0b41518a2ce8dd3d7944fa863463a97d",
            "useStakedBalances": "true"
          }
        },
        "network": "100",
        "addresses": [
          "0x60a9372862bD752CD02D9AE482F94Cd2fe92A0Bf",
          "0x8520Fc4C282342f8e746b881b9B60c14F96A0fAB",
          "0x28DDA781160928D6BeF89833cD646A145a7899F3",
          "0xEB8Db0f667B4f96c6819c7E3f14Bd3a2bd89B062",
          "0x5EEDb07269278609D396210A4CB2D3A66f696daf",
          "0xc88db189Dc19753908534411794deD880C10B5cb",
          "0xC6f1a9D4Fb5681f986d3Dc6EC116f66D95CC2F03"
        ],
        "snapshot": 11437846
      }
    ],
    "schema": null,
    "about": "# honeyswap\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0xe91d153e0b41518a2ce8dd3d7944fa863463a97d\",\n  \"useStakedBalances\": \"true\"\n}\n```\n\n- *address* - the underlying token\n- *useStakedBalances* - if **true** it will also return the token balances from the HoneyFarm pools\n"
  },
  "egl-vote": {
    "key": "egl-vote",
    "author": "shanevc",
    "version": "0.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "egl-vote",
          "params": {
            "address": "0x0baD6775A3581ef6ED9a70F5798642FAfc9ecbba",
            "symbol": "EGL",
            "decimals": 18,
            "eglVotingAddress": "0xFF238bb166Fd031A36302B0190eaF55e240c5B7E"
          }
        },
        "network": "3",
        "addresses": [
          "0x6606689c5423Ee00E6576876CB1CDC002883bcD0",
          "0x98d6E440b54E31aA9bd46b20002Fa44c9b084633",
          "0xFF238bb166Fd031A36302B0190eaF55e240c5B7E",
          "0x12b709eB54Ad3417400Cc1A5e6F64174391143Ed"
        ],
        "snapshot": 10813553
      }
    ],
    "schema": null,
    "about": "# egl-vote\n\nChecks for the number of EGL's locked in an EGL vote and adds it to the balance of the \nvoters EGL ERC20 token\n\nHere is an example of parameters:\n\n```json\n{\n    \"address\": \"0x0baD6775A3581ef6ED9a70F5798642FAfc9ecbba\",\n    \"symbol\": \"EGL\",\n    \"decimals\": 18,\n    \"eglVotingAddress\": \"0xFF238bb166Fd031A36302B0190eaF55e240c5B7E\"\n}\n```\n"
  },
  "mcn-farm": {
    "key": "mcn-farm",
    "author": "drop-out-dev",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "mcn-farm",
          "params": {
            "tokenAddress": "0xD91E9a0fEf7C0fa4EBdAF4d0aCF55888949A2a9b",
            "symbol": "MCN",
            "decimals": "18",
            "lpAddress": "0x2Ef2cb6af83de4171A69EE2f7C677079fFD9BcD0",
            "stakingAddress": "0x15dEd15fE32EBac0b6cFb08cdAB112cca8380423"
          }
        },
        "network": "1",
        "addresses": [
          "0xCba1A275e2D858EcffaF7a87F606f74B719a8A93",
          "0x0E530732a9ecc807Cafc1665ADa8C27C197a7cb1",
          "0xF4a616612D95FfcC667F2cCa19b41842Cea78DE6",
          "0x1096cB8F6e17dB5a072fa5b19dC4b8F212CB36E3",
          "0xD0996fd8113838Be107539dAbFa5EbD89583d45d",
          "0x5e7C21DefE711bCd5CEa1B267d2e87F7913D510F",
          "0xf1F56a5a6E9aCf0cF316Da9f2DcFc7312F4CAba9",
          "0x87616fA850c87a78f307878f32D808dad8f4d401"
        ],
        "snapshot": 13050000
      }
    ],
    "schema": null,
    "about": "# mcn-farm\n\nThis strategy returns the total user-owned MCN rewards (staked tokens and pending rewards) held by the farm contract.\n\n## Examples\n\nCan be used instead of the erc20-balance-of strategy, the space config will look like this:\n\n```JSON\n{\n    \"tokenAddress\": \"0xD91E9a0fEf7C0fa4EBdAF4d0aCF55888949A2a9b\",\n    \"lpAddress\": \"0x2Ef2cb6af83de4171A69EE2f7C677079fFD9BcD0\",\n    \"stakingAddress\": \"0x15dEd15fE32EBac0b6cFb08cdAB112cca8380423\"\n}\n```\n"
  },
  "meebitsdao": {
    "key": "meebitsdao",
    "author": "peters-josh",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "meebitsdao",
          "params": {
            "address": "0xc34cbca32e355636c7f52dd8beab0af2396ebd79",
            "symbol": "MFND",
            "apiUrl": "https://api.meebitsdao.com/user/token_status/",
            "startingTokenId": 1,
            "endingTokenId": 200
          }
        },
        "network": "137",
        "addresses": [
          "0x2009a752a50D3CDe486d7b5921944377B729E747",
          "0xf9e20049d1634b3ad75dedc6072b04ff68fe01db",
          "0x4D949AA6994242031460fa8E3edD783cf77B5e2E"
        ],
        "snapshot": 18213580
      }
    ],
    "schema": null,
    "about": "# meebitsdao\n\nThis strategy return the if the voter has an activated Founder's Token.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0xc34cbca32e355636c7f52dd8beab0af2396ebd79\",\n  \"symbol\": \"MFND\",\n  \"apiUrl\": \"https://api.meebitsdao.com/user/token_status/\",\n  \"startingTokenId\": 1,\n  \"endingTokenId\": 200\n}\n```\n"
  },
  "crucible-erc20-balance-of": {
    "key": "crucible-erc20-balance-of",
    "author": "thegostep",
    "version": "0.1.1",
    "examples": [
      {
        "name": "Crucible LP Balance",
        "strategy": {
          "name": "crucible-erc20-balance-of",
          "params": {
            "symbol": "MIST-WETH LP (Uni V2)",
            "crucible_factory": "0x54e0395CFB4f39beF66DBCd5bD93Cca4E9273D56",
            "erc20_address": "0xCD6bcca48069f8588780dFA274960F15685aEe0e",
            "erc20_decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x4d4902BD7E080159964f46B10feeb6482d148E5a",
          "0xbD7B1a13149Da69059e4591F040D7D7dAda740c5",
          "0x7F8aE988796890454A1007a6dD15eaedC549ad1e",
          "0xfca399b892f4e8306fc31b312a3399f422976886",
          "0x97a6c796FE543cABC2cA7aE026206e8B260C4dA0",
          "0x5E91d547A6f279E6d59086E30e25C964EFE4b463",
          "0xB59212Bd19aE722F1cc97A3A93542D573534cf70",
          "0x777B0884f97Fd361c55e472530272Be61cEb87c8",
          "0x63060f713b377AF8D7D50669ec0fDcE1D31E3f28",
          "0xA5109D7E4790143a91D673Ba545405Bf396806CF"
        ],
        "snapshot": 13062462
      }
    ],
    "schema": null,
    "about": "# crucible-erc20-balance-of\n\nThis strategy weighs votes by the sum of an ERC20 held in a crucible vault.\n\nHere is an example of parameters:\n\n```json\n{\n  \"crucible_factory\": \"0x54e0395CFB4f39beF66DBCd5bD93Cca4E9273D56\",\n  \"erc20_address\": \"0xCD6bcca48069f8588780dFA274960F15685aEe0e\",\n  \"erc20_decimals\": 18\n}\n```\n"
  },
  "erc20-token-and-lp-weighted": {
    "key": "erc20-token-and-lp-weighted",
    "author": "joehquak",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc20-token-and-lp-weighted",
          "params": {
            "tokenAddress": "0x88ACDd2a6425c3FaAE4Bc9650Fd7E27e0Bebb7aB",
            "symbol": "MIST",
            "lpTokenAddress": "0xcd6bcca48069f8588780dfa274960f15685aee0e"
          }
        },
        "network": "1",
        "addresses": [
          "0xa7396dbd79c26f923faf144b7c77c9eb1ae0b634",
          "0x9eedca1b19aa0d438fcf890524e6af056d95dd58",
          "0xf7b4ddd4805455e108f0be5b417434c0aac88ddf",
          "0xf4b1b77f3f56b58555634b64fb7ed31c60413754",
          "0x1cd5698dc7cbe5b80c8b60791a8e2fb857a53a58",
          "0xcf576f74ba3b01cdc04e04305055446d1649bd07",
          "0x6f1234e31830097b04a8f9b3eeedf9eb8008837a",
          "0xc5690c1f0f0642e76c956580b748b64cc5b3dc73",
          "0x0504c6e9563d8756cb823fcbbf342301ddbc8066",
          "0xee7f963391afb7d1f1ec872dbe2f80ea025d0add"
        ],
        "snapshot": 15206855
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Token symbol",
              "examples": [
                "e.g. MIST"
              ],
              "maxLength": 16
            },
            "tokenAddress": {
              "type": "string",
              "title": "Token address",
              "examples": [
                "e.g. 0x88ACDd2a6425c3FaAE4Bc9650Fd7E27e0Bebb7aB"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "lpTokenAddress": {
              "type": "string",
              "title": "LP address",
              "examples": [
                "e.g. 0xcd6bcca48069f8588780dfa274960f15685aee0e"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            }
          },
          "required": [
            "tokenAddress",
            "lpTokenAddress"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# erc20-token-and-lp-weighted\n\nThis strategy works on Uniswap v2 style pools or contracts utilising token0/token1 and reserves.\n\nThis strategy calculates the qty of the specified token within a single LP, doubles it to account for both sides, and then uses it as a weight against the users LP balance.\n\nThis strategy also additionally adds the users token balance to give a token weighted score.\n\nThis is useful if you want to be inclusive of LP and token holdings and need to scale them to be balanced with each other.\n\nHere is an example of parameters:\n\n```json\n{\n    \"tokenAddress\": \"0x88ACDd2a6425c3FaAE4Bc9650Fd7E27e0Bebb7aB\",\n    \"symbol\": \"MIST\",\n    \"lpTokenAddress\": \"0xcd6bcca48069f8588780dfa274960f15685aee0e\"\n}\n```\n"
  },
  "erc20-token-and-single-lp-weighted": {
    "key": "erc20-token-and-single-lp-weighted",
    "author": "skyrocktech",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc20-token-and-single-lp-weighted",
          "params": {
            "tokenAddress": "0x06791B2117ed179dB6af1fdc8B2aA86dE76700A6",
            "symbol": "WSLS",
            "lpTokenAddress": "0x370165b24D97BAc5c07246976b80568985C0048B"
          }
        },
        "network": "56",
        "addresses": [
          "0x0504c6e9563d8756cb823fcbbf342301ddbc8066",
          "0xFe0B729221f846b46B6be642425Db8326A4761FB",
          "0x5e990768b0ece79f0516663a23207d4a7fd6e8f9",
          "0xee7f963391afb7d1f1ec872dbe2f80ea025d0add",
          "0x869191325254a82fBc858aB3cad9Bf91703Da353",
          "0x011f57BD13D1cbeC630dF313B66F0339AeFE627e",
          "0x2B0f0ef985b16f2C06961e409637aa7C579395eD",
          "0x0AC6F108002496Ab9Ca11DCDf36c207704F29Bfa"
        ],
        "snapshot": 32339616
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Token symbol",
              "examples": [
                "e.g. MIST"
              ],
              "maxLength": 16
            },
            "tokenAddress": {
              "type": "string",
              "title": "Token address",
              "examples": [
                "e.g. 0x88ACDd2a6425c3FaAE4Bc9650Fd7E27e0Bebb7aB"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "lpTokenAddress": {
              "type": "string",
              "title": "LP address",
              "examples": [
                "e.g. 0xcd6bcca48069f8588780dfa274960f15685aee0e"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            }
          },
          "required": [
            "tokenAddress",
            "lpTokenAddress"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# erc20-token-and-single-lp-weighted\n\nThis strategy works on pancakeswap v2 style pools or contracts using token0/token1 and reserves.\n\nThis strategy calculates the amount of the specified token within a single LP, takes both sides into account, and then uses this as a weight against the user's LP balance.\n\nThis strategy also adds users token balance to give a token-weighted score.\n\nThis is useful if you want to include LP and token assets and need to scale them to balance each other.\n\nHere is an example of a parameter:\n\n```json\n{\n  \"tokenAddress\": \"0x06791B2117ed179dB6af1fdc8B2aA86dE76700A6\",\n  \"symbol\": \"WSLS\",\n  \"lpTokenAddress\": \"0x370165b24D97BAc5c07246976b80568985C0048B\"\n}\n```\n"
  },
  "crucible-erc20-token-and-lp-weighted": {
    "key": "crucible-erc20-token-and-lp-weighted",
    "author": "joehquak",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "crucible-erc20-token-and-lp-weighted",
          "params": {
            "symbol": "MIST",
            "crucibleFactory": "0x54e0395CFB4f39beF66DBCd5bD93Cca4E9273D56",
            "tokenAddress": "0x88ACDd2a6425c3FaAE4Bc9650Fd7E27e0Bebb7aB",
            "lpTokenAddress": "0xcd6bcca48069f8588780dfa274960f15685aee0e"
          }
        },
        "network": "1",
        "addresses": [
          "0x4d4902BD7E080159964f46B10feeb6482d148E5a",
          "0xbD7B1a13149Da69059e4591F040D7D7dAda740c5",
          "0x7F8aE988796890454A1007a6dD15eaedC549ad1e",
          "0xfca399b892f4e8306fc31b312a3399f422976886",
          "0x97a6c796FE543cABC2cA7aE026206e8B260C4dA0",
          "0x5E91d547A6f279E6d59086E30e25C964EFE4b463",
          "0xB59212Bd19aE722F1cc97A3A93542D573534cf70",
          "0x777B0884f97Fd361c55e472530272Be61cEb87c8",
          "0x63060f713b377AF8D7D50669ec0fDcE1D31E3f28",
          "0xA5109D7E4790143a91D673Ba545405Bf396806CF"
        ],
        "snapshot": 13062462
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Token symbol",
              "examples": [
                "e.g. MIST"
              ],
              "maxLength": 16
            },
            "crucibleFactory": {
              "type": "string",
              "title": "Crucible factory address",
              "examples": [
                "e.g. 0x54e0395CFB4f39beF66DBCd5bD93Cca4E9273D56"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "tokenAddress": {
              "type": "string",
              "title": "Token address",
              "examples": [
                "e.g. 0x88ACDd2a6425c3FaAE4Bc9650Fd7E27e0Bebb7aB"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "lpTokenAddress": {
              "type": "string",
              "title": "LP address",
              "examples": [
                "e.g. 0xCD6bcca48069f8588780dFA274960F15685aEe0e"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            }
          },
          "required": [
            "crucibleFactory",
            "tokenAddress",
            "lpTokenAddress"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# crucible-erc20-token-and-lp-weighted\n\nThis strategy works on Uniswap v2 style pools or contracts utilising token0/token1 and reserves.\n\nThis strategy calculates the qty of the specified token within a single LP, doubles it to account for both sides, and then uses it as a weight against the sum of a users LP balance across all of their Crucibles.\n\nThis strategy also additionally adds the sum of the users token balance in all Crucibles to give a token weighted score.\n\nThis is useful if you want to be inclusive of LP and token holdings and need to scale them to be balanced with each other.\n\nHere is an example of parameters:\n\n```json\n{\n    \"symbol\": \"MIST\",\n    \"crucibleFactory\": \"0x54e0395CFB4f39beF66DBCd5bD93Cca4E9273D56\",\n    \"tokenAddress\": \"0x88ACDd2a6425c3FaAE4Bc9650Fd7E27e0Bebb7aB\",\n    \"tokenDecimals\" : \"18\",\n    \"lpTokenAddress\": \"0xcd6bcca48069f8588780dfa274960f15685aee0e\",\n    \"lpTokenDecimals\" : \"18\"\n}\n```\n"
  },
  "has-rock": {
    "key": "has-rock",
    "author": "AngelDAO",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "has-rock",
          "params": {
            "address": "0x37504AE0282f5f334ED29b4548646f887977b7cC",
            "symbol": "ROCK"
          }
        },
        "network": "1",
        "addresses": [
          "0x66C25a700F9c762891b4d6fbf5aF9Dc2eb04266A"
        ],
        "snapshot": 13118882
      }
    ],
    "schema": null,
    "about": "# has-rocks\n\nThis is a strategy for addresses with rocks.\n"
  },
  "flexa-capacity-staking": {
    "key": "flexa-capacity-staking",
    "author": "amptoken",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Flexa Capacity staking example query",
        "strategy": {
          "name": "flexa-capacity-staking",
          "params": {
            "symbol": "FLEX",
            "apiBase": "https://api.capacity.staging.flexa.network"
          }
        },
        "network": "1",
        "addresses": [
          "0x4621E524e6F95A6280b7761BDE3d150101b290F8",
          "0x3c4B8C52Ed4c29eE402D9c91FfAe1Db2BAdd228D",
          "0xd649bACfF66f1C85618c5376ee4F38e43eE53b63",
          "0x726022a9fe1322fA9590FB244b8164936bB00489",
          "0xc6665eb39d2106fb1DBE54bf19190F82FD535c19",
          "0x6ef2376fa6e12dabb3a3ed0fb44e4ff29847af68"
        ],
        "snapshot": 11437846
      }
    ],
    "schema": null,
    "about": ""
  },
  "sunrisegaming-univ2-lp": {
    "key": "sunrisegaming-univ2-lp",
    "author": "sunrisedao",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Staked Univ2 LP for token",
        "strategy": {
          "name": "sunrisegaming-univ2-lp",
          "params": {
            "symbol": "SUNC",
            "decimals": 18,
            "tokenAddress": "0x692accdd8b86692427e0aa4752ae917df01cc56f",
            "lpTokenAddress": "0xaf5a7469Cf2571b973AEee9AE2f8aad00e1337d2",
            "stakingAddress": "0x7dbE40ac6bB41A5FE4Fa2C74f31d7DEFBC793B58",
            "poolIndex": 1
          }
        },
        "network": "1",
        "addresses": [
          "0x7dbe40ac6bb41a5fe4fa2c74f31d7defbc793b58",
          "0x26533020822f9b28c801e6beb772ef74dfe0c81e",
          "0x75bd5989ce8f962a1864d8a0af8bfb5130805722",
          "0x7505afcd576bb995577a944bccdb5c54c7d5ec45",
          "0x930af93baa5f2c2f71bafd5a2fd7b1d47a61c352",
          "0xbc444050d78107872c0262452fff004da9208258",
          "0x26533020822f9b28c801e6beb772ef74dfe0c81e"
        ],
        "snapshot": 13227497
      }
    ],
    "schema": null,
    "about": "# Sunrise Gaming Uniswap LP\n\nThis strategy returns balances of the underlying token in Sunrise LP pools\n\nHere is an example of parameters:\n\n```json\n{\n  \"symbol\": \"SUNC\",\n  \"decimals\": 18,\n  \"tokenAddress\": \"0x692accdd8b86692427e0aa4752ae917df01cc56f\",\n  \"lpTokenAddress\": \"0xaf5a7469Cf2571b973AEee9AE2f8aad00e1337d2\",\n  \"stakingAddress\": \"0x7dbE40ac6bB41A5FE4Fa2C74f31d7DEFBC793B58\",\n  \"poolIndex\": 1\n}\n```"
  },
  "sunrisegaming-staking": {
    "key": "sunrisegaming-staking",
    "author": "sunrisedao",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Sunrise Staked token",
        "strategy": {
          "name": "sunrisegaming-staking",
          "params": {
            "symbol": "SUNC",
            "decimals": 18,
            "tokenAddress": "0x692accdd8b86692427e0aa4752ae917df01cc56f",
            "stakingAddress": "0x7dbE40ac6bB41A5FE4Fa2C74f31d7DEFBC793B58",
            "poolIndex": 0
          }
        },
        "network": "1",
        "addresses": [
          "0x7dbe40ac6bb41a5fe4fa2c74f31d7defbc793b58",
          "0x26533020822f9b28c801e6beb772ef74dfe0c81e",
          "0x75bd5989ce8f962a1864d8a0af8bfb5130805722",
          "0x7505afcd576bb995577a944bccdb5c54c7d5ec45",
          "0x930af93baa5f2c2f71bafd5a2fd7b1d47a61c352",
          "0xbc444050d78107872c0262452fff004da9208258",
          "0x26533020822f9b28c801e6beb772ef74dfe0c81e",
          "0x45e049241b69df70cead33ef5a41d2d0a128ce01"
        ],
        "snapshot": 13229798
      }
    ],
    "schema": null,
    "about": "# Sunrise Gaming Staking Token\n\nThis strategy returns balances of the underlying token in Sunrise Staking pools\n\nHere is an example of parameters:\n\n```json\n{\n  \"symbol\": \"SUNC\",\n  \"decimals\": 18,\n  \"tokenAddress\": \"0x692accdd8b86692427e0aa4752ae917df01cc56f\",\n  \"stakingAddress\": \"0x7dbE40ac6bB41A5FE4Fa2C74f31d7DEFBC793B58\",\n  \"poolIndex\": 0\n}\n```"
  },
  "single-staking-autocompound-balanceof": {
    "key": "single-staking-autocompound-balanceof",
    "author": "michaelotis",
    "version": "0.1.0",
    "dependOnOtherAddress": false,
    "examples": [
      {
        "name": "Single Staking Amount from Autocompounding Vault",
        "strategy": {
          "name": "single-staking-autocompound-balanceof",
          "params": {
            "stakingPoolAddress": "0xC122d1F67bbC3e40aec198C54B9eC13E1b0990eC",
            "symbol": "FUZZ",
            "decimals": 18
          }
        },
        "network": "1666600000",
        "addresses": [
          "0x12e49d93588e0056bd25530C3B1E8AAc68F4B70a",
          "0x8C612B03b3358C1E535706695c635C360034B968",
          "0x24d19f100ba142543a863fc2294b188e35ab55b9"
        ],
        "snapshot": 32877171
      }
    ],
    "schema": null,
    "about": "# single-staking-autocompound-balanceof\n\nUsed for fetching the staked token balance in an autocompounding single staking pool\n\nHere is an example of parameters:\n\n```json\n{\n  \"stakingPoolAddress\": \"0xC122d1F67bbC3e40aec198C54B9eC13E1b0990eC\",\n  \"decimals\": 18\n}\n```\n"
  },
  "single-staking-pools-balanceof": {
    "key": "single-staking-pools-balanceof",
    "author": "PolySwift",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "single-staking-pools-balanceof",
          "params": {
            "stakingPoolAddresses": [
              "0x081Ffa6Fa76e738531B3717301F4B636efAe1F1e"
            ],
            "symbol": "DAI",
            "decimals": 18
          }
        },
        "network": "43114",
        "addresses": [
          "0xa598710E9EdA808dF224E14748f6eba374043715"
        ],
        "snapshot": 4565540
      }
    ],
    "schema": null,
    "about": "# single-staking-pools-balanceof\n\nUsed for fetching the staked token balance in a single staking pool\n\nHere is an example of parameters:\n\n```json\n{\n  \"stakingPoolAddress\": [\n      \"0x081Ffa6Fa76e738531B3717301F4B636efAe1F1e\"\n   ],\n  \"decimals\": 18\n}\n```\n"
  },
  "hopr-stake-and-balance-qv": {
    "key": "hopr-stake-and-balance-qv",
    "author": "QYuQianchen",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Calculate score based on HOPR stake season x and token balances across chains",
        "strategy": {
          "name": "hopr-stake-and-balance-qv",
          "params": {
            "tokenAddress": "0xf5581dfefd8fb0e4aec526be659cfab1f8c781da",
            "symbol": "HOPR",
            "season": 7,
            "fallbackGnosisBlock": 27852687,
            "subgraphStudioProdQueryApiKey": null,
            "subgraphStudioDevAccountId": null,
            "subgraphHostedAccountName": "hoprnet",
            "useStake": true,
            "useHoprOnGnosis": true,
            "useHoprOnMainnet": true,
            "subgraphStudioProdAllSeasonQueryId": "DrkbaCvNGVcNH1RghepLRy6NSHFi8Dmwp4T2LN3LqcjY",
            "subgraphStudioDevAllSeasonVersion": "v0.0.9",
            "subgraphStudioDevAllSeasonSubgraphName": "hopr-stake-all-seasons",
            "subgraphHostedAllSeasonSubgraphName": "hopr-stake-all-seasons",
            "subgraphStudioProdHoprOnGnosisQueryId": "njToE7kpetd3P9sJdYQPSq6yQjBs7w9DahQpBj6WAoD",
            "subgraphStudioDevHoprOnGnosisSubgraphName": "hopr-on-gnosis",
            "subgraphStudioDevHoprOnGnosisVersion": "v0.0.2",
            "subgraphHostedHoprOnGnosisSubgraphName": "hopr-on-xdai"
          }
        },
        "network": "1",
        "addresses": [
          "0x04BBB7eA18EA570aE47d4489991645E4E49bBf37",
          "0x2aF80738aC01e7883d11c912dFe8322C129ae5C5",
          "0x0bb43EFc1a613658177D8f67CcF9CFFD8B25b906",
          "0x53e85186ebF5A7d4BD06324F7b9D8B3623EF0307",
          "0x2DCDB99930E279f1e9Ad11F491163051432542A0",
          "0x4326990033eCd87A5444383Cf8c715E696301910",
          "0xEd6a59A7C1D5a88b7cb5eb877A7A6078A7e801C7",
          "0xeFC05B0D0C8bE8D4Cb3a220ef582E9f7E6FBCd00",
          "0xC7B169b108c5e75991C520AEA97140534291C81D",
          "0x04Be52434EB64aDdF373137310551ac42013677c",
          "0xBE8C93a8C18AF63aAB449994AFAc13E71240ccC4",
          "0xf813773eBDD4759c1B780d745081f046A5B776fB",
          "0x7F26C34Ed10bF66602009231bBFF24f2f84e9270",
          "0x4abd7276C53279b3aBFFF2B5D8A47c0AFc84833B",
          "0x3e1A12a6019ee26418F22B656926fE38F5e58C5f",
          "0x7A27A4D91231aCB3282b410Cc784517B417FA0DA"
        ],
        "snapshot": 17220270
      }
    ],
    "schema": null,
    "about": "# HOPR Stake and Balance QV\n\nThis `hopr-stake-and-balance-qv` strategy calculates voting power with:\n`(B1 + B2 + B3 + S1 + S2)^0.5`\n\nwhere:\n- B1: balance of HOPR token on mainnet\n- B2: balance of HOPR token on Gnosis chain (xHOPR)\n- B3: balance of wrapped HOPR token on Gnosis chain (wxHOPR)\n- S1: amount of xHOPR token staked into the latest staking season\n- S2: amount of wxHOPR token unclaimed from the latest staking season\n\n## Parameters\n- \"tokenAddress\": Contract address of HOPR token on mainnet. Value should be `\"0xf5581dfefd8fb0e4aec526be659cfab1f8c781da\"`\n- \"symbol\": Token Symbol. Value should be `\"HOPR\"`.\n- \"season\": Number of the ongoing season. E.g. `7`.\n- \"fallbackGnosisBlock\": Fallback block number on Gnosis chain, in case Gnosis block number cannot be translated from Ethereum mainnet due to subgraph issues. E.g. `27852687`,\n- \"subgraphStudioProdQueryApiKey\": Production decentralized subgraph studio query API key. If no key can be provided, use `null`.\n- \"subgraphStudioDevAccountId\": Development subgraph studio account ID. Note that this ID should not be exposed normally. If unknown, use `null`.\n- \"subgraphHostedAccountName\": Legacy hosted subgraph account name. Value is `\"hoprnet\"`.\n- \"useStake\": If the staking program should be considered. If `false`, `S1 + S2 === 0`. Value should be set to `true`.\n- \"useHoprOnGnosis\": If tokens on Gnosis chain should be considered. If `false`, `B2 + B3 === 0`. Value should be set to `true`.\n- \"useHoprOnMainnet\": If tokens on Ethereum mainnet should be considered. If `false`, `B1 === 0`. Value should be set to `true`.\n- \"subgraphStudioProdAllSeasonQueryId\": Production stake all season subgraph ID. Value is `\"DrkbaCvNGVcNH1RghepLRy6NSHFi8Dmwp4T2LN3LqcjY\"`.\n- \"subgraphStudioDevAllSeasonVersion\": Latest development version of the stake all season subgraph. E.g. `\"v0.0.9\"`\n- \"subgraphStudioDevAllSeasonSubgraphName\": Name of the staking subgraph in Graph Studio. Value should be `\"hopr-stake-all-seasons\"`.\n- \"subgraphHostedAllSeasonSubgraphName\": Name of the staking subgraph in Graph Hosted service. Value should be `\"hopr-stake-all-seasons\"`.\n- \"subgraphStudioProdHoprOnGnosisQueryId\": Latest development version of the HOPR token balances on Gnosis subgraph. Value should be `\"njToE7kpetd3P9sJdYQPSq6yQjBs7w9DahQpBj6WAoD\"`.\n- \"subgraphStudioDevHoprOnGnosisSubgraphName\": Name of the HOPR token balances on Gnosis subgraph in Graph Studio. Value should be \"hopr-on-gnosis\"`\n- \"subgraphStudioDevHoprOnGnosisVersion\": Latest development version of the HOPR token balances on Gnosis subgraph. E.g. \"v0.0.2\"`\n- \"subgraphHostedHoprOnGnosisSubgraphName\": Name of the HOPR token balances on Gnosis in Graph Hosted service. Value should be `\"hopr-on-xdai\"`\n"
  },
  "hopr-bridged-balance": {
    "key": "hopr-bridged-balance",
    "author": "QYuQianchen",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Get bridged HOPR token balance",
        "strategy": {
          "name": "hopr-bridged-balance",
          "params": {
            "symbol": "HOPR",
            "xHopr": "0xd057604a14982fe8d88c5fc25aac3267ea142a08",
            "wxHopr": "0xD4fdec44DB9D44B8f2b6d529620f9C0C7066A2c1",
            "hopr": "0xf5581dfefd8fb0e4aec526be659cfab1f8c781da"
          }
        },
        "network": "100",
        "addresses": [
          "0x04BBB7eA18EA570aE47d4489991645E4E49bBf37",
          "0x2aF80738aC01e7883d11c912dFe8322C129ae5C5",
          "0x0bb43EFc1a613658177D8f67CcF9CFFD8B25b906",
          "0x53e85186ebF5A7d4BD06324F7b9D8B3623EF0307",
          "0x2DCDB99930E279f1e9Ad11F491163051432542A0",
          "0x4326990033eCd87A5444383Cf8c715E696301910",
          "0xEd6a59A7C1D5a88b7cb5eb877A7A6078A7e801C7",
          "0xeFC05B0D0C8bE8D4Cb3a220ef582E9f7E6FBCd00",
          "0xC7B169b108c5e75991C520AEA97140534291C81D",
          "0x04Be52434EB64aDdF373137310551ac42013677c",
          "0xBE8C93a8C18AF63aAB449994AFAc13E71240ccC4",
          "0xf813773eBDD4759c1B780d745081f046A5B776fB",
          "0x7F26C34Ed10bF66602009231bBFF24f2f84e9270",
          "0x4abd7276C53279b3aBFFF2B5D8A47c0AFc84833B",
          "0x3e1A12a6019ee26418F22B656926fE38F5e58C5f",
          "0x7A27A4D91231aCB3282b410Cc784517B417FA0DA"
        ],
        "snapshot": 18200908
      },
      {
        "name": "Get bridged HOPR token balance",
        "strategy": {
          "name": "hopr-bridged-balance",
          "params": {
            "xHopr": "0xd057604a14982fe8d88c5fc25aac3267ea142a08",
            "wxHopr": "0xD4fdec44DB9D44B8f2b6d529620f9C0C7066A2c1",
            "hopr": "0xf5581dfefd8fb0e4aec526be659cfab1f8c781da"
          }
        },
        "network": "1",
        "addresses": [
          "0x04BBB7eA18EA570aE47d4489991645E4E49bBf37",
          "0x2aF80738aC01e7883d11c912dFe8322C129ae5C5",
          "0x0bb43EFc1a613658177D8f67CcF9CFFD8B25b906",
          "0x53e85186ebF5A7d4BD06324F7b9D8B3623EF0307",
          "0x2DCDB99930E279f1e9Ad11F491163051432542A0",
          "0x4326990033eCd87A5444383Cf8c715E696301910",
          "0xEd6a59A7C1D5a88b7cb5eb877A7A6078A7e801C7",
          "0xeFC05B0D0C8bE8D4Cb3a220ef582E9f7E6FBCd00",
          "0xC7B169b108c5e75991C520AEA97140534291C81D",
          "0x04Be52434EB64aDdF373137310551ac42013677c",
          "0xBE8C93a8C18AF63aAB449994AFAc13E71240ccC4",
          "0xf813773eBDD4759c1B780d745081f046A5B776fB",
          "0x7F26C34Ed10bF66602009231bBFF24f2f84e9270",
          "0x4abd7276C53279b3aBFFF2B5D8A47c0AFc84833B",
          "0x3e1A12a6019ee26418F22B656926fE38F5e58C5f",
          "0x7A27A4D91231aCB3282b410Cc784517B417FA0DA"
        ],
        "snapshot": 13269966
      }
    ],
    "schema": null,
    "about": ""
  },
  "occ-stake-of": {
    "key": "occ-stake-of",
    "author": "OccamFi",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "occ-stake-of",
          "params": {
            "stakingContractAddress": [
              "0xeBC86Fb12ab0fFaC6CBcaFCe2f049BfE7eFAda0D"
            ],
            "symbol": "OCC",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0xa95f8f54dc55281852b5c972e4874264c7b5d3de",
          "0x77752aE2Cb765BDd09568E69B740a2276187F052",
          "0xd3aecf9e0856822bd320873e905ae9f78a2977e7",
          "0x2C2ADD1C863551A0644876be227604C8E458dD7e",
          "0x8af630f68dd02c589b9449158455735814b452a3",
          "0x252e2e0e4cc5bd7391acb47634fb6bb382d08586",
          "0x4bf455074e67848dc7e1c55b45a32aafca2e9c9c",
          "0xb623964e5761C1b04A4a46b9aE8D1809dEFa7efB"
        ],
        "snapshot": 12381658
      }
    ],
    "schema": null,
    "about": "# occ-stake-of\n\nThis is the OCC staking strategy, it returns the OCC staking balances of the voters.\n\nHere is an example of parameters:\n\n```json\n{\n  \"stakingContractAddress\": [\n    \"0xeBC86Fb12ab0fFaC6CBcaFCe2f049BfE7eFAda0D\"\n  ],\n  \"symbol\": \"OCC\",\n  \"decimals\": 18\n}\n```\n"
  },
  "holds-tokens": {
    "key": "holds-tokens",
    "author": "lightninglu10",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "holds-tokens",
          "params": {
            "symbol": "XYZ",
            "tokenAddresses": [
              {
                "address": "0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7",
                "network": "1",
                "decimals": 0,
                "minBalance": 0
              },
              {
                "address": "0xc34cbca32e355636c7f52dd8beab0af2396ebd79",
                "network": "137",
                "decimals": 0,
                "minBalance": 0
              }
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0xC5e38233Cc0D7CFf9340e6139367aBA498EC9b18",
          "0x2009a752a50D3CDe486d7b5921944377B729E747",
          "0x7b15e6c439b27a553b65a9904ce571da6691a0fb",
          "0x8d2f3a76a76f055d62a931678ab16b042e7badeb",
          "0xEDe64a571CFe98B936271B935a955620f387E05A"
        ],
        "snapshot": 13317369
      }
    ],
    "schema": null,
    "about": "# holds-tokens\n\nThis strategy return the balances of the voters for a specific ERC20 or ERC721 and maps them to the number of votes that voter gets based on holding a set of tokens. on multiple networks\n\n## Parameters\n\nSame as [erc20-with-balance](https://snapshot.org/#/strategy/erc20-with-balance) strategy. except that we have to pass the `network` parameter. This is the network that the contract is deployed on. also can pass multiple params into `tokenAddresses` array (Check the example below).\n\n> Note: minBalance is exclusive. For example if you pass `1`, balance should be more than `1`\n\nHere is an example of parameters:\n\n```json\n{\n \"tokenAddresses\": [\n  {\n   \"address\": \"0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7\",\n   \"network\": \"1\",\n   \"decimals\": 0,\n   \"minBalance\": 1\n  },\n  {\n   \"address\": \"0xc34cbca32e355636c7f52dd8beab0af2396ebd79\",\n   \"network\": \"137\",\n   \"decimals\": 0,\n   \"minBalance\": 1\n  }\n ]\n}\n```\n"
  },
  "loot-character-guilds": {
    "key": "loot-character-guilds",
    "author": "jordanmessina",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Loot Character Guild ",
        "strategy": {
          "name": "loot-character-guilds",
          "params": {
            "symbol": "LOOT",
            "lootAddress": "0xFF9C1b15B16263C61d017ee9F65C50e4AE0113D7",
            "lootCharacterGuildsAddress": "0xBbb55b52d2186C4dd99cDba7AF483459E517BE3d",
            "guildId": 5
          }
        },
        "network": "1",
        "addresses": [
          "0x08D816526BdC9d077DD685Bd9FA49F58A5Ab8e48",
          "0xF4b0498e71485717f6f9b6117672C19A0dbA5100",
          "0x8e246c8c37c82D3F89726773e58b43BAa8614214",
          "0x9Ed0318B4d343390B47C92FE46E35f28D2edcffc",
          "0x808700A1eDFEDa468d34d08cA8a0397bad2298d9",
          "0x87E386cEdb82CF8F080b3505ADaE1eF699e65057",
          "0x628061dE62c327A8be104f92746c56645995eAe7",
          "0x6c0D14C67CCa5E944f2eB168EC4196e2c4658068",
          "0xc0Bbc17910BafCAB69F6bEF8574C7625134df13f",
          "0xc887fAdC6baAa8cD234d9104A65b37265522b024",
          "0x7896062Cbee5B512ea2b5A6182d1c89438aaeE5f",
          "0x2d639D4A4D471FB54dA6d88dEf2d263acF3108A8",
          "0x06Ac1F9f86520225b73EFCe4982c9d9505753251",
          "0x38Cb027d65AaF2d3f401Ff9bD0599AFe86F1b627",
          "0x7CcaCab19ee2B7EC643Ef2d436c235A5c1E76Fa9",
          "0xF090DC8364cdA35c8E911336026BCe394539c9D3",
          "0xA153dcFE203509CF292634Ac3BcaF5Ca1D4CC517",
          "0x92572aae1c9C4BA92011a6A56579c79dBb272Cd8",
          "0x9c88e9bd9daE5Cc0a7A2034DB653D668a3b0b3F9",
          "0xf27822E9AB6DA97481E6E1533a2314eDC44F41E4",
          "0x84AB05F09B5ad3a1de6941FBf29BdF77CC7E2100",
          "0x8A7f7C5b556B1298a74c0e89df46Eba117A2F6c1",
          "0x80778937998a7b9D80Ae116918242065eD1a1d22",
          "0xB62E9f2e6babC43F2e0E38FcF951Dc546706B191",
          "0x21316179A55c963171f55A154c11Ce7314d9DAa6",
          "0x47e5C9e909133DbB1d705286842d2DE1f89536A3",
          "0x27824f56bb0e722bDe0a6B1b28dFb2FE9D4285ca",
          "0xff563d18B082aE0EE76bce29bCbc7FD86Dc0Eb9A",
          "0xE0BD70803045a9D877D39bb3Cd44a5d59a378663",
          "0x06B3564ef920FD55f19f95EB7114EAb3eE83A192",
          "0x7e9045bE45bAD250d06416a877f00320971c97E0",
          "0xba818e7F6b208F5A4f7Cf282A9248D221144E4e5",
          "0x96774B92C7D0CC97a83AF06Ce68195Fa68590270",
          "0x360cbbdd4e42683Ba40Ee6A9BDAb3E4Dd6f27087",
          "0x4b2AcB5A7FCfeE322Ce3Cd8344Ea466954Fde7dB",
          "0x7250982aee4667254a47916Dc4523537EE59fe8B",
          "0xbbd75dB64A9674D35DAD240811bA0880AD0E106F",
          "0xd6CB70a88bB0D8fB1be377bD3E48e603528AdB54",
          "0xC6c41119Af1e0840357245c66baAf0e21B694D4d",
          "0x84Ead439d77BA323C40b615283AED434180df2D0",
          "0x521CcFf42a8277b6b5D29c0AcbEC2Cdd3Af9C332",
          "0x6F1B12a415E035eEbDc8559130eA8bdb96ADd48c",
          "0x8be902e0873a2a8bf8a4218e75c7e2b4419d0d04",
          "0x23324ed44904260fE555B18E5Ba95C6030B9227d",
          "0x1668c9725e27Bf5943bBD43886E1Fb5AFe75c46C",
          "0xfB843f8c4992EfDb6b42349C35f025ca55742D33",
          "0x5793b2C0B3bf7C9cf9e73C24EE9F7230bE057d08",
          "0x4cFde2011629A443A77F6a9137186d6B36C39938",
          "0x7e023390133398fEA29AB8Fa950C3D3e36939E08",
          "0x1e341Aa44c293d95d13d778492D417D1BE4E63D5",
          "0x512fce9B07Ce64590849115EE6B32fd40eC0f5F3",
          "0x957291Eae3d53b5A7c0A6BF2C0F08de5d87b14f6",
          "0xA351a4FffCeed60b6d4351e1B20C55E3A6fB5503",
          "0x175554B30E4dc15F0875A1ee00F137eac9461a46",
          "0x8404EFA98a4e129855c200FC4e90c257078d9eD3",
          "0xB670768c72510493AC1Fd2B9AfF66DE1F669E05E",
          "0xaFbc3F98EEDB5f9A25a4AB2232d1346612efE77C",
          "0x089FCE8bE711CABc806d69B1d0d5aebd52A06455",
          "0xDBfb45ac11CE31757E09e96e0820831C6cff37af",
          "0x08F78C6228879B2839fcF84eD3c22E9a30A5A2D3",
          "0x832668b0fc7D007f5C40375457ce147D6235cA9D",
          "0x380E5b655d459A0cFa6fa2DFBbE586bf40DcFd7F",
          "0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00",
          "0xA494876207Ae80D8669Dd347Fe11Fadae31c48E7",
          "0x1ec9503BbdaD721EF3aD485b4B14Ce0671Dc9925",
          "0xBF8AfA76BcC2f7Fee2F3b358571F426a698E5edD",
          "0x87D9C2D9990A9f3A18F1377Ff20d9945F9eB3792",
          "0x8e3e4f8884C093cc2df3BC4D49b3Ab3d558b4e13",
          "0x32Ce58aa25161e9D53010cE33295A05037F6e69c",
          "0x003F35595dce3187B4Fff2B5A2c4303f7158208a",
          "0x74B78e98093F5B522A7eBDAc3B994641cA7c2b20",
          "0x5069304255FF9b5f0d57b59F79A8865b4e622279",
          "0x392027fDc620d397cA27F0c1C3dCB592F27A4dc3",
          "0x5090c4Fead5Be112b643BC75d61bF42339675448",
          "0xf5f0B993d69e3E6480f7F5c2531154eCf60278cF",
          "0xD9Ec0058d49254E8E7e8f021A056865C3a0A2C0b",
          "0xeB369F468d91E575fD30712a0ABfcF99FdF75e30",
          "0x14A03CA8740A0044E63d3Bb0432540d9509473d1",
          "0xc6025ED82cf2f3d87595195Ed6a1ae1a5a94Ecee",
          "0xd6464a34847188540EB0860d660866F732C38744",
          "0xa1122D9fbe7f60fE8e328FE5Bb1534D72fBD3B59",
          "0x2Afc91a1c9a94dCDabc5dDe6A7ab810668C49583",
          "0xF73FE15cFB88ea3C7f301F16adE3c02564ACa407",
          "0x4654F56a64301b9b582F843F97332D96Ead11FF8",
          "0x3aDFA4AB755E96b84cC7a00F8f375D7A4A203E8a",
          "0x98733a6517cDb5da94a2115d5AddD1C386f7Ef8f",
          "0xD5520354A956A736F67c3F03c7755Ff0486D9F0e",
          "0x78AB747D6675AB1dfeE31D0BfB6862124565AefC",
          "0xB0623C91c65621df716aB8aFE5f66656B21A9108",
          "0x8b7a5B22175614EE194E9e02e9fE0A1B5414C75E",
          "0x649f69CCd077Da03dFb11f4b1daAb4B625f5E9A3",
          "0x9623A7dfb605f693C9725278cF78bd2F53F0D407",
          "0xa4FBcd39Dc0E8c6B1c3d89751fF86855d8F5b98d",
          "0x9433601511580b7bd3F875C57E5a82Bf9A6a5997",
          "0x21631d18d9681D4fFDd460FC45fA52159fCd95c8",
          "0x1eE199C1832D4cFd075ad2708FEB75fC8c80b8C6",
          "0x52932f5B2767D917c3134140168f2176C94E8B2C",
          "0x1cC1983396E55e925b777A0D70dFe8b56EdEE942",
          "0xa8dd3c464c57881ee0411b7a5Ee9aC5430E83122",
          "0xdBdc061Ff54314f0A394f6F850fF2415c8D1DF1b",
          "0xE1D49F083207eEed71414c0AA28236e97b1793c0",
          "0xC823127743196981af46bC542028C3578e674C4e",
          "0x9E9EF0B615d4aF21C01121273498Ad5DEB5A3785",
          "0xC8B810Fe39952AA65CA5A9387a3546B9b6bF5780",
          "0xb61193014Fc983b3475d6bF365B7647c2E52b713",
          "0x34978fAf3A9f469da7248d1365Ddf69Ac099588C",
          "0x2C90f88BE812349fdD5655c9bAd8288c03E7fB23",
          "0x1dBA5711CC83D2F6502eFBfeBAc48B14714cCE2e",
          "0x18C2f8a7e2696d28661D59785B18C6794cd8D8e1",
          "0xdCf809BBa1d9ee75c6991f1E2974163cF2555418",
          "0x080d222fc30aC35f52d169faa9062Ec29D13d187",
          "0x138d65D1ca31A707E06ef148707b7Cee5f85E11E",
          "0xF654Cbd0d7B1765091b035BBB0205Dd4b6b49C7F",
          "0x03B79C0C1487a68AeabD9AA4ce779DaD77855F52",
          "0x0fb95b8C2d19F1Cbd2dfe9ECB3BdF992cB9E8b92",
          "0x091e2f9422A22a09E478455Fd59bE8CB6ee56463",
          "0xA5Cc7F3c81681429b8e4Fc074847083446CfDb99",
          "0xda6BB8C5507aff8C9eD9d787c1e8A82A0a79d629",
          "0xfB33ad9bBA1612Fd9deFb207cdA9a56263b55743",
          "0x596E7fe8a3FD3AB4dEdC227c848569a0265828Ff",
          "0x1015F376319B48C16078339534Fb9D83F75Bf15C",
          "0xAf751f153503D726FdAce94558FF4974CC688bDc",
          "0x8a32Af4AfFD816978C2Fdfa7C08c27681d05d4Fe",
          "0x40415c1c0E7a8ff3E184b51A94a2Fc5B92Df9434",
          "0xd30874ca82901D41FE66deD3012909D81924a0B8",
          "0x890F1815a0935B10126bcfe6Dd48CE37eD3064ed",
          "0xbbe3aba57ac2a5dc36eBb9769fCbD53FD5153F93"
        ],
        "snapshot": 13315111
      }
    ],
    "schema": null,
    "about": ""
  },
  "comp-like-votes-inclusive": {
    "key": "comp-like-votes-inclusive",
    "author": "d1ll0nk",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Comp Like Votes Inclusive",
        "strategy": {
          "name": "comp-like-votes-inclusive",
          "params": {
            "address": "0x86772b1409b61c639EaAc9Ba0AcfBb6E238e5F83",
            "symbol": "NDX",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x0000006daea1723962647b7e189d311d757Fb793",
          "0x7e388444731C38189C0685F6D98605107fF59282"
        ],
        "snapshot": 13340820
      }
    ],
    "schema": null,
    "about": "# Comp-like Votes Inclusive\n\nUses comp-like voting delegation to assign scores while also crediting accounts for non-delegated token balances."
  },
  "mstable": {
    "key": "mstable",
    "author": "chrisjgf",
    "version": "0.0.1",
    "examples": [
      {
        "name": "mstable",
        "strategy": {
          "name": "mstable",
          "params": {
            "symbol": "MSTABLE",
            "stkBPT": "0xefbe22085d9f29863cfb77eed16d3cc0d927b011",
            "stkMTA": "0x8f2326316eC696F6d023E37A9931c2b2C177a3D7"
          }
        },
        "network": "1",
        "addresses": [
          "0x2ee8670d2b936985d5fb1ee968810c155d3bb9ca",
          "0x19f12c947d25ff8a3b748829d8001ca09a28d46d"
        ],
        "snapshot": 13236086
      }
    ],
    "schema": null,
    "about": "# mstable\n\nCalls getVotes() on both the stkMTA and stkBPT contracts, these balances are then summed to generate a users vMTA balance.\n\n## Examples\n\n```JSON\n{\n  \"strategies\": [\n    {\n      \"name\": \"mstable\",\n      \"params\": {\n        \"stkBPT\": \"0xefbe22085d9f29863cfb77eed16d3cc0d927b011\",\n        \"stkMTA\": \"0x8f2326316eC696F6d023E37A9931c2b2C177a3D7\",\n      }\n    }\n  ]\n}\n```\n"
  },
  "hashes-voting": {
    "key": "hashes-voting",
    "author": "brennanfife",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example Hashes votes query",
        "strategy": {
          "name": "hashes-voting",
          "params": {
            "address": "0xD07e72b00431af84AD438CA995Fd9a7F0207542d",
            "symbol": "HASH"
          }
        },
        "network": "1",
        "addresses": [
          "0xecece69f68bde56e7d53bd77d84da21a386bae0f",
          "0x6dfc724df608c15027772f770f00b2b7a4040976"
        ],
        "snapshot": 13366241
      }
    ],
    "schema": null,
    "about": ""
  },
  "hashflow-vehft": {
    "key": "hashflow-vehft",
    "author": "gxmxni-hashflow",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Ethereum Query",
        "strategy": {
          "name": "hashflow-vehft",
          "params": {
            "hftVault": "0x15725391A37A5fFeB04F79cf25DA8460A3f068F6",
            "nftContract": "0xb99E4E9b8Fd99c2C90aD5382dBC6ADfDfE3A33f3"
          }
        },
        "network": "1",
        "addresses": [
          "0x602bcC6BF7cfd77048AB7cA4113382ef269362f2",
          "0x2EE3300306c156948947a9c63959e89d9d60824F",
          "0xAF8324Ab53229651E4C8Dea252a554AacA6f9577",
          "0x6D2c2D57d49B015847a4A48ebB143138a5d7A455",
          "0x41982604fDDce37bf04624A6F4A511f94043DEE0",
          "0x34E1AE9a9b3F8e6B648A0e8952cf6C553d65fd62"
        ],
        "snapshot": 16402454
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "hftVault": {
              "type": "string",
              "title": "HFT Staking Vault Address",
              "examples": [
                "e.g. 0x15725391A37A5fFeB04F79cf25DA8460A3f068F6"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "nftContract": {
              "type": "string",
              "title": "NFT Contract Address",
              "examples": [
                "e.g. 0xb99E4E9b8Fd99c2C90aD5382dBC6ADfDfE3A33f3"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            }
          },
          "required": [
            "hftVault",
            "nftContract"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# hashflow-vehft-v1\n\nThis strategy is used to account for the veHFT power that the Hashflow\nstaking vaults yield to the user.\n\nThe voting power in the Hashflow DAO is a function of three parameters:\n\n- the amount of HFT staked\n- the lock duration (normalized to 4 years between 0 and 1)\n- ownership of a Creation's Coffer NFT\n\nThe formula is as follows:\n\n[HFT amount] x [normalized time lock] x [1.1 if an NFT is owned]\n\nHere is an example of parameters:\n\n```json\n{\n  \"hftVault\": \"0x15725391A37A5fFeB04F79cf25DA8460A3f068F6\",\n  \"nftContract\": \"0xb99E4E9b8Fd99c2C90aD5382dBC6ADfDfE3A33f3\"\n}\n```\n"
  },
  "aavegotchi-wagmi-guild": {
    "key": "aavegotchi-wagmi-guild",
    "author": "programmablewealth",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Voting power based on aavegotchis equipped with wagie wearables for the WAGMI Warriors Guild",
        "strategy": {
          "name": "aavegotchi-wagmi-guild",
          "params": {
            "tokenAddress": "0x86935f11c86623dec8a25696e1c19a8659cbf95d",
            "symbol": "GOTCHI"
          }
        },
        "network": "137",
        "addresses": [
          "0x26cf02F892B04aF4Cf350539CE2C77FCF79Ec172"
        ],
        "snapshot": 20122217
      }
    ],
    "schema": null,
    "about": ""
  },
  "polis-balance": {
    "key": "polis-balance",
    "author": "eabz",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Polis Balance",
        "strategy": {
          "name": "polis-balance",
          "params": {
            "validators": "0x636278bAd2D76AAC5E9bAcfd185687c8901063E9",
            "staking": "0xf69e9147d88de50c4bd42f9b41cbce00841cc2dd",
            "symbol": "POLIS",
            "decimals": 18
          }
        },
        "network": "333999",
        "addresses": [
          "0xed86b5962a1a73afad7181f0b3e427a93ce8e552",
          "0x78d60a7ccd14f637bc4637e4cfd71e39b38d6614",
          "0x769354a23fcFEa505F49705cd4085C4e69aA7eCe",
          "0x17286e3fBA160b68803eeA3C70716A89B2e62e49"
        ],
        "snapshot": 640029
      }
    ],
    "schema": null,
    "about": ""
  },
  "mutant-cats-stakers-and-holders": {
    "key": "mutant-cats-stakers-and-holders",
    "author": "69hunter",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Mutant Cats Stakers and Holders",
        "strategy": {
          "name": "mutant-cats-stakers-and-holders",
          "params": {
            "staking": "0xd09656a2EE7E5Ee3404fAce234e683D3337dA014",
            "token": "0xaAdBA140Ae5e4c8a9eF0Cc86EA3124b446e3E46A",
            "symbol": "MUTCATS",
            "decimals": 0
          }
        },
        "network": "1",
        "addresses": [
          "0xcb5C730A85795b20C1fdB543B64B2ED164333803",
          "0x4252a493899D1E2D1573Ff4084446C095C75055E"
        ],
        "snapshot": 13439719
      }
    ],
    "schema": null,
    "about": "# Mutant Cats stakers and holders strategy\n\nThis strategy return the balances of the voters for Mutant Cats project from both staking pool and ERC721 NFT.\n\n## Accepted options\n\n- **staking:** Mutant Cats staking pool address.\n\n- **token:** Mutant Cats ERC721 NFT address.\n\n## Examples\n\n```JSON\n[\n  {\n    \"name\": \"Mutant Cats Stakers and Holders\",\n    \"strategy\": {\n      \"name\": \"mutant-cats-stakers-and-holders\",\n      \"params\": {\n        \"staking\": \"0xd09656a2EE7E5Ee3404fAce234e683D3337dA014\",\n        \"token\": \"0xaAdBA140Ae5e4c8a9eF0Cc86EA3124b446e3E46A\"\n      }\n    },\n    \"network\": \"1\",\n    \"addresses\": [\n      \"0xcb5C730A85795b20C1fdB543B64B2ED164333803\",\n      \"0x4252a493899D1E2D1573Ff4084446C095C75055E\"\n    ],\n    \"snapshot\": 13439719\n  }\n]\n```\n"
  },
  "razor-network-voting": {
    "key": "razor-network-voting",
    "author": "razor-network",
    "version": "0.1.0",
    "examples": [
      {
        "name": "razor-network-voting",
        "strategy": {
          "name": "razor-network-voting",
          "params": {
            "symbol": "RAZOR"
          }
        },
        "network": "278611351",
        "snapshot": 434071,
        "addresses": [
          "0xf5ad93418e727607bfea3adf5c056e056d0236a7",
          "0x7ee4e7a1403db07c6908ef29c00f20270a28fd2d",
          "0x5faf079b1CD8e3Cd526FDbbf3d4e4179ddE476AC",
          "0x24566839d381e2f5a5d8f5bf880354f0851cbb76",
          "0x7af34d14524104ec65b882b7e31b022eebc88936",
          "0x66851befbec4f6acf4bfd2371dab3dfe45f2b920",
          "0x35ed54562ddaddd7dd699cdf92128c1d9c1a1529",
          "0x13E5f89515B0C781B7118b5dAEEde7Da4BCf9d7b",
          "0x13E5f89515B0C781B7118b5dAEEde7Da4BCf9d7b"
        ]
      }
    ],
    "schema": null,
    "about": ""
  },
  "mcb-balance-from-graph": {
    "key": "mcb-balance-from-graph",
    "author": "yangzhao28",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "mcb-balance-from-graph",
          "params": {
            "symbol": "MCB",
            "graph": "https://api.thegraph.com/subgraphs/name/renpu-mcarlo/mcb-balance"
          }
        },
        "network": "1",
        "addresses": [
          "0xfdf6c6096e70799e53d6172d32c6c3b6f3d1f38f",
          "0xb796a0868a8fe1f93df3ea856daa6e169f7c37db",
          "0x0cefe050ff97872c4390bdf28cd87822185ab266",
          "0xe3124B1F5B7c793B6B4C97aFcAD7C6df6c1A9bc9"
        ],
        "snapshot": 2393677
      }
    ],
    "schema": null,
    "about": "This is simple strategy to use balance from graph instead of archive node.\n\nThe configuration would be like this:\n\n```json\n{\n    \"symbol\": \"MCB\",\n    \"graph\": \"the api address of your graph\",\n    \"decimals\": 18 \n}\n```\n\nThe schema of the graph project is:\n\n```\nAccount {\n    id: ID!\n    balance: BigDecimal!\n}\n```\n\nAs a example, here is a the graph project for MCB token: [mcb-balance](https://thegraph.com/hosted-service/subgraph/renpu-mcarlo/mcb-balance).\n\nAnd the `decimals` is an optional field. Ignore it if you have already handle it in graph, or set it to the exact decimals of the raw token balance."
  },
  "digitalax-genesis-contribution": {
    "key": "digitalax-genesis-contribution",
    "author": "onigiri-x",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Digitalax Genesis Contribution",
        "strategy": {
          "name": "digitalax-genesis-contribution",
          "params": {
            "symbol": "MONA",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x801e12b93a570930cb68ac29f3450bc5afd78350",
          "0x4702baa85c236d204230a439c72625cd014b17ea",
          "0xca11d10ceb098f597a0cab28117fc3465991a63c",
          "0xa48f120e2a69c7848f7e841412fe494a5fddaede",
          "0x294803520a1e7b671c105c8a3d94836f40b2b557",
          "0xfaa1eb7e8d449a4b065f90028170108f54feb877",
          "0x033cd8e9e400ac9d67375a08ff1fffb91e8100c0",
          "0xd854d3800e0ce85273789a0cc70215d415a8c945",
          "0x09e0ba2596677a84cc3b419c648ed42d47a42d6f"
        ],
        "snapshot": 13513882
      }
    ],
    "schema": null,
    "about": "# DIGITALAX Genesis Contributions\n\nThis is the DIGITALAX Genesis Contribution\n\nHere is an example of parameters:\n\n```json\n{\n  \"symbol\": \"DXG\",\n  \"decimals\": 18\n}\n```\nIf you use decimals: 0, it will show up in wei format on the scores.\n"
  },
  "digitalax-lp-stakers": {
    "key": "digitalax-lp-stakers",
    "author": "onigiri-x",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "digitalax-lp-stakers",
          "params": {
            "address": "0x275f5Ad03be0Fa221B4C6649B8AeE09a42D9412A",
            "symbol": "MONA"
          }
        },
        "network": "1",
        "addresses": [
          "0xd9854F3ab29A69c89Cc57fb675C48Ecd69b61Aec",
          "0xa59ba4eebfbd28e5a61dea4b9bcf358320e8d53b",
          "0xaa3e5ee4fdc831e5274fe7836c95d670dc2502e6",
          "0xea41cd3f972db6237ffa2918df9199b547172420",
          "0xbfd5493b94ead64d3dcada5700dbee9409acc345"
        ],
        "snapshot": 13526042
      }
    ],
    "schema": null,
    "about": ""
  },
  "digitalax-mona-stakers-matic": {
    "key": "digitalax-mona-stakers-matic",
    "author": "onigiri-x",
    "version": "0.1.0",
    "ETH_IN_WEI": 1000000000000000000,
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "digitalax-mona-stakers-matic",
          "params": {
            "address": "0xF795c2abB0E7A56A0C011993C37A51626756B4BD",
            "symbol": "MONA"
          }
        },
        "network": "137",
        "addresses": [
          "0xba658ae386566745ee8b661e148460b0ece00144",
          "0xbff466b48073bb1ffda6c644f4c0cdb61287c75f",
          "0x5359ed6ef235be8ef0f25ad0a5c0b521bcf8d663",
          "0x71284ddcaba20f2386c09b9ccd3ad1d369bf4e30",
          "0x03ea64a5ced21e2cccfaea0aec283d0a0afe9424"
        ],
        "snapshot": 22757476
      }
    ],
    "schema": null,
    "about": ""
  },
  "digitalax-lp-stakers-matic": {
    "key": "digitalax-lp-stakers-matic",
    "author": "onigiri-x",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "digitalax-lp-stakers-matic",
          "params": {
            "address": "0xF795c2abB0E7A56A0C011993C37A51626756B4BD",
            "symbol": "MONA"
          }
        },
        "network": "137",
        "addresses": [
          "0xb9f1942edb0e0b9fdf77cb85397e75437aa37999",
          "0xd4c4f5e108d09f4383f431d143e75ecabb703f2a",
          "0x2f55acce6958d390dc32606230b6bda2dfec2102"
        ],
        "snapshot": 22757476
      }
    ],
    "schema": null,
    "about": ""
  },
  "colony-reputation": {
    "key": "colony-reputation",
    "author": "colony",
    "version": "0.1",
    "examples": [
      {
        "name": "Colony Reputation",
        "strategy": {
          "name": "colony-reputation",
          "params": {
            "colonyAddress": "0x51A1fC3f8B1D46e66691C1a7F1A84C9b863dE8c2",
            "colonyNetworkAddress": "0x78163f593D1Fa151B4B7cacD146586aD2b686294",
            "domainId": 1,
            "symbol": "CLNY-REP"
          }
        },
        "network": "100",
        "addresses": [
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x8d07D225a769b7Af3A923481E1FdF49180e6A265",
          "0x8f60501dE5b9b01F9EAf1214dbE1924aA97F7fd0",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x17ea92D6FfbAA1c7F6B117c1E9D0c88ABdc8b84C",
          "0x00Da8d2F207E34B9523798FaF36fC9ff04cA9588"
        ],
        "snapshot": 18701900
      }
    ],
    "schema": null,
    "about": "# colony-reputation\n\nUses reputation in a colony as voting power.\n\nHere is an example of parameters:\n\n```json\n{\n  \"colonyAddress\": \"0x51A1fC3f8B1D46e66691C1a7F1A84C9b863dE8c2\",\n  \"colonyNetworkAddress\": \"0x78163f593D1Fa151B4B7cacD146586aD2b686294\",\n  \"domainId\": 1\n}\n```\n"
  },
  "digitalax-mona-quickswap": {
    "key": "digitalax-mona-quickswap",
    "author": "onigiri-x",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Digitalax MONA LP on Quickswap",
        "strategy": {
          "name": "digitalax-mona-quickswap",
          "params": {
            "symbol": "MONA",
            "address": "0x82f1676ef298db09da935f4cb7bd3c44fb73d83a"
          }
        },
        "network": "137",
        "addresses": [
          "0x0dcdc99c8f20c8825cc906dbbafe72f15e6ebcf4",
          "0xb98f29ffff030efd58e75a625d1f6dca58a49bfa",
          "0x806ef73ac66c4b669f2ba1403c770a2c503f6764",
          "0xaa3e5ee4fdc831e5274fe7836c95d670dc2502e6",
          "0x4879712c5d1a98c0b88fb700daff5c65d12fd729"
        ],
        "snapshot": 20828135
      }
    ],
    "schema": null,
    "about": "# DIGITALAX MATIC Stakers on Quickswap\n\nThis is the DIGITALAX MONA value of LP held for stakers on quickswap\n\nHere is an example of parameters:\n\n```json\n{\n  \"symbol\": \"MONA\",\n  \"address\": \"0x82f1676ef298db09da935f4cb7bd3c44fb73d83a\"\n}\n```\n\nThere are two pools that are currently supported.\n\nMona Quick Pool:\n` \"address\": \"0x82f1676ef298db09da935f4cb7bd3c44fb73d83a\"`\n\nMona USDT Pool:\n` \"address\": \"0x856ad56defbb685db8392d9e54441df609bc5ce1\"`\n"
  },
  "galaxy-nft-with-score": {
    "key": "galaxy-nft-with-score",
    "author": "alberthaotan",
    "version": "0.3.2",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "galaxy-nft-with-score",
          "params": {
            "symbol": "SUPA",
            "params": {
              "NFTCoreAddress": [
                "0x86835C3B8fA69f8F31C72477C7776A3B61dbAC92"
              ],
              "blacklistNFTID": [
                "4"
              ],
              "configs": [
                {
                  "name": "Basic",
                  "cumulative": false,
                  "votingPower": 1
                },
                {
                  "name": "SuperUMAn",
                  "cumulative": false,
                  "votingPower": 10
                },
                {
                  "name": "UMAster",
                  "cumulative": false,
                  "votingPower": 20
                },
                {
                  "name": "Alumni",
                  "cumulative": false,
                  "votingPower": 1
                }
              ]
            }
          }
        },
        "network": "137",
        "addresses": [
          "0x31A4C53BE2356b09220D348508B97Ed9b26a6c30",
          "0x69D0341d380a1229f4751a0A721345dBc716586C",
          "0xe5fF2C80759db9408dC9fD22b155b851Cd5aAA94",
          "0xBaE38Bf54f2aA0e6159f3d9B656300f61DBd2ED3",
          "0x5924EB6A482CeA85e23403E448257FbE5c58A9ed",
          "0xD02BAE47fD93325fd0cc3d660B73D8f93C4D7B5E",
          "0xfDAc618DDB79f77eb2Ea5c52b7c50f8f728DAFce"
        ],
        "snapshot": 26049784
      }
    ],
    "schema": null,
    "about": ""
  },
  "galxe-loyalty-points": {
    "key": "galxe-loyalty-points",
    "author": "HaynarCool",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Galxe users loyalty points",
        "strategy": {
          "name": "galxe-loyalty-points",
          "params": {
            "symbol": "PTS",
            "space_url": "https://galxe.com/Galxe/campaigns",
            "snapshot_id": "chm75g3gm3qfltgb9av0"
          }
        },
        "network": "137",
        "addresses": [
          "0xC229c465E08C4bbE5743B36F321A677D8a398062",
          "0x447D24B00937BCc3fE5768c828fb2fae52c3e8C5",
          "0x498d038C3F0aFA27D80B4A82e76dcEf5A1dE7840",
          "0xfDAc618DDB79f77eb2Ea5c52b7c50f8f728DAFce"
        ],
        "snapshot": 1
      }
    ],
    "schema": null,
    "about": "# Grant Voting Power with Galxe's Loyalty Points\n\nWith Galxe’s Loyalty Point System, there are a number of strategies you could utilize to reward your community. Our “galxe-loyalty-points” strategy on [Snapshot.org](http://Snapshot.org) is especially designed to accommodate projects that don’t issue ERC-20 tokens or NFTs. By using Galxe Loyalty Points, you can easily reward your contributors with voting power on your proposals.\n\nGalxe leverages the [Snapshot](https://snapshot.org/#/) platform for Loyalty Points voting, which offers a simple and secure way to vote on-chain. If you’re not familiar with Snapshot, check out their documentation on the [home-snapshot](https://docs.snapshot.org/) to get started. You can seamlessly integrate Galxe Loyalty Points to let your most loyal community members to vote on gated Snapshot proposals.\n\nFor testing purposes, we’ve provided a [playground here](https://snapshot.org/#/playground/galxe-loyalty-points) for you to try things out!\n\nHere’s how to set it up:\n\n1. Access your Snapshot Space admin and select the “galxe-loyalty-points” strategy.\n2. Since your Galxe Loyalty Points are not tied to any specific chain or snapshot yet, pick whichever chain and snapshot you’d like for testing.\n3. Set up the strategy parameters accordingly.\n   ```\n   {\n   \"symbol\": \"PTS\", // Voting power unit shows in proposal\n   \"space_url\": \"https://galxe.com/Galxe/campaigns\", // Galxe space url\n   \"snapshot_id\": \"chm75g3gm3qfltgb9av0\"\n   }\n   ```\n4. Input some addresses to test the voting power of each address, and you’re good to go!\n\nAt Galxe, we believe in the power of community, decentralized decision-making, and blockchain technology to drive innovation. With Galxe Loyalty Point System and voting strategy, we’re working to make decentralized decision making more accessible and user-friendly for everyone.\n\n### About Galxe\n\nGalxe is the leading platform for building web3 community. With over 30 million users, Galxe has propelled the growth of Optimism, Polygon, Arbitrum, and more than 1800 partners with reward-based loyalty programs. Start your campaign today at [galxe.com](http://galxe.com/)!\n"
  },
  "gatenet-total-staked": {
    "key": "gatenet-total-staked",
    "author": "usagar80",
    "version": "0.0.2",
    "examples": [
      {
        "name": "gatenet-total-staked",
        "strategy": {
          "name": "gatenet-total-staked",
          "params": {
            "address": "0xB53E4B0F128B231B8728525C616c26E0E59407A1",
            "symbol": "GATE",
            "decimals": 18,
            "subgraph": "https://api.studio.thegraph.com/query/17252/gatenet-cvm/v0.6.1",
            "minBalance": 10000
          }
        },
        "network": "4",
        "addresses": [
          "0xDC70958F76A639922823A8990Cb115B1816E5Ca0",
          "0x6646e8428B5029369392B15a6c2e4743bfBdb03a",
          "0xCF4a5c2aA6d35F8B1A52E4b336D192b3dEaae416",
          "0x3a61B9a71F9dc0182B1910EbB8315a12157Ff293",
          "0xa7a7aCC9b9f3eB7136b3F4e33E95fD68bf28c134",
          "0xE97D8f38746c2b6114e7AC7ae185750bDE2FF211",
          "0x8b273e4042387789bcAeC10dD33D91E7fe9F4179",
          "0xc100ADEC02c12fd0A205d589769851213dCc27dE",
          "0x96A1003B7FF56a2Df974B6A7e9ddC586f4761f77",
          "0x9BA85d16db13D25de2426d5eb42b55794B1efF22",
          "0xb60A6e063C15D79afBE1E389e52b3b2f2796aF8B",
          "0xbF33c13F3eBC9175ADcC1c4614c84f73288E9101",
          "0x66F06B8C449CF2c8ef2D3274738d2185491C6e35",
          "0xC48c8F74B4aeC9cC7669700CBfAF83fa7c2469e3"
        ],
        "snapshot": 11464656
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. UNI"
              ],
              "maxLength": 16
            },
            "address": {
              "type": "string",
              "title": "Contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ]
            },
            "subgraph": {
              "type": "string",
              "title": "Subgraph URL",
              "pattern": "[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?"
            },
            "minBalance": {
              "type": "number",
              "title": "Minimum token staked",
              "examples": [
                "e.g. 18"
              ]
            }
          },
          "required": [
            "address",
            "decimals"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# GATENet Total Staked Strategy\n\nA custom GATENet Total Staked Strategy to calculate total staked (voting power) for a wallet's address on the GATENet Staking Platform (https://staking.gatenet.io/).\n\n```json\n{\n  \"address\": \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n  \"symbol\": \"GATE\",\n  \"decimals\": 18,\n  \"minBalance\": 10000\n}\n```\n### Definitions\n- Address → Smart Contract Address\n- Symbol → Symbol of token\n- Decimals → Number of decinals of the token\n- Minimum Balance → Minimum balance / staked tokens required to vote. \nIf staked value is <= minBalance it will result 0 (zero) voting power.\n\n"
  },
  "vesper": {
    "key": "vesper",
    "author": "marcelomorgado",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Vesper",
        "strategy": {
          "name": "vesper",
          "params": {
            "token": "0x1b40183EFB4Dd766f11bDa7A7c3AD8982e998421",
            "symbol": "VSP",
            "votingPower": "0xD744320abd3bD4445Dc3C90C889391bD454D5B30",
            "decimals": 18,
            "blocksPerPeriod": 40320,
            "minBlock": 18569909
          }
        },
        "network": "1",
        "addresses": [
          "0xb92792552e590339A7DbF1E0D6114fbc7395c86b",
          "0xf4087b7AB24Bde9c445ddD0bc4DF257F81277214",
          "0x8b01d375e274213c860eF6ac013DBDd5286CD816",
          "0xDBC13E67F678Cc00591920ceCe4dCa6322a79AC7"
        ],
        "snapshot": 18569909
      }
    ],
    "schema": null,
    "about": ""
  },
  "thales": {
    "key": "thales",
    "author": "vpoklopic",
    "version": "1.0.4",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "thales",
          "params": {
            "symbol": "THALES",
            "decimals": 18
          }
        },
        "network": "10",
        "addresses": [
          "0x9f8e4ee788D9b00A3409584E18034aA7B736C396",
          "0x0D858351A5FB419C9A3760647900d2F7aD526c83",
          "0xcAc59F91E4536Bc0E79aB816a5cD54e89f10433C",
          "0x6dc88B231Cd04Dd1b1e525161162993F47140006",
          "0x935D2fD458fdf41B6F7B62471f593797866a3Ce6",
          "0x24e445fe7708Bf4bC2ae8d4df1694C98Af8BDE4F",
          "0x49be88f0fcc3a8393a59d3688480d7d253c37d2a",
          "0x27Cc4d6bc95b55a3a981BF1F1c7261CDa7bB0931"
        ],
        "snapshot": 111660236
      }
    ],
    "schema": null,
    "about": "# Thales Strategy\n\nA strategy for Thales governance.\nThe voting score is based on the THALES staking amount.\n\n## Examples\n\nHere is an example of parameters:\n\n```JSON\n{\n  \"symbol\": \"THALES\",\n  \"decimals\": 18\n}\n```\n"
  },
  "tech-quadratic-ranked-choice": {
    "key": "tech-quadratic-ranked-choice",
    "author": "pkretzschmar",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "tech-quadratic-ranked-choice",
          "params": {
            "address": "0x799844141C2627bD195c89c3A0c71341d0314c55",
            "symbol": "TECH",
            "decimals": 18
          }
        },
        "network": "100",
        "addresses": [
          "0xB22981bA3FE1De2325935c91a3B717168fB86714",
          "0xaa79B87DC8B046A5E4f7D03F1562D7fe5BF98737",
          "0x66dF5A7715C5D4AfbBFA52435c66aa20733be0d1",
          "0x7d547666209755FB833f9B37EebEa38eBF513Abb",
          "0x1d921dff757610FbDB0073479e12c0a07d382677",
          "0x826976d7C600d45FB8287CA1d7c76FC8eb732030",
          "0x839395e20bbB182fa440d08F850E6c7A8f6F0780",
          "0xC46c67Bb7E84490D7EbdD0b8ecDaca68Cf3823F4",
          "0xF8D1d34956cEa24718cf8687588D6FeDbc6d9AA6"
        ],
        "snapshot": 18983705
      }
    ],
    "schema": null,
    "about": "# tech-quadratic-ranked-choice\n\nThis strategy was create to allow TECH combine ranked choice voting with quadratic strategy. This strategy will apply squared root to the balance of the voters, making the power of decision spread to the edges.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0x799844141C2627bD195c89c3A0c71341d0314c55\",\n  \"symbol\": \"TECH\",\n  \"decimals\": 18\n}\n```\n"
  },
  "bsc-mvb": {
    "key": "bsc-mvb",
    "author": "alberthaotan",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "bsc-mvb",
          "params": {
            "symbol": "BSCDAO",
            "params": {
              "blacklistNFTID": [
                "1"
              ],
              "configs": [
                {
                  "name": "MVB Voting Badge - BSC Core Team Badge",
                  "cumulative": true,
                  "votingPower": 10
                }
              ]
            }
          }
        },
        "network": "56",
        "addresses": [
          "0x42d228f33C31aE390A3B023515ddE8F81f214067",
          "0x77e4CDF993a2F7A7973f38A5401A0E895B859366"
        ],
        "snapshot": 12580101
      }
    ],
    "schema": null,
    "about": ""
  },
  "coinswap": {
    "key": "coinswap",
    "author": "CoinSwap-Space",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example query Coinswap",
        "strategy": {
          "name": "coinswap",
          "params": {
            "address": "0x3bc5798416c1122BcFd7cb0e055d50061F23850d",
            "masterCSS": "0x3A0a988D680dBBB02DECBfd35F9E0676B4bEc292",
            "communityStake": [
              "0xa25EA2B60c1a1365f195Cfda61b9fb7Eb8fcC38B",
              "0x5Ca94e1b35C0a726E5431F66DBECDD2253cA6cb1",
              "0x29a888e301A9fF0f4420a115F61E6ad0750Db9dE"
            ],
            "cssLPs": [
              {
                "address": "0xfA8E0C0568edcDD3D9b12B48792a5B00018FdB57",
                "pid": 1
              },
              {
                "address": "0x2f32E2252a6979704F0f540b7988Fa8B8C36B292",
                "pid": 2
              }
            ],
            "symbol": "CSS",
            "decimals": 18
          }
        },
        "network": "56",
        "addresses": [
          "0xa327D4b88a23c75BdB74aeA0F8f6493584405ed7",
          "0x12d8E4C93949FEdfb798bd665dE99c47B8F4C8b0"
        ],
        "snapshot": 12664197
      }
    ],
    "schema": null,
    "about": "# Coinswap\n\nThis is the most common strategy, it returns the balances of the voters for a balances CSS token\nin Coinswap project(pools, farms, Liquidity, token).\n\nHere is an example of parameters:\n```json\n[\n  {\n    \"name\": \"Example query Coinswap\",\n    \"strategy\": {\n      \"name\": \"coinswap\",\n      \"params\": {\n        \"address\": \"0x3bc5798416c1122BcFd7cb0e055d50061F23850d\",\n        \"masterChef\": \"0x3A0a988D680dBBB02DECBfd35F9E0676B4bEc292\",\n        \"smartChef\": [\n          \"0x496a0227f7f16622650DDf2601B6842e845203C5\",\n          \"0xa25EA2B60c1a1365f195Cfda61b9fb7Eb8fcC38B\",\n          \"0x5Ca94e1b35C0a726E5431F66DBECDD2253cA6cb1\",\n          \"0x29a888e301A9fF0f4420a115F61E6ad0750Db9dE\"\n        ],\n\n        \"cssLPs\": [\n          {\n            \"address\": \"0xfA8E0C0568edcDD3D9b12B48792a5B00018FdB57\",\n            \"pid\": 1 \n          },\n          {\n            \"address\": \"0x2f32E2252a6979704F0f540b7988Fa8B8C36B292\",\n            \"pid\": 2\n          }\n        ],\n        \"symbol\": \"CSS\",\n        \"decimals\": 18\n      }\n    },\n    \"network\": \"56\",\n    \"addresses\": [\n      \"0x3a675f2fff053494aa0e9f753f912c4be314d1e7\",\n      \"0x2101e095244b4fd2ff228725faa692fd7261c074\"\n    ],\n    \"snapshot\": 9837410\n  }\n]\n\n\n```\n"
  },
  "dgenesis": {
    "key": "dgenesis",
    "author": "callikai",
    "version": "0.1.0",
    "examples": [
      {
        "name": "dGenesis Query",
        "strategy": {
          "name": "dgenesis",
          "params": {
            "symbol": "DGV"
          }
        },
        "network": "42161",
        "addresses": [
          "0xa52093DC50f2596abadb56dC643630E61944aBA9",
          "0x987c781938d0881306069ec9e3f7e914cf23c9fe",
          "0x3d9fe7337f067dd52d1dc8cb45490b1ad6c2f65b",
          "0x9ee73ec148b8f68da65598ebb497f1e7e9957219",
          "0xef764BAC8a438E7E498c2E5fcCf0f174c3E3F8dB"
        ],
        "snapshot": 3213870
      }
    ],
    "schema": null,
    "about": "# dGenesis Governance Strategy\n\nCalculates voting power based on staked and unstaked DGV tokens on the Arbitrum network."
  },
  "vote-power-and-share": {
    "key": "vote-power-and-share",
    "author": "jinanton",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Exemple of BaksDAO strategy",
        "strategy": {
          "name": "vote-power-and-share",
          "params": {
            "address": "0x300225DBb0a83c4706edDC5f6A34538964B86412",
            "powerType": "votingPower",
            "symbol": "BDV",
            "decimals": 18
          }
        },
        "network": "97",
        "addresses": [
          "0x96b6d32E9EF3ECdD7245F5F94C72099441e9D8c1",
          "0x2150Cb38ee362bceAC3d4A2704A82eeeD02E93EC",
          "0xdf2ff5946df21f818d5f67e62d22486ca470798e"
        ],
        "snapshot": 14188794
      }
    ],
    "schema": null,
    "about": "# Voting power or Share of total supply strategy\n\nAllows to get Voting power or Share of total supply from the token.\n\n## Strategy Parameters\n\n| Param              | Type   | Description                                                                                                                |     |     |\n| ------------------ | ------ | -------------------------------------------------------------------------------------------------------------------------- | --- | --- |\n| address            | string | The Ethereum address of the token to measure voting power or share of total supply from an address at a block. |     |     |\n| powerType          | string | Use `votingPower` for Voting Power or `shareOfTotalSupply` for Share of total supply                                       |     |     |\n|                    |        |                                                                                                                            |     |     |\n"
  },
  "math": {
    "key": "math",
    "author": "xJonathanLEI",
    "version": "0.2.2",
    "examples": [
      {
        "name": "Example simple contract call plus / minus",
        "strategy": {
          "name": "math",
          "params": {
            "symbol": "MATH",
            "operands": [
              {
                "type": "strategy",
                "strategy": {
                  "network": "1",
                  "name": "erc20-balance-of",
                  "params": {
                    "address": "0xdAC17F958D2ee523a2206206994597C13D831ec7",
                    "symbol": "USDT",
                    "decimals": 6
                  }
                }
              },
              {
                "type": "constant",
                "value": 6
              }
            ],
            "operation": "minus"
          }
        },
        "network": "1",
        "addresses": [
          "0x5C52cC7c96bDE8594e5B77D5b76d042CB5FaE5f2",
          "0x4D19C0a5357bC48be0017095d3C871D9aFC3F21d",
          "0xf59869753f41Db720127Ceb8DbB8afAF89030De4"
        ],
        "snapshot": 16847746
      },
      {
        "name": "Example nested query",
        "strategy": {
          "name": "math",
          "params": {
            "symbol": "MATH",
            "operands": [
              {
                "type": "strategy",
                "strategy": {
                  "network": "1",
                  "name": "erc20-balance-of",
                  "params": {
                    "address": "0x6b175474e89094c44da98b954eedeac495271d0f",
                    "symbol": "DAI",
                    "decimals": 18
                  }
                }
              },
              {
                "type": "constant",
                "value": 6
              }
            ],
            "operation": "multiply"
          }
        },
        "network": "1",
        "addresses": [
          "0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0xCba1A275e2D858EcffaF7a87F606f74B719a8A93",
          "0x35137867d87Bf78f8c4340C00872930CBb5f92e0",
          "0x2802247b16c302B811988Bf4Ac0e8DBFB85CDe36",
          "0x5ef01a9aB62f700BB0BCC0F11f9CF7aa8fc543fd"
        ],
        "snapshot": 14400123
      },
      {
        "name": "Example nested query",
        "strategy": {
          "name": "math",
          "params": {
            "symbol": "MATH",
            "operands": [
              {
                "type": "strategy",
                "strategy": {
                  "name": "math",
                  "network": "1",
                  "symbol": "MATH",
                  "params": {
                    "operands": [
                      {
                        "type": "strategy",
                        "strategy": {
                          "name": "erc20-balance-of",
                          "network": "1",
                          "params": {
                            "address": "0x6b175474e89094c44da98b954eedeac495271d0f",
                            "symbol": "DAI",
                            "decimals": 18
                          }
                        }
                      }
                    ],
                    "operation": "square-root"
                  }
                }
              },
              {
                "type": "constant",
                "value": 0
              },
              {
                "type": "constant",
                "value": 100
              }
            ],
            "operation": "a-if-lt-b"
          }
        },
        "network": "1",
        "addresses": [
          "0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x8d07D225a769b7Af3A923481E1FdF49180e6A265",
          "0x8f60501dE5b9b01F9EAf1214dbE1924aA97F7fd0",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x17ea92D6FfbAA1c7F6B117c1E9D0c88ABdc8b84C",
          "0x38C0039247A31F3939baE65e953612125cB88268"
        ],
        "snapshot": 11437846
      },
      {
        "name": "Example simple query",
        "strategy": {
          "name": "math",
          "params": {
            "symbol": "MATH",
            "operands": [
              {
                "type": "strategy",
                "strategy": {
                  "name": "erc20-balance-of",
                  "network": "1",
                  "params": {
                    "address": "0x6b175474e89094c44da98b954eedeac495271d0f",
                    "symbol": "DAI",
                    "decimals": 18
                  }
                }
              }
            ],
            "operation": "square-root"
          }
        },
        "network": "1",
        "addresses": [
          "0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x8d07D225a769b7Af3A923481E1FdF49180e6A265",
          "0x8f60501dE5b9b01F9EAf1214dbE1924aA97F7fd0",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x17ea92D6FfbAA1c7F6B117c1E9D0c88ABdc8b84C",
          "0x38C0039247A31F3939baE65e953612125cB88268"
        ],
        "snapshot": 11437846
      },
      {
        "name": "Example legacy query",
        "strategy": {
          "name": "math",
          "params": {
            "symbol": "MATH",
            "strategy": {
              "name": "erc20-balance-of",
              "network": "1",
              "params": {
                "address": "0x6b175474e89094c44da98b954eedeac495271d0f",
                "symbol": "DAI",
                "decimals": 18
              }
            },
            "operation": "square-root"
          }
        },
        "network": "1",
        "addresses": [
          "0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x8d07D225a769b7Af3A923481E1FdF49180e6A265",
          "0x8f60501dE5b9b01F9EAf1214dbE1924aA97F7fd0",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x17ea92D6FfbAA1c7F6B117c1E9D0c88ABdc8b84C",
          "0x38C0039247A31F3939baE65e953612125cB88268"
        ],
        "snapshot": 11437846
      }
    ],
    "schema": null,
    "about": "# math\n\nApply common mathematical operations on outputs from other strategies.\n\n## Operations\n\nCurrently supported operations are:\n\n| Operation     | Operand Count | Description                                |\n| ------------- | ------------- | ------------------------------------------ |\n| `square-root` | 1             | takes the square root of the operand       |\n| `cube-root`   | 1             | takes the cube root of the operand         |\n| `multiply`    | 2             | x * a                                      |\n| `min`         | 2             | takes the smaller number of the 2 operands |\n| `max`         | 2             | takes the larger number of the 2 operands  |\n| `a-if-lt-b`   | 3             | (x, a, b) = x < b ? a : x                  |\n| `a-if-lte-b`  | 3             | (x, a, b) = x <= b ? a : x                 |\n| `a-if-gt-b`   | 3             | (x, a, b) = x > b ? a : x                  |\n| `a-if-gte-b`  | 3             | (x, a, b) = x >= b ? a : x                 |\n| `minus`       | 2             | x - a                                      |\n| `divide`      | 2             | x / a                                      |\n\n## Examples\n\nThe following example takes the square root of a user's DAI token balance as voting score.\n\n```json\n{\n  \"symbol\": \"MATH\",\n  \"operands\": [\n    {\n      \"type\": \"strategy\",\n      \"strategy\": {\n        \"name\": \"erc20-balance-of\",\n        \"network\": \"1\",\n        \"params\": {\n          \"address\": \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n          \"symbol\": \"DAI\",\n          \"decimals\": 18\n        }\n      }\n    }\n  ],\n  \"operation\": \"square-root\"\n}\n```\n\nHere's another example that sets any score from the result above that's less than 100 to zero.\n\n```json\n{\n  \"symbol\": \"MATH\",\n  \"operands\": [\n    {\n      \"type\": \"strategy\",\n      \"strategy\": {\n        \"name\": \"math\",\n        \"network\": \"1\",\n        \"symbol\": \"MATH\",\n        \"params\": {\n          \"operands\": [\n            {\n              \"type\": \"strategy\",\n              \"strategy\": {\n                \"name\": \"erc20-balance-of\",\n                \"network\": \"1\",\n                \"params\": {\n                  \"address\": \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n                  \"symbol\": \"DAI\",\n                  \"decimals\": 18\n                }\n              }\n            }\n          ],\n          \"operation\": \"square-root\"\n        }\n      }\n    },\n    {\n      \"type\": \"constant\",\n      \"value\": 0\n    },\n    {\n      \"type\": \"constant\",\n      \"value\": 100\n    }\n  ],\n  \"operation\": \"a-if-lt-b\"\n}\n```\n"
  },
  "push-voting-power": {
    "key": "push-voting-power",
    "author": "mujtaba1747",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "push-voting-power",
          "params": {
            "pushTokenAddr": "0xf418588522d5dd018b425E472991E52EBBeEEEEE",
            "pushLPTokenAddr": "0xaf31fd9c3b0350424bf96e551d2d1264d8466205",
            "stakingAddr": "0xB72ff1e675117beDefF05a7D0a472c3844cfec85",
            "uniswapV2Router02": "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
            "symbol": "PUSH",
            "WETHAddress": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
            "USDTAddress": "0xdac17f958d2ee523a2206206994597c13d831ec7",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x554d29160f779Adf0a4328597cD33Ea1Df4D9Ee9",
          "0xcB034160f7B45E41E6015ECEA09F31A66C144422",
          "0x1c8c125C1Eac1C8d450979cbf0146985D75df55A",
          "0x5913760160d245d0C9A05a8a956012694281bEE3",
          "0x4b9D53246eD18db31f26Fc59b6e47a9efC3C1213",
          "0x89c1151cA988ca5372b569A30d24964A94Ad05FD",
          "0xE08fcc423566BF10B53e32E05d24C0429F91111A"
        ],
        "snapshot": 13626267
      }
    ],
    "schema": null,
    "about": "# EPNS Governance: Voting\n\nThis strategy weighs the vote using:\n- Amount of `$PUSH` delegated to user\n- Amount of `$PUSH` staked in Push staking pool\n- Amount of `$PUSH-LP` staked in LP staking pool\n\nThe voting power is calculated in terms of `$PUSH`, so `$PUSH-LP` tokens are converted to `$PUSH` using on chain data from Uniswap-V2 Router, WETH and USDT token contracts.\n\n- Example Parameters:\n```JSON\n{\n    \"pushTokenAddr\": \"0xf418588522d5dd018b425E472991E52EBBeEEEEE\",\n    \"pushLPTokenAddr\": \"0xaf31fd9c3b0350424bf96e551d2d1264d8466205\",\n    \"stakingAddr\": \"0xB72ff1e675117beDefF05a7D0a472c3844cfec85\",\n    \"symbol\": \"PUSH\",\n\n    \"uniswapV2Router02\": \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\",\n    \"WETHAddress\": \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n    \"USDTAddress\": \"0xdac17f958d2ee523a2206206994597c13d831ec7\",\n          \n    \"decimals\": 18\n}\n```"
  },
  "staked-psp-balance": {
    "key": "staked-psp-balance",
    "author": "paraswap",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "staked-psp-balance",
          "params": {
            "address": "0xcafe001067cdef266afb7eb5a286dcfd277f3de5",
            "symbol": "PSP",
            "decimals": 18,
            "SPSPs": [
              "0x55A68016910A7Bcb0ed63775437e04d2bB70D570",
              "0xea02DF45f56A690071022c45c95c46E7F61d3eAb",
              "0x6b1D394Ca67fDB9C90BBd26FE692DdA4F4f53ECD",
              "0x37b1E4590638A266591a9C11d6f945fe7A1adAA7",
              "0xC3359DbdD579A3538Ea49669002e8E8eeA191433"
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x7494Eb2916CAD8649F4f91eB1DB6E20bE605DAd6",
          "0xD17Ff37a8047f3520d0271B548f9a1066A8737df",
          "0xe768FF81990E7Ac73C18a2eCbf038815023599Dc",
          "0xB9E11C28617D46866c1D7d95EaebAC3AC12CDAD3",
          "0xB5714084eeF0f02eFDD145DFB3Fe2e3290591D7b",
          "0xCC6B30531DE603787a4D0305FC7eD404374Cf771",
          "0xcb492647CB51E243Fb2582C0300C4c7573acdEBf",
          "0xB8f6f3cc7b162d7E5b9196140Fb1878cdA316ba0",
          "0xcff61382E659603046358f86a119EFd127D5BB48",
          "0xD4B23B54314F2E038D089D6Fa6e7614415927DBC",
          "0x584BaA4b71b0A3fA522658128f36a6A4AbeAC2ae",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x8d07D225a769b7Af3A923481E1FdF49180e6A265",
          "0x8f60501dE5b9b01F9EAf1214dbE1924aA97F7fd0",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x17ea92D6FfbAA1c7F6B117c1E9D0c88ABdc8b84C",
          "0x38C0039247A31F3939baE65e953612125cB88268"
        ],
        "snapshot": 13672525
      }
    ],
    "schema": null,
    "about": "# staked-psp-balance\n\nThis is a strategy to get PSP balances staked in SPSP contracts.\n\nIt calls `SPSP.PSPBalance(address)` for each SPSP staking contract for each user address and sums up PSP balances by user address.\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0xcafe001067cdef266afb7eb5a286dcfd277f3de5\",\n  \"symbol\": \"PSP\",\n  \"decimals\": 18,\n  \"SPSPs\": [\n    \"0x55A68016910A7Bcb0ed63775437e04d2bB70D570\",\n    \"0xea02DF45f56A690071022c45c95c46E7F61d3eAb\",\n    \"0x6b1D394Ca67fDB9C90BBd26FE692DdA4F4f53ECD\",\n    \"0x37b1E4590638A266591a9C11d6f945fe7A1adAA7\",\n    \"0xC3359DbdD579A3538Ea49669002e8E8eeA191433\"\n  ]\n}\n```\n"
  },
  "erc20-balance-of-contract-multiplier": {
    "key": "erc20-balance-of-contract-multiplier",
    "author": "phoenix-keeper",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc20-balance-of-contract-multiplier",
          "params": {
            "address": "0xb352A324283a51259f74fc9133b56A582671c836",
            "symbol": "wTROVE",
            "decimals": 9,
            "contract_address": "0x4ef0191De9E85154161E6AD0E96fe0bb8D95892D",
            "args": [],
            "methodABI": {
              "inputs": [],
              "name": "index",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          }
        },
        "network": "4",
        "addresses": [
          "0x0B72513E73BB60375a4329FABF9BA16f861C0f12",
          "0x9a82d59f46913913808bFE905F6157F967AAa28E"
        ],
        "snapshot": 9711086
      }
    ],
    "schema": null,
    "about": "# erc20-balance-of-contract-multiplier\n\nThis returns the balances of the voters for a specific ERC20 token with a multiplier obtained from a contract call.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0xb352A324283a51259f74fc9133b56A582671c836\",\n  \"symbol\": \"wTROVE\",\n  \"decimals\": 9,\n  \"contract_address\": \"0x4ef0191De9E85154161E6AD0E96fe0bb8D95892D\",\n  // Arguments passed to the method\n  \"args\": [],\n  \"methodABI\": {\n    \"inputs\": [],\n    \"name\": \"index\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }\n}\n```\n"
  },
  "juicebox": {
    "key": "juicebox",
    "author": "drgorillamd",
    "version": "0.2.0",
    "examples": [
      {
        "name": "Juicebox Projects",
        "strategy": {
          "name": "juicebox",
          "params": {
            "projectId": "1",
            "symbol": "JBX",
            "protocolVersion": "1"
          }
        },
        "network": "1",
        "addresses": [
          "0x63A2368F4B509438ca90186cb1C15156713D5834",
          "0x6877be9E00d0bc5886c28419901E8cC98C1c2739",
          "0x823b92d6a4b2AED4b15675c7917c9f922ea8ADAD",
          "0x1e54110DC48dD83F48187b846DF7E32bB76d0D0b"
        ],
        "snapshot": 15971323
      },
      {
        "name": "Juicebox Projects",
        "strategy": {
          "name": "juicebox",
          "params": {
            "projectId": "1",
            "symbol": "JBX",
            "protocolVersion": "2"
          }
        },
        "network": "1",
        "addresses": [
          "0x63A2368F4B509438ca90186cb1C15156713D5834",
          "0x6877be9E00d0bc5886c28419901E8cC98C1c2739",
          "0x823b92d6a4b2AED4b15675c7917c9f922ea8ADAD",
          "0x1e54110DC48dD83F48187b846DF7E32bB76d0D0b"
        ],
        "snapshot": 15971323
      },
      {
        "name": "Juicebox Projects",
        "strategy": {
          "name": "juicebox",
          "params": {
            "projectId": "311",
            "symbol": "GO",
            "protocolVersion": "3"
          }
        },
        "network": "1",
        "addresses": [
          "0x63A2368F4B509438ca90186cb1C15156713D5834",
          "0x6877be9E00d0bc5886c28419901E8cC98C1c2739",
          "0x823b92d6a4b2AED4b15675c7917c9f922ea8ADAD",
          "0x1e54110DC48dD83F48187b846DF7E32bB76d0D0b"
        ],
        "snapshot": 15971421
      }
    ],
    "schema": null,
    "about": ""
  },
  "snet-farmers": {
    "key": "snet-farmers",
    "author": "Vivek205",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "snet-farmers",
          "params": {
            "address": "0xa1e841e8f770e5c9507e2f8cfd0aa6f73009715d",
            "symbol": "AGIX",
            "decimals": 8,
            "farmingAddress": "0x8C89C50D3986e9e310df034554DEb63dDf7dB538",
            "farmingPoolId": 2
          }
        },
        "network": "3",
        "addresses": [
          "0x88bc4235d23af66a268098e4a4dddeec9362682a",
          "0xabd2ccb3828b4428bbde6c2031a865b0fb272a5a"
        ],
        "snapshot": 11437846
      }
    ],
    "schema": null,
    "about": "# erc20-balance-of\n\nThis strategy returns the yield-farming pool balances of the voters for the SingularityNET project.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n  \"symbol\": \"DAI\",\n  \"decimals\": 18,\n  \"farmingAddress\": \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n  \"farmingPoolId\": 0\n}\n```\n"
  },
  "snet-stakers": {
    "key": "snet-stakers",
    "author": "Vivek205",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "snet-stakers",
          "params": {
            "address": "0xa1e841e8f770e5c9507e2f8cfd0aa6f73009715d",
            "symbol": "AGIX",
            "decimals": 8,
            "stakingAddress": "0xF153Aec75e1A8B2f5647bEfaC783b31a5c3Fba22",
            "stakeMapIndex": 26
          }
        },
        "network": "3",
        "addresses": [
          "0xC4f3BFE7D69461B7f363509393D44357c084404c",
          "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",
          "0x520b1A5B90E103eDE987663CB18CB7a4311EC17e",
          "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",
          "0xd03ea8624C8C5987235048901fB614fDcA89b117",
          "0x95cED938F7991cd0dFcb48F0a06a40FA1aF46EBC",
          "0x749BaAE8b4dF2883B98F33616C97563fAE81E05C",
          "0x2943144193B00Da6f1d4055383Bf0fBc99805322",
          "0x03F2eFdcb4BF042EDceBe7c2A22c8fCDB7E0aF76"
        ],
        "snapshot": 11437846
      }
    ],
    "schema": null,
    "about": "# erc20-balance-of\n\nThis strategy returns the staking pool balances of the voters for the SingularityNET project.\n\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n  \"symbol\": \"DAI\",\n  \"decimals\": 18,\n  \"stakingAddress\": \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n}\n```\n"
  },
  "snet-liquidity-providers": {
    "key": "snet-liquidity-providers",
    "author": "Vivek205",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "snet-liquidity-providers",
          "params": {
            "address": "0xa1e841e8f770e5c9507e2f8cfd0aa6f73009715d",
            "symbol": "AGIX",
            "decimals": 8,
            "lpAddress": "0x5318855ad173220e446002c01d5ee5f940502e70"
          }
        },
        "network": "3",
        "addresses": [
          "0x8c89c50d3986e9e310df034554deb63ddf7db538",
          "0x4e61d78b75c0bc64dc053cf93cfe31c912922b5a",
          "0x46ef7d49aaa68b29c227442bdbd18356415f8304",
          "0xe4ce53c10f2f84b17020152e5d8a0996687c9a03",
          "0x3d09d2ac0ba857d48130fb243ccfa0387b7a167f",
          "0x8c9b16489d8264bab6b9ddfb6ee3914392e973ea"
        ],
        "snapshot": 11437846
      }
    ],
    "schema": null,
    "about": "# erc20-balance-of\n\nThis strategy returns the liquidity pool balances of the voters for the SingularityNET project.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n  \"symbol\": \"DAI\",\n  \"lpDecimals\": 18,\n  \"lpAddress\": \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n}\n```\n"
  },
  "unstackedtoadz-and-stackedtoadz-stakers": {
    "key": "unstackedtoadz-and-stackedtoadz-stakers",
    "author": "Eh-Marine",
    "version": "0.1.0",
    "examples": [
      {
        "name": "UnstackedToadz and StackedToadz Stakers",
        "strategy": {
          "name": "unstackedtoadz-and-stackedtoadz-stakers",
          "params": {
            "symbol": "STACK",
            "decimals": 0,
            "tokenAddress": "0x1bbb57def2f6192f0b9b8565f49034bf1fcdb604",
            "staking_stackedtoadz": "0xBC9d59a9865c094d22fAAE988533F18eA1688722",
            "staking_unstackedtoadz": "0x1bbb57def2f6192f0b9b8565f49034bf1fcdb604"
          }
        },
        "network": "1",
        "addresses": [
          "0x6d330e23da437fb66e8419e8f52fcd43fa6b8326"
        ],
        "snapshot": 13745053
      }
    ],
    "schema": null,
    "about": "# UnstackedToadz and StackedToadz Stakers strategy\n\nThis strategy return the balances of the voters for StackedToadz project using only the staking pool of UnstackedToadz and StackedToadz.\n\n## Accepted options\n\n- **staking_stackedtoadz:** StackedToadz staking pool address.\n\n- **staking_unstackedtoadz:** UnStackedToadz staking pool address.\n\n## Examples\n\n```JSON\n[\n  {\n    \"name\": \"UnstackedToadz and StackedToadz Stakers\",\n    \"strategy\": {\n      \"name\": \"unstackedtoadz-and-stackedtoadz-stakers\",\n      \"params\": {\n        \"staking_stackedtoadz\": \"0xBC9d59a9865c094d22fAAE988533F18eA1688722\",\n        \"staking_unstackedtoadz\": \"0x1bbb57def2f6192f0b9b8565f49034bf1fcdb604\"\n      }\n    },\n    \"network\": \"1\",\n    \"addresses\": [\n      \"0x6d330e23da437fb66e8419e8f52fcd43fa6b8326\"\n    ],\n    \"snapshot\": 13688108\n  }\n]\n\n```\n"
  },
  "ocean-dao-brightid": {
    "key": "ocean-dao-brightid",
    "author": "trizin",
    "version": "0.2.0",
    "examples": [
      {
        "name": "Ocean Marketplace BrightID Stategy",
        "strategy": {
          "name": "ocean-dao-brightid",
          "params": {
            "brightIdMultiplier": 4,
            "notVerifiedMultiplier": 1,
            "brightIdNetwork": "1",
            "registry": "0xc37F8341Ac6e4a94538302bCd4d49Cf0852D30C0",
            "symbol": "OCEAN",
            "delegationSpace": "officialoceandao.eth",
            "strategies": {
              "1": [
                {
                  "name": "erc20-balance-of",
                  "params": {
                    "symbol": "OCEAN",
                    "address": "0x967da4048cd07ab37855c090aaf366e4ce1b9f48",
                    "decimals": 18
                  }
                },
                {
                  "name": "ocean-marketplace",
                  "params": {
                    "symbol": "OCEAN",
                    "address": "0x967da4048cD07aB37855c090aAF366e4ce1b9F48",
                    "decimals": 18
                  }
                },
                {
                  "name": "sushiswap",
                  "params": {
                    "symbol": "OCEAN",
                    "address": "0x967da4048cD07aB37855c090aAF366e4ce1b9F48",
                    "decimals": 18
                  }
                },
                {
                  "name": "uniswap",
                  "params": {
                    "symbol": "OCEAN",
                    "address": "0x967da4048cD07aB37855c090aAF366e4ce1b9F48",
                    "decimals": 18
                  }
                },
                {
                  "name": "contract-call",
                  "params": {
                    "address": "0x9712Bb50DC6Efb8a3d7D12cEA500a50967d2d471",
                    "args": [
                      "%{address}",
                      "0xCDfF066eDf8a770E9b6A7aE12F7CFD3DbA0011B5",
                      "0x967da4048cD07aB37855c090aAF366e4ce1b9F48"
                    ],
                    "decimals": 18,
                    "symbol": "OCEAN",
                    "methodABI": {
                      "inputs": [
                        {
                          "internalType": "address",
                          "name": "provider",
                          "type": "address"
                        },
                        {
                          "internalType": "address",
                          "name": "poolToken",
                          "type": "address"
                        },
                        {
                          "internalType": "address",
                          "name": "reserveToken",
                          "type": "address"
                        }
                      ],
                      "name": "totalProviderAmount",
                      "outputs": [
                        {
                          "internalType": "uint256",
                          "name": "",
                          "type": "uint256"
                        }
                      ],
                      "stateMutability": "view",
                      "type": "function"
                    }
                  }
                }
              ],
              "137": [
                {
                  "name": "erc20-balance-of",
                  "params": {
                    "symbol": "OCEAN",
                    "address": "0x282d8efCe846A88B159800bd4130ad77443Fa1A1",
                    "decimals": 18
                  }
                }
              ]
            }
          }
        },
        "network": "1",
        "addresses": [
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x8d07D225a769b7Af3A923481E1FdF49180e6A265",
          "0x8f60501dE5b9b01F9EAf1214dbE1924aA97F7fd0",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x17ea92D6FfbAA1c7F6B117c1E9D0c88ABdc8b84C",
          "0x38C0039247A31F3939baE65e953612125cB88268",
          "0xf25B7b8dC2B264Be6c3410e2CAE339c041B854C2",
          "0x655eFe6Eb2021b8CEfE22794d90293aeC37bb325",
          "0xCe7BE31f48205C48A91A84E777a66252Bba87F0b",
          "0x788550D00579F66c06ce209D14056C8F2c0A8188",
          "0x18F93FA526e598769fd909F1D2C82315219d49Ed",
          "0xA321025df54C18CEeFdE118c0671735390aCB318",
          "0x8a4C36a99b0418BF95A155160C31A267EBCA8754",
          "0x5e22b34F2708EA7e25918B8FCF816F9CfF27a331",
          "0x12BD31628075C20919BA838b89F414241b8c4869",
          "0xf88bD9c3F81f7148E4076bBB8b2e2B0951A8cE38",
          "0xAAB9EaBa1AA2653c1Dda9846334700b9F5e14E44",
          "0xB9b14C4d0cbc18FC5f54701D578e85968cf19FD5",
          "0xceE1C921067E5fe65CD71fb8c0627d86Ce91d746",
          "0xde1E6A7ED0ad3F61D531a8a78E83CcDdbd6E0c49",
          "0x830dff6a094b417ff5a78f989054a873dfd8fa2b"
        ],
        "snapshot": 14048401
      }
    ],
    "schema": null,
    "about": "# Ocean DAO BrightID Snapshot strategy\n\n`version 0.1`\n\nThis strategy sums the scores of given multiple strategies for each voter. If the voter is verified on the BrightId registry contract, the score of the voter is multiplied by a factor of `brightIdMultiplier` parameter.\n\nExample parameters:\n\n```json\n{\n  \"brightIdMultiplier\": 5,\n  \"brightIdNetwork\": \"4\",\n  \"registry\": \"0xbD45cf7C9f8eE04409C31D0ef939D4b0926263Ae\",\n  \"symbol\": \"OCEAN\",\n  \"brightIdNetwork\":4,\n  \"brightIdSnapshot\":100000,\n  \"strategies\": [\n    {\n      \"name\": \"erc20-balance-of\",\n      \"params\": {\n        \"symbol\": \"OCEAN\",\n        \"address\": \"0x967da4048cD07aB37855c090aAF366e4ce1b9F48\",\n        \"decimals\": 18\n      }\n    },\n    {\n      \"name\": \"ocean-marketplace\",\n      \"params\": {\n        \"symbol\": \"OCEAN\",\n        \"address\": \"0x967da4048cD07aB37855c090aAF366e4ce1b9F48\",\n        \"decimals\": 18\n      }\n    },\n    {\n      \"name\": \"sushiswap\",\n      \"params\": {\n        \"symbol\": \"OCEAN\",\n        \"address\": \"0x967da4048cD07aB37855c090aAF366e4ce1b9F48\",\n        \"decimals\": 18\n      }\n    },\n    {\n      \"name\": \"uniswap\",\n      \"params\": {\n        \"symbol\": \"OCEAN\",\n        \"address\": \"0x967da4048cD07aB37855c090aAF366e4ce1b9F48\",\n        \"decimals\": 18\n      }\n    },\n    {\n      \"name\": \"contract-call\",\n      \"params\": {\n        \"address\": \"0x9712Bb50DC6Efb8a3d7D12cEA500a50967d2d471\",\n        \"args\": [\n          \"%{address}\",\n          \"0xCDfF066eDf8a770E9b6A7aE12F7CFD3DbA0011B5\",\n          \"0x967da4048cD07aB37855c090aAF366e4ce1b9F48\"\n        ],\n        \"decimals\": 18,\n        \"symbol\": \"OCEAN\",\n        \"methodABI\": {\n          \"inputs\": [\n            {\n              \"internalType\": \"address\",\n              \"name\": \"provider\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"poolToken\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"address\",\n              \"name\": \"reserveToken\",\n              \"type\": \"address\"\n            }\n          ],\n          \"name\": \"totalProviderAmount\",\n          \"outputs\": [\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"stateMutability\": \"view\",\n          \"type\": \"function\"\n        }\n      }\n    }\n  ]\n}\n```\n"
  },
  "membership": {
    "key": "membership",
    "author": "blakewest",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "membership",
          "params": {
            "symbol": "DAI",
            "membershipStrategy": {
              "name": "erc721",
              "params": {
                "address": "0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb",
                "symbol": "PUNK"
              }
            },
            "votingPowerStrategy": {
              "name": "erc20-balance-of",
              "params": {
                "address": "0x6b175474e89094c44da98b954eedeac495271d0f",
                "symbol": "DAI",
                "decimals": 18
              }
            }
          }
        },
        "network": "1",
        "addresses": [
          "0x3295df41a2f288da03818ae32565e1599f1b2eee",
          "0x207230E06e14d1fa94e703f4784F819667472247",
          "0x00555966521df9edbca9b8a497ad8031cf33f72a"
        ],
        "snapshot": 13791476
      }
    ],
    "schema": null,
    "about": "# membership\n\nThis strategy allows you to combine any arbitrary \"membership\" strategy with any \"voting power\" strategy. The idea is that you can only vote if you pass the membership strategy. This is super useful to enable things like quadratic voting or other non plutocratic systems that require sybil resistance. For example, Compound could say that voting power is your COMP balance, but only if you also possess a [UID](https://etherscan.io/address/0xba0439088dc1e75F58e0A7C107627942C15cbb41) or a PUNK (`erc721` strategy). Or you must pass BrightID verification (`brightid` strategy). Or make your own verification strategy based on on-chain behavior! The sky is the limit!\n\nThen you can use quadratic voting, or one-member-one-vote, or any other system you can think of. With a sense of identity, the design space for governance opens up significantly.\n\nNote: The membership portion is binary. If the membership strategy returns any number > 0 for an address, then you're a member. Otherwise voting power for that address is zero.\n\nHere is an example of parameters:\n\n```json\n  {\n    \"membershipStrategy\": {\n      \"name\": \"erc721\",\n        \"params\": {\n          \"address\": \"0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\"\n        }\n    },\n    \"votingPowerStrategy\": {\n      \"name\": \"erc20-balance-of\",\n        \"params\": {\n          \"address\": \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n          \"symbol\": \"DAI\",\n          \"decimals\": 18,\n        }\n    },\n    \"symbol\": \"DAI\"\n  }\n```\n"
  },
  "lydia-gov-vault": {
    "key": "lydia-gov-vault",
    "author": "manes-codes",
    "version": "1.0.0",
    "examples": [
      {
        "name": "lydia-gov-vault",
        "strategy": {
          "name": "lydia-gov-vault",
          "params": {
            "address": "0x59002fcbC7D19B7c91D530F739d71507B83CaC53",
            "symbol": "GovLYD"
          }
        },
        "network": "43114",
        "addresses": [
          "0xB1cbb693D6cF15a88d251b7361C8925BeA58db5f",
          "0x806EB1C67f54D286239E0aC953Aa5514B7958Cc8",
          "0x2e8Ac6830CcAA5a767ddf96c10E4A9772D19C2A8",
          "0x91BF066D64Ef577b64A8445343834c7f5Cbbd0CD"
        ],
        "snapshot": 8088843
      }
    ],
    "schema": null,
    "about": "# Lydia Finance Governance Vault Balance Strategy\n\nCalculates voting power based on user balance in the Lydia Governance pool where users lock their LYD tokens and get right to participate in governance.\n"
  },
  "darkforest-score": {
    "key": "darkforest-score",
    "author": "cha0sg0d",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "darkforest-score",
          "params": {
            "graph_url": "https://api.thegraph.com/subgraphs/name/darkforest-eth/dark-forest-v06-round-4",
            "symbol": "log2(score)"
          }
        },
        "network": "100",
        "addresses": [
          "0x0804bd21d754b33fed53c7335385697e7b87fdab",
          "0xe99b5d080a1e0256726e106ab51d0a1799ef2519",
          "0xee32d8021ed88a59eb6f1fd1b8367b8e9c75a6f5",
          "0x1396364c0f00c814c97d1406c2b3250f9ff561ee",
          "0x73cf8b7819ba17bc986611d093510296b46e4d33",
          "0xb5ce86c2ab9e2403ab47acfbe501845e2480fad9",
          "0x102e277c34668e96cbed6169fa1195002c11d746",
          "0x14d2b918ae4d9bcf383a64931ec750c2d04a600a",
          "0xd70c35c779d0055f1bccdc24b92fa58dcdad24b4",
          "0x61f7bf167bd32bcf7042bc823bfcd24327426da7",
          "0x8459c6bebe2d53b4dcaa71499a1ae4274c0e4df9",
          "0x021004341db64a77a01eaead4c1cbfba8bedf589",
          "0xe732654bA181fC97A42dC35Cd137CdeE2B17930F"
        ],
        "snapshot": 19546839
      }
    ],
    "schema": null,
    "about": "# Dark Forest Score strategy\n\nGets player score from Dark Forest Contract. *Must be from a round with a `score` field on the `Player` struct*\n\nDue to the exponential nature of Dark Forest scoring, this stategy takes the log2 of each player's score.\n\nThe only input parameter is `\"graph_url\"`, which requires the subgraph API URL for the round in question.\n\n"
  },
  "orange-reputation-based-voting": {
    "key": "orange-reputation-based-voting",
    "author": "orange-protocol",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "orange-reputation-based-voting",
          "params": {
            "address": "0x6b175474e89094c44da98b954eedeac495271d0f",
            "symbol": "DAI"
          }
        },
        "network": "1",
        "addresses": [
          "0xd7539FCdC0aB79a7B688b04387cb128E75cb77Dc",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x8d07D225a769b7Af3A923481E1FdF49180e6A265",
          "0x8f60501dE5b9b01F9EAf1214dbE1924aA97F7fd0",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x17ea92D6FfbAA1c7F6B117c1E9D0c88ABdc8b84C",
          "0x38C0039247A31F3939baE65e953612125cB88268"
        ],
        "snapshot": 11437846
      }
    ],
    "schema": null,
    "about": "# orange-reputation-based-voting\n\nThis strategy returns a voter's reputation score evaluated by a specified Orange Model  \n\nHere is an example of parameters:  \n\n```json\n{\n  \"address\": \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n  \"symbol\": \"DAI\"\n}\n```\n"
  },
  "orange-reputation-nft-based-voting": {
    "key": "orange-reputation-nft-based-voting",
    "author": "orange-protocol",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "orange-reputation-nft-based-voting",
          "params": {
            "symbol": "calcUserAsset",
            "contract": "0xdc63554f403E281f30B6103a6355F08a34d4DeB8"
          }
        },
        "network": "56",
        "addresses": [
          "0x7ff4f8fe1dbbba8dc27103359bf96e97a4d44114",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0xd1a5b91957530e1b3e9cfac1543467c60c352f69",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x8d07D225a769b7Af3A923481E1FdF49180e6A265",
          "0x8f60501dE5b9b01F9EAf1214dbE1924aA97F7fd0",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x17ea92D6FfbAA1c7F6B117c1E9D0c88ABdc8b84C",
          "0x38C0039247A31F3939baE65e953612125cB88268"
        ],
        "snapshot": 15511638
      }
    ],
    "schema": null,
    "about": "# orange-reputation-nft-based-voting\n\nThis strategy distributes voting power based on user reputation scores represented by reputation NFTs they hold. You can ask users to claim an Orange issued NFT or [issue an NFT yourself](https://docs.orangeprotocol.io/developer-guides/issue-reputation-nfts).\nUsers must [claim reputation NFTs](https://docs.orangeprotocol.io/user-guides/claim-orange-nfts) on the [Orange platform](https://www.orangeprotocol.io/) to vote.\n\n## Use this strategy\n\n1. Issue an NFT or select one from [Orange issued NFTs](https://app.orangeprotocol.io/) (Crypto Whale, NFT Collector or Web3 Citizen).\n2. In your Space settings, select \"orange-reputation-nft-based-voting\" as the voting strategy.\n3.  Select a blockchain network according to the NFT you choose. Orange supported networks are listed on each NFT page, for example, [Crypto Whale](https://app.orangeprotocol.io/nft/1). Make sure your users can claim NFTs on the selected network.\n4. Fill in `symbol` and `contract` fields as the example below to indicate the NFT you select.\n5. Specify the NFT name and the network in the proposal description so your users can easily find out.\n\n## Example of parameters\n\n|   Param    | Description                                                                                               |\n| :------: | :-------------------------------------------------------------------------------------------------------- |\n|  symbol  | `calcUserAsset` for [Crypto Whale](https://app.orangeprotocol.io/nft/1); <br> or `calcNFTAsset` for [NFT Collector](https://app.orangeprotocol.io/nft/2); <br> or `calcActivity` for [Web3 Citizen](https://app.orangeprotocol.io/nft/3); <br>or the method name your set for your issued NFT. |\n| contract | NFT contract address. <br>Contract address of Orange issued NFTs: <br>`0xdc63554f403E281f30B6103a6355F08a34d4DeB8`                  |\n\n```\n{\n  \"symbol\": \"calcUserAsset\",\n  \"contract\": \"0xdc63554f403E281f30B6103a6355F08a34d4DeB8\"\n}\n```\n\n## Vote on a proposal\n\nUsers of your space should follow these steps to vote:\n\n1. Read the proposal and confirm the NFT and network information.\n2. Claim the required NFT on the Orange platform.\n3. Vote on the proposal.\n"
  },
  "squid-dao": {
    "key": "squid-dao",
    "author": "zencephalon",
    "version": "0.0.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "squid-dao",
          "params": {
            "symbol": "SQDV",
            "decimals": 4
          }
        },
        "network": "1",
        "addresses": [
          "0xfd4f24676ed4588928213f37b126b53c07186f45",
          "0x0f763341b448bb0f02370f4037fe4a2c84c9283f",
          "0x020ca66c30bec2c4fe3861a94e4db4a498a35872"
        ],
        "snapshot": 13837434
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. SQDV"
              ],
              "maxLength": 16
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 4"
              ]
            }
          },
          "required": [
            "decimals"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# squid-dao\n\nCombines SquidDAO vewsSquid holders and NFT holders, returning a combined voting power as a percentage of the total.\n\n```json\n{\n  \"decimals\": 4,\n  \"symbol\": \"SQDV\"\n}\n```\n"
  },
  "botto-dao": {
    "key": "botto-dao",
    "author": "alfonsocarbono",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Botto Dao Governance strategy",
        "strategy": {
          "name": "botto-dao",
          "params": {
            "token": "0x9dfad1b7102d46b1b197b90095b5c4e9f5845bba",
            "stakingAddress": "0x19CD3998f106eCC40eE7668c19C47e18b491e8a6",
            "miningAddress": "0xf8515Cae6915838543bCD7756F39268CE8F853Fd",
            "liquidityAddress": "0x9ff68f61ca5eb0c6606dc517a9d44001e564bb66",
            "symbol": "BOTTO",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0xf2b10b41961f6bc3801e7946dabe5572158a78a5",
          "0xea32cf979bdaf8d3bb4121d58515d4623a27f3e0",
          "0x7173d417cfa1cdec794fa21f4ca8a71d181b2ca0",
          "0x58787f1659b2fd8853918dab6d4a1565569e6044",
          "0x7dbc5f88986db946f1d5987edfbf9c6917230fa2"
        ],
        "snapshot": 13803640
      }
    ],
    "schema": null,
    "about": "# Botto Dao Governance strategy\n\nIt returns the BOTTO balance of the voters participating in the governance and in the liquidiy mining program\n\nHere is an example of parameters:\n```json\n[\n  {\n    \"name\": \"Botto Dao Governance strategy\",\n    \"strategy\": {\n      \"name\": \"botto-dao\",\n      \"params\": {\n        \"token\": \"0x9dfad1b7102d46b1b197b90095b5c4e9f5845bba\",\n        \"stakingAddress\": \"0x19CD3998f106eCC40eE7668c19C47e18b491e8a6\",\n        \"miningAddress\": \"0xf8515Cae6915838543bCD7756F39268CE8F853Fd\",\n        \"liquidityAddress\": \"0x9ff68f61ca5eb0c6606dc517a9d44001e564bb66\",\n        \"symbol\": \"BOTTO\",\n        \"decimals\": 18\n      }\n    },\n    \"network\": \"1\",\n    \"addresses\": [\n      \"0xf2b10b41961f6bc3801e7946dabe5572158a78a5\",\n      \"0xea32cf979bdaf8d3bb4121d58515d4623a27f3e0\",\n      \"0x7173d417cfa1cdec794fa21f4ca8a71d181b2ca0\",\n      \"0x58787f1659b2fd8853918dab6d4a1565569e6044\",\n      \"0x7dbc5f88986db946f1d5987edfbf9c6917230fa2\"\n    ],\n    \"snapshot\": 13808330\n  }\n]\n\n```\n"
  },
  "genart": {
    "key": "genart",
    "author": "stzky",
    "version": "0.2.0",
    "examples": [
      {
        "name": "GEN.ART",
        "strategy": {
          "name": "genart",
          "params": {
            "tokenAddress": "0x12e56851ec22874520dc4c7fa0a8a8d7dba1bac8",
            "membershipAddress": "0xbadc470f2e159f01396a546fc63d8c0db2697f3b",
            "vaultAddress": "0xB8a5465BFC06fc8C82385dCFf949673D7b068D1a",
            "interfaceAddress": "0x6bB38a82E3479f474d2985805B49B04881d8203c",
            "symbol": "GENART",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x1c2Ca609CB72b05A23d1539acba6C594c87E304e",
          "0x8DCb640e52a9556DE2f1bE9656792698b859E616",
          "0x166f2E250ac6c8EF7aAAaDf9853720376a6C4b86"
        ],
        "snapshot": 17721721
      }
    ],
    "schema": null,
    "about": ""
  },
  "path-balance-staked-and-locked": {
    "key": "path-balance-staked-and-locked",
    "author": "PathDAO",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "path-balance-staked-and-locked",
          "params": {
            "tokenAddress": "0x2a2550e0a75acec6d811ae3930732f7f3ad67588",
            "stakingAddress": "0x0bF6eeA205F46d796458D090F3aA333149287854",
            "lockedAddresses": [
              "0xDe48716A14C4CBc09656E21CE7F40FC1a02b3a25",
              "0x67f0260254FB3Cee97dA18077927888Ed72D1f17",
              "0xeE729DB66431e4401D63A38a2048d8CE0DF96eC3",
              "0x8923f2A0465287E2F8564F85a7f62ed34d947594",
              "0xfB05dc346f36eE88680e885CaC881983FAdEcBD4",
              "0x9A319F461A84EA5b508AE1e97113fD1743ED691D"
            ],
            "methodABI": [
              "function getRemainingAmount(address _recipient) external view returns (uint256 amount)"
            ],
            "symbol": "PATH",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x37672dda85f3cb8da4098baac5d84e00960cb081",
          "0x1f31959dee51359ea01d3269acfd480f1746ec53",
          "0xd54467dc24040f72fa163cbb491b4ab17c882781",
          "0x7171dc086581b5ecf44c95bb31df10e9f1846571",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x8d07D225a769b7Af3A923481E1FdF49180e6A265",
          "0x8f60501dE5b9b01F9EAf1214dbE1924aA97F7fd0",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x17ea92D6FfbAA1c7F6B117c1E9D0c88ABdc8b84C",
          "0x38C0039247A31F3939baE65e953612125cB88268"
        ],
        "snapshot": 13839820
      }
    ],
    "schema": null,
    "about": "# Path holders, stakers and locked\n\nThis strategy return the balances of the holders of $PATH tokens, both in staked and locked contracts\n## Accepted options\n\n- **tokenAddress:** Token Address\n\n- **Staking Address:** Staking Address\n\n- **Locked Address:** Array of locked addresses\n\n- **methodABI** ABI method to get balance in locked contract (unclaimed tokens only)\n\n- **symbol** Token of ERC-20\n\n- **decimals** Decimals for ERC-20\n\n## Examples\n\n```JSON\n[\n  {\n    \"name\": \"Example query\",\n    \"strategy\": {\n      \"name\": \"path-balance-staked-and-locked\",\n      \"params\": {\n        \"tokenAddress\": \"0x2a2550e0a75acec6d811ae3930732f7f3ad67588\",\n        \"stakingAddress\": \"0x0bF6eeA205F46d796458D090F3aA333149287854\",\n        \"lockedAddresses\": [\n          \"0xDe48716A14C4CBc09656E21CE7F40FC1a02b3a25\",\n          \"0x67f0260254FB3Cee97dA18077927888Ed72D1f17\",\n          \"0xeE729DB66431e4401D63A38a2048d8CE0DF96eC3\",\n          \"0x8923f2A0465287E2F8564F85a7f62ed34d947594\",\n          \"0xfB05dc346f36eE88680e885CaC881983FAdEcBD4\",\n          \"0x9A319F461A84EA5b508AE1e97113fD1743ED691D\"\n        ],\n         \"methodABI\": [\n          \"function getRemainingAmount(address _recipient) external view returns (uint256 amount)\"\n        ],\n        \"symbol\": \"PATH\",\n        \"decimals\": 18\n      }\n    }\n  }\n]\n```"
  },
  "balancer-poolid": {
    "key": "balancer-poolid",
    "author": "jo-chemla",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "balancer-poolid",
          "params": {
            "poolId": "0xcb0e14e96f2cefa8550ad8e4aea344f211e5061d00020000000000000000011a",
            "token": "0xcafe001067cdef266afb7eb5a286dcfd277f3de5",
            "symbol": "PSP"
          }
        },
        "network": "1",
        "addresses": [
          "0x0951ff0835302929d6c0162b3d2495a85e38ec3a",
          "0x5d577c1cdaf838b264c7d977449c776ef664d654",
          "0xefa5121ddac8d083a5a4c3d42e2bfaab2f0390dc",
          "0x0ddc793680ff4f5793849c8c6992be1695cbe72a"
        ],
        "snapshot": 13946324
      }
    ],
    "schema": null,
    "about": "# Balancer-poolId\n\nThis strategy returns balances of the underlying token in Balancer LP pools. \nThe use of poolId and pagination makes it better suited to balancer pools with lots of shares (more than 1000)\n\nHere is an example of parameters:\n\n```json\n{\n  \"token\": \"0xcafe001067cdef266afb7eb5a286dcfd277f3de5\",\n  \"poolId\": \"0xcb0e14e96f2cefa8550ad8e4aea344f211e5061d00020000000000000000011a\",\n}\n```\n\n- *token* - the underlying token\n- *poolId* - the id of the Balancer pool\n"
  },
  "staked-balancer": {
    "key": "staked-balancer",
    "author": "jo-chemla",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Equivalent amount of token held in a staked balancer LP contract",
        "strategy": {
          "name": "staked-balancer",
          "params": {
            "tokenAddress": "0xcafe001067cdef266afb7eb5a286dcfd277f3de5",
            "balancerPoolId": "0xcb0e14e96f2cefa8550ad8e4aea344f211e5061d00020000000000000000011a",
            "stakingContract": "0xc8dc2ec5f5e02be8b37a8444a1931f02374a17ab",
            "symbol": "PSP"
          }
        },
        "network": "1",
        "addresses": [
          "0x3CE06981bC523f950E3dF346878216365B24b6Fe",
          "0x956a64f1028de63b3984637ddd10ae96662b3acd",
          "0x3ce06981bc523f950e3df346878216365b24b6fe",
          "0x5bb9d7c8e5b4767fdc754f67e6e701a55d3db1f9",
          "0x9c0d72f2ac26420cb7eeb155bf401b672840e87b"
        ],
        "snapshot": 13976779
      }
    ],
    "schema": null,
    "about": ""
  },
  "staked-uniswap-modifiable": {
    "key": "staked-uniswap-modifiable",
    "author": "doodley1",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Tokens staked in LP staking contract",
        "strategy": {
          "name": "staked-uniswap-modifiable",
          "params": {
            "tokenAddress": "0x2a2550e0a75acec6d811ae3930732f7f3ad67588",
            "uniswapAddress": "0x87051936dc0669460951d612fbbe93df88942229",
            "stakingAddress": "0xCF2026d955E6686B8582765BF0c5D2Ec05996796",
            "symbol": "PATH",
            "decimals": 18,
            "methodABI": {
              "name": "getTotalDeposit",
              "type": "function",
              "inputs": [
                {
                  "name": "_account",
                  "type": "address",
                  "internalType": "address"
                }
              ],
              "outputs": [
                {
                  "name": "",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ],
              "stateMutability": "view"
            }
          }
        },
        "network": "1",
        "addresses": [
          "0x29c0b49931A18CB8F343b8474D2fb103DBa1e294"
        ],
        "snapshot": 14022650
      }
    ],
    "schema": null,
    "about": "# Staked Uniswap Modifiable\n\nThis stategy is a fork of the staked-uniswap strategy that allows users to customise the function to get the total staked amount of uniswap-lp tokens in the contract.\n\nThis strategy returns a score that is equivalent to the token amount provided in the uniswap liqudity pool\n## Accepted options\n\n- **tokenAddress:** Token Address\n\n- **uniswapAddress:** Uniswap LP address\n\n- **stakingAddress:** LP staking address\n\n- **methodABI** ABI method to get total LP tokens staked in contract\n\n- **symbol** Token of ERC-20\n\n- **decimals** Decimals for ERC-20\n\n## Examples\n\n```JSON\n[\n {\n    \"name\": \"Tokens staked in LP staking contract\",\n    \"strategy\": {\n      \"name\": \"staked-uniswap-modifiable\",\n      \"params\": {\n        \"tokenAddress\": \"0x2a2550e0a75acec6d811ae3930732f7f3ad67588\",\n        \"uniswapAddress\": \"0x87051936dc0669460951d612fbbe93df88942229\",\n        \"stakingAddress\": \"0xCF2026d955E6686B8582765BF0c5D2Ec05996796\",\n        \"symbol\": \"PATH\",\n        \"decimals\": 18,\n        \"methodABI\": {\n          \"name\": \"getTotalDeposit\",\n          \"type\": \"function\",\n          \"inputs\": [\n            {\n              \"name\": \"_account\",\n              \"type\": \"address\",\n              \"internalType\": \"address\"\n            }\n          ],\n          \"outputs\": [\n            {\n              \"name\": \"\",\n              \"type\": \"uint256\",\n              \"internalType\": \"uint256\"\n            }\n          ],\n          \"stateMutability\": \"view\"\n        }\n      }\n    }\n }\n]\n```"
  },
  "erc1155-balance-of-ids": {
    "key": "erc1155-balance-of-ids",
    "author": "naomsa",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc1155-balance-of-ids",
          "params": {
            "symbol": "ABC",
            "address": "0x28472a58A490c5e09A238847F66A68a47cC76f0f",
            "ids": [
              "0"
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x34518f5559425a7bb06f66196920af10e1938b5f"
        ],
        "snapshot": 14039001
      }
    ],
    "schema": null,
    "about": ""
  },
  "erc1155-balance-of-ids-weighted": {
    "key": "erc1155-balance-of-ids-weighted",
    "author": "naomsa",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc1155-balance-of-ids-weighted",
          "params": {
            "symbol": "ABC",
            "address": "0x28472a58A490c5e09A238847F66A68a47cC76f0f",
            "ids": [
              "0",
              "1"
            ],
            "weight": 10
          }
        },
        "network": "1",
        "addresses": [
          "0x34518f5559425a7bb06f66196920af10e1938b5f"
        ],
        "snapshot": 14039001
      }
    ],
    "schema": null,
    "about": ""
  },
  "erc1155-weighted-by-id": {
    "key": "erc1155-weighted-by-id",
    "author": "isaac-martin",
    "version": "1.0.0",
    "examples": [
      {
        "name": "ERC1155 Weighted by id",
        "strategy": {
          "name": "erc1155-weighted-by-id",
          "params": {
            "symbol": "COINAGE",
            "address": "0x4776defcf622c60c6419cccc9ee9e9042fadf3f7",
            "ids": [
              "1",
              "3"
            ],
            "weight": [
              25,
              1
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x2274091DAad5B7bF734f426B9aA8513955075b9E",
          "0x65A922561638015E394A20356C31E9A6217513B8",
          "0x1A9deC77516BA05316938D7Fb32F51D646f8d91f"
        ],
        "snapshot": 16648731
      },
      {
        "name": "Example query",
        "strategy": {
          "name": "erc1155-weighted-by-id",
          "params": {
            "symbol": "COINAGE",
            "address": "0x4776defcf622c60c6419cccc9ee9e9042fadf3f7",
            "ids": [
              "2",
              "1"
            ],
            "weight": [
              50,
              10
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x2274091DAad5B7bF734f426B9aA8513955075b9E",
          "0x65A922561638015E394A20356C31E9A6217513B8",
          "0x1A9deC77516BA05316938D7Fb32F51D646f8d91f"
        ],
        "snapshot": 16648731
      }
    ],
    "schema": null,
    "about": "# erc1155-weighted-by-id\n\nThis strategy takes in an array of ERC1155 token ids and the weight attached to each token ID. It returns the highest value a wallet holds, and does not calculate a sum.\n\n## Params\n\n| Param                                                                             | Description                                                 | Required |\n| --------------------------------------------------------------------------------- | ----------------------------------------------------------- | -------- |\n| ids                                                                               | Array of ERC1155 Token IDs                                  | Yes      |\n| weight                                                                            | Array of Weights that map to the TokenID of the same index. |\n| The balance of an owners token is multiplied by the weight to calculate the score | Yes                                                         |\n"
  },
  "stakers-and-holders": {
    "key": "stakers-and-holders",
    "author": "tony31913",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Stakers and Holders",
        "strategy": {
          "name": "stakers-and-holders",
          "params": {
            "staking": "0x611D4fe3773606C7680020D1a59a2e8c5D43e682",
            "token": "0x79104Beca59CAe0EeeDd5ecB9fbc1AAD90cA40FE",
            "symbol": "HBC",
            "decimals": 0
          }
        },
        "network": "137",
        "addresses": [
          "0x5a0270Cf694a5b1e645dd5812f8d497B6bb87e07",
          "0x4C766160428cF0EE82b4dD677be90824A58E4855",
          "0x8Ba7789Bb5B4389904cEa64aB4942F55c464C2c5",
          "0x351A859bBA58C0E0589310D76E009F8d62Ae225A",
          "0xEe44B0dC609A670f99629eC400B27D61489b7bb1",
          "0x17af5cED4B2bA9F95E66EF22372900d367351A41"
        ],
        "snapshot": 24249987
      }
    ],
    "schema": null,
    "about": "# Stakers and holders strategy\n\nThis strategy return the balances of the voters from both staking pool and ERC721 NFT.\n\n## Accepted options\n\n- **staking:** Staking pool address.\n\n- **token:** ERC721 NFT address.\n\n## Examples\n\n```JSON\n[\n  {\n    \"name\": \"Stakers and Holders\",\n    \"strategy\": {\n      \"name\": \"stakers-and-holders\",\n      \"params\": {\n        \"staking\": \"0x611D4fe3773606C7680020D1a59a2e8c5D43e682\",\n        \"token\": \"0x79104Beca59CAe0EeeDd5ecB9fbc1AAD90cA40FE\",\n        \"symbol\": \"HBC\",\n        \"decimals\": 0\n      }\n    },\n    \"network\": \"137\",\n    \"addresses\": [\n      \"0x5a0270Cf694a5b1e645dd5812f8d497B6bb87e07\",\n      \"0x4C766160428cF0EE82b4dD677be90824A58E4855\"\n    ],\n    \"snapshot\": 24178477\n  }\n]\n```\n"
  },
  "banksy-dao": {
    "key": "banksy-dao",
    "author": "BanksyFarm",
    "version": "0.0.1",
    "examples": [
      {
        "name": "dao banksy farm",
        "strategy": {
          "name": "banksy-dao",
          "params": {
            "address": "0x942d791ab07e33Fe4B780Fc0b3874a24Ac3da433",
            "symbol": "BanksyNFT"
          }
        },
        "network": "43114",
        "addresses": [
          "0x503d2E56055c7078905369D7fA43c6f20C70a43a",
          "0x2730bd7b669e2B5fC6abcDBdf048f0D8e5b0fBE6",
          "0xb0dD83eDeB1e615F8E638F4824BA86C8053dF366"
        ],
        "snapshot": 10085683
      }
    ],
    "schema": null,
    "about": "# BanksyDAO\n\n  In Banksy Farm, NFTs are the backbone of the platform ownership. And the way to participate in this DAO.\n\nOur NFTs are composed by various skills, as shown [here](https://docs.banksy.farm/nfts/nft-composition).\nOne of the skill is \"Experience\", that starts at 0. And get increased as each community member uses this card.\n\nThis BanksyDAO strategy consists in reading the \"Experience\" skill of each NFT that the wallet owner has, and the following logic:\n1. If the NFTs has 0 \"Experience\", then it's vote value is 1.\n2. IF the NFTs has more than 0 \"Experience\", then the vote value equals the 1 + and extra value of the experience.\n3. IF the wallet has multiple NFTs. then the vote value is the sum of all NFTs.\n\n\n## Strategy Parameters\n\n  \n\nExample strategy params:\n\n  \n\n```json\n[\n  {\n    \"name\": \"dao banksy farm\",\n    \"strategy\": {\n      \"name\": \"banksy-dao\",\n      \"params\": {\n        \"address\": \"0x942d791ab07e33Fe4B780Fc0b3874a24Ac3da433\",\n        \"symbol\": \"BanksyNFT\"\n      }\n    },\n    \"network\": \"43114\",\n    \"addresses\": [\n      \"0x503d2E56055c7078905369D7fA43c6f20C70a43a\",\n      \"0x2730bd7b669e2B5fC6abcDBdf048f0D8e5b0fBE6\",\n      \"0xb0dD83eDeB1e615F8E638F4824BA86C8053dF366\"\n    ],\n    \"snapshot\": 10085683\n  }\n]\n\n```\n\n#####  DAO BANKSY.FINANCE ENHANCED BY NFT\n\n"
  },
  "spacey2025": {
    "key": "spacey2025",
    "author": "chuang39",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "spacey2025",
          "params": {
            "address": "0x230185C3B02b897B89cb1e62717AD7772b8319DA",
            "symbol": "NFT"
          }
        },
        "network": "56",
        "addresses": [
          "0xBAB298D0Dcb2589a1c24B6c88fb10BD08eFe3265",
          "0x71c06f42637489844cdb9238e9f6e6e5e0be0fc7",
          "0xcb02df5930d55f8ad9fdb37c0c24509ccb378f06"
        ],
        "snapshot": 14713766
      }
    ],
    "schema": null,
    "about": "Spacey2025\n\nThis strategy implements the voting power rules for blockchain game SpaceY2025(https://spacey2025.com). Voting power rules are as below:\n- SPAY x1\n- Ticket x1500\n- Land x600\n- Tower x6\n\n\nHere is an example of parameters:\n\n{\n    \"address\": \"0x230185C3B02b897B89cb1e62717AD7772b8319DA\",\n    \"symbol\": \"SPACEY NFT\"\n}\n"
  },
  "sandman-dao": {
    "key": "sandman-dao",
    "author": "sandmanfinance",
    "version": "0.0.1",
    "examples": [
      {
        "name": "dao sandman.finance",
        "strategy": {
          "name": "sandman-dao",
          "params": {
            "address": "0x743F554f6AcCd4E452AF6C96c48B78E849d87316",
            "symbol": "TheEndless"
          }
        },
        "network": "137",
        "addresses": [
          "0xA34f2b833753bCDb6e652A87B0d363FF8f1eE9c5",
          "0x6fEc079288329553F4d4512be33d05d5793e1f31"
        ],
        "snapshot": 24110041
      }
    ],
    "schema": null,
    "about": "\n# SandManDAO\n\n  In Sandman Finance, NFTs are the backbone of the platform ownership. And the way to participate in this DAO.\n\nOur NFTs are composed by various skills, as shown [here](https://docs.death.sandman.finance/nfts/nft-cards-composition).\nOne of the skill is \"Experience\", that starts at 0. And get increased as each community member uses this card.\n\nThis SandmanDAO strategy consists in reading the \"Experience\" skill of each NFT that the wallet owner has, and the following logic:\n1. If the NFTs has 0 \"Experience\", then it's vote value is 1.\n2. IF the NFTs has more than 0 \"Experience\", then the vote value equals the 1 + and extra value of the experience.\n3. IF the wallet has multiple NFTs. then the vote value is the sum of all NFTs.\n\n\n## Strategy Parameters\n\n  \n\nExample strategy params:\n\n  \n\n```json\n\n[\n\n{\n\n\"name\": \"DAO sandman.finance\",\n\n\"strategy\": {\n\n\"name\": \"sandManDAO\",\n\n\"params\": {\n\n\"address\": \"0x743F554f6AcCd4E452AF6C96c48B78E849d87316\",\n\n\"symbol\": \"TheEndless\"\n\n}\n\n},\n\n\"network\": \"137\",\n\n\"addresses\": [\n\n\"0xA34f2b833753bCDb6e652A87B0d363FF8f1eE9c5\",\n\n\"0x6fEc079288329553F4d4512be33d05d5793e1f31\"\n\n],\n\n\"snapshot\": 24110041\n\n}\n\n]\n```\n\n#####  DAO SANDMAN.FINANCE ENHANCED BY NFT"
  },
  "ve-balance-of-at": {
    "key": "ve-balance-of-at",
    "author": "spicysquid168",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "ve-balance-of-at",
          "params": {
            "address": "0xB7d85Ab25b9D478961face285fa3D8AAecAd24a9",
            "symbol": "xALPACA",
            "decimals": 18
          }
        },
        "network": "56",
        "addresses": [
          "0xdf7b69c22b96f2c7e07687971551021058260451",
          "0x466b32918a35d8c290793a99dd37b6e14bcf3e92",
          "0x4ea21fe653af9b524333512db3605830cc2fe592",
          "0x215462dc79523ac795216e1baa27586840fa9382",
          "0x5b4e7abcd18351f79211b6c9a6d1c3a3d329867d",
          "0x4b7841b4a99eba9b9209c0f63183e32a1f7d87bc",
          "0x29fec057b86ef46d240bd271837369f5715335ef",
          "0xed7f2016130ca5083261079c7b869cc3ab82181a",
          "0xb71d05cf5cdf7a9b15b20b9aab5e91332c271c96",
          "0xbc4811f78dcb2ac60c026e871f697d87fc36022b",
          "0xd1b38534fe56a0e44a3bc9341d5abea286c78a7c",
          "0x64088896525d5ba1079415ecc20818ae76251c6f",
          "0x4fcde7f599539b18fe4612e1df2663812bbaa1ff",
          "0x14b6b8e79959bb0b332787c4954c2a42d7d4a638",
          "0xc96caaac2cd4df2bfaab55f401e1ef5888b02ebb",
          "0xf72d9eb746386d3835af331ff791e7900d05b14c",
          "0x15c109307b99a10c665e1fa11147502b0001bb1a",
          "0x83c4b3a588116a870276e85fb9c7a80a343d13cb"
        ],
        "snapshot": 14848160
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. UNI"
              ],
              "maxLength": 16
            },
            "address": {
              "type": "string",
              "title": "Contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ]
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ]
            }
          },
          "required": [
            "address",
            "decimals"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# ve-balance-of-at\n\nThis returns the voting power of the voters for a ve-like token by calling `balanceOfAt` on the contract.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0xB7d85Ab25b9D478961face285fa3D8AAecAd24a9\",\n  \"symbol\": \"xALPACA\",\n  \"decimals\": 18\n}\n```\n"
  },
  "ve-ribbon": {
    "key": "ve-ribbon",
    "author": "chuddster",
    "version": "0.1.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "ve-ribbon",
          "params": {
            "address": "0x6123b0049f904d730db3c36a31167d9d4121fa6b",
            "symbol": "RBN",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x6b98259456fa6ca17df0fe5a8cfa829c30484eee",
          "0x309c65c98c56c4db478ec67d3d0c91738cbafc36",
          "0x57d98609d623b9885721a58b896d40c7871e1573",
          "0xdd00270d347ea0fc0fdd82e9385fbef0682c24f8",
          "0xcec909e109af27c4220d8c0400ec990126187dce",
          "0x7d79ab8c86eef9c6d3001822cca2384d314db999",
          "0x7ce68b8796144c4fd1af5d82d79ed2cbaf8b1ea5",
          "0xba1d28a156b69f0e07961e1adfd1fba24f249443",
          "0x22f9076c7c3436dae40a05cf4ea7d4174b458629",
          "0xbe370f522c2d8bfda9476048b1d3afc3a3bf537a",
          "0x4559d6b52b6a736684345b42d5e3ee8405991466",
          "0xdc212554bf38c0e8e8b2dff80ddba739dfdff5da"
        ],
        "snapshot": 14321000
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. UNI"
              ],
              "maxLength": 16
            },
            "address": {
              "type": "string",
              "title": "Contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ]
            }
          },
          "required": [
            "address",
            "decimals"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# ve-rbn\n\nThis strategy returns the RBN balance + locked RBN balance in voting escrow of the voters\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0x6123b0049f904d730db3c36a31167d9d4121fa6b\",\n  \"symbol\": \"RBN\",\n  \"decimals\": 18\n}\n```\n"
  },
  "ve-ribbon-voting-power": {
    "key": "ve-ribbon-voting-power",
    "author": "chuddster",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "ve-ribbon-voting-power",
          "params": {
            "address": "0x19854C9A5fFa8116f48f984bDF946fB9CEa9B5f7",
            "symbol": "veRBN",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x7b82ddcac8d0b137a09590838057c0a9d5bae3c3",
          "0x379bb4d5b82676b98ce29cbe824f808305107d56",
          "0x03fb1fd0fec2fb4d979b2e30a4adfaf868f85f0f",
          "0x47ed49b4eadce83993b005fd4456cdf66404d58d",
          "0xd925e71b56a84f8763895a6939320a2465d2618f",
          "0x0fa7744874bfedfc3d67ab57253d840be685fdc2",
          "0xcde3725b25d6d9bc78cf0941cc15fd9710c764b9",
          "0x02ef8147e2d0997cca48d99f01bad846d16558fa",
          "0x81324a39570bba1722a3cbe4a4cd372c24d084d4",
          "0x8f688a91695f7d2a1e93e57cedcbf5c5202f617b",
          "0x24f8d92794a283b454d1fc32722f51a4f3bc1ae5",
          "0x5abd0ffea71da700905c359ce0d0408fa78d120a",
          "0x85f15c9b2bfa79805205ed1df3570ad0875a24b2",
          "0x704d40d9212e511842fee1b667020a471ebe9ce0",
          "0xb4fbd802d9dc5c0208346c311bcb6b9ecff468c6",
          "0xb41c77b430e7f36f8b78c5c580828a5c62fdc352",
          "0x7b977a4bc02f87f7ac9a2afed8d71f87dbe2ac39",
          "0xa7cca50b9a8a2ffb5c0c047913fa1c088cd50bff"
        ],
        "snapshot": 14357198
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. UNI"
              ],
              "maxLength": 16
            },
            "address": {
              "type": "string",
              "title": "Contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ]
            }
          },
          "required": [
            "address",
            "decimals"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# ve-rbn\n\nThis strategy returns the effective voting power of veRBN lockers\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0x19854C9A5fFa8116f48f984bDF946fB9CEa9B5f7\",\n  \"symbol\": \"veRBN\",\n  \"decimals\": 18\n}\n```\n"
  },
  "chubbykaijudao": {
    "key": "chubbykaijudao",
    "author": "yosep",
    "version": "0.1.0",
    "examples": [
      {
        "name": "chubbykaijudao",
        "strategy": {
          "name": "chubbykaijudao",
          "params": {
            "staking": "0x42299C513e442123D0903ca9e4A009dEE89Ae5de",
            "token": "0x65b28ED75c12D8ce29d892DE9f8304A6D2e176A7",
            "symbol": "CKAIJU",
            "decimals": 0
          }
        },
        "network": "1",
        "addresses": [
          "0xbA6f51199725D4f1F6B1A9E5fEFdc597eDC89B8A",
          "0x9534643b04d4b51B90FcdDeeBB628efC54e58D64"
        ],
        "snapshot": 14129872
      }
    ],
    "schema": null,
    "about": "# ChubbyKaijuDAO strategy\n\nThis strategy return the balances of the voters for ChubbyKaijuDAO project from both staking pool and ERC721 NFT.\nMost of codes are from the \"mutant-cats-stakers-and-holders\" strategy.\n\n## Accepted options\n\n- **staking:** ChubbyKaijuDAO Gen1 staking V1 pool address.\n\n- **token:** ChubbyKaijuDAO Gen1 ERC721 NFT address.\n\n## Examples\n\n```JSON\n[\n  {\n    \"name\": \"chubbykaijudao\",\n    \"strategy\": {\n      \"name\": \"chubbykaijudao\",\n      \"params\": {\n        \"staking\": \"0x42299C513e442123D0903ca9e4A009dEE89Ae5de\",\n        \"token\": \"0x65b28ED75c12D8ce29d892DE9f8304A6D2e176A7\"\n      }\n    },\n    \"network\": \"1\",\n    \"addresses\": [ \n      \"0xbA6f51199725D4f1F6B1A9E5fEFdc597eDC89B8A\",\n      \"0x9534643b04d4b51B90FcdDeeBB628efC54e58D64\"\n    ],\n    \"snapshot\": 14129872\n  }\n]\n```\n"
  },
  "revest": {
    "key": "revest",
    "author": "RobAnon",
    "version": "0.1.0",
    "SUBGRAPH_URL": {
      "1": "https://api.thegraph.com/subgraphs/name/alexvorobiov/eip1155subgraph"
    },
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "revest",
          "params": {
            "address": "0xe952bda8c06481506e4731C4f54CeD2d4ab81659",
            "symbol": "RVST",
            "tokenVault": "0xA81bd16Aa6F6B25e66965A2f842e9C806c0AA11F",
            "staking": "0xbcbb435cf6f664caa5222c3ee01d1a377f12c428",
            "token": "0x120a3879da835A5aF037bB2d1456beBd6B54d4bA",
            "lpToken": "0x6490828Bd87Be38279A36F029f3b9Af8b4E14B49"
          }
        },
        "network": "1",
        "addresses": [
          "0xd08b7e82942fac71d96fecaa99ed7323a95d9a79",
          "0xD76F585b6B94202430875aE748fF8C038Dc64111",
          "0x013040bcc92ca0bec2670d61f06da7c36678222a",
          "0x9f75d69380a505a4e2AedB5C2dfdf41809E4D6C6",
          "0xD43e2ca9Ff4653Ef024BD26df925524bE4498C0B",
          "0x677b038Bc2DB99851be553673d0cBf8Cac6A0F3F",
          "0xcf7434dBB0f4F61855ADF5e9A3c117d9B5fAe903",
          "0xCedec45e06cBB9032625830C5FFB0CF3fAD1cF67",
          "0x4D3f9F513FC366Aa075e53B592dCE9c14BF838A6",
          "0x7E22AebC01ef48A2A6D39EaDF37b3BFac17C9649",
          "0xa4e7f2a1edb5ad886baa09fb258f8aca7c934ba6",
          "0xff80adc3eb2b549e9edf4b7109efe7487c805f85",
          "0xd9d455a8b8b9aeda2da66c52b80c90ef423409df",
          "0x000000000000000000000000000000000000dead"
        ],
        "snapshot": 14124450
      }
    ],
    "schema": null,
    "about": ""
  },
  "staking-claimed-unclaimed": {
    "key": "staking-claimed-unclaimed",
    "author": "ZombieDAODev",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Staking Claimed and Unclaimed",
        "strategy": {
          "name": "staking-claimed-unclaimed",
          "params": {
            "staking": "0x9b561710fEED0B8d829de89C82F80Bb7B2B364B8",
            "token": "0xceb726e6383468dd8ac0b513c8330cc9fb4024a8",
            "symbol": "WORMS",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x55975a6da3a41c3dd81e95673f6ded1856d34711",
          "0x0Fddf683A5F3a2B51704aAE4e828Ec9A35DEE5e5",
          "0xdeA8554F1ec3496e0c81219f01D22515A265eCd0",
          "0x5c86410bB3CfAA05a62802bcA20cCCbeEdF8f556"
        ],
        "snapshot": 14126302
      }
    ],
    "schema": null,
    "about": "# Staking Claimed & Unclaimed\n\nThis strategy can check the claimed and unclaimed balance of staking rewards, based off the Mutant Cat staking contract. This means that it will include the balance that is still pending in the contract.\n\nThe staking contract is expected to have the following two functions:\n- `depositsOf(address account) public view returns (uint256[] memory)`\n- `calculateRewards(address account, uint256[] tokenIds) public view returns (uint256[] memory)`\n\nThe strategy returns the total of claimed and unclaimed rewards token.\n\n## Accepted options\n\n- **staking:** The address of the staking contract\n\n- **token:** The address of the rewards ERC20 token\n\n- **symbol:** The symbol of the rewards token\n\n- **decimals** Decimals for ERC-20\n\n## Examples\n\n```JSON\n\n[\n  {\n    \"name\": \"Staking Claimed and Unclaimed\",\n    \"strategy\": {\n      \"name\": \"staking-claimed-unclaimed\",\n      \"params\": {\n        \"staking\": \"0x9b561710fEED0B8d829de89C82F80Bb7B2B364B8\",\n        \"token\": \"0xceb726e6383468dd8ac0b513c8330cc9fb4024a8\",\n        \"symbol\": \"WORMS\",\n        \"decimals\": 0\n      }\n    }\n  }\n]\n```\n"
  },
  "gysr-staking-balance": {
    "key": "gysr-staking-balance",
    "author": "devinaconley",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example GYSR staking balance query",
        "strategy": {
          "name": "gysr-staking-balance",
          "params": {
            "pool": "0x30C0f65D9b27EBE2CC2A49Cbcb4133230b3fb381",
            "symbol": "GYSR",
            "decimals": 18
          }
        },
        "network": 1,
        "addresses": [
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0xa0ffbF245095dBFbB3A76d86C18Cda009b96aD8B",
          "0x126bC064dBd1d0205fC608C3178a60C9706b482C",
          "0xC643B5B1d3912C52f9498E8C6E8BF321C94F28E9",
          "0x39cf6E97046cc8454fE0aaD04B05524Ae34025Cb",
          "0xA80481E3f9098602954B2E5cf306e6dEE053EF3E"
        ],
        "snapshot": 14200000
      },
      {
        "name": "Example GYSR NFT staking balance query on Polygon",
        "strategy": {
          "name": "gysr-staking-balance",
          "params": {
            "pool": "0xc8D2A357178b9466Ad0f153CD2c950226F612934",
            "symbol": "NFT",
            "decimals": 0
          }
        },
        "network": 137,
        "addresses": [
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x1Fd05325d3236D4e07963195538b75636ABDE75C",
          "0xa15226cAB1A266958f881Ec18035741D047aA47F",
          "0x97A8C2e0E1f17296e8C109eD136Fe9C75d745092",
          "0xdab44c6D2e0691856016B4412D70ecDE86b0d0b1",
          "0xA80481E3f9098602954B2E5cf306e6dEE053EF3E"
        ],
        "snapshot": 24976000
      }
    ],
    "schema": null,
    "about": "# GYSR staking balance\n\nThis strategy returns the staking balance for each user in a specified GYSR pool.\n\nHere is an example of parameters:\n\n```json\n{\n  \"pool\": \"0x30C0f65D9b27EBE2CC2A49Cbcb4133230b3fb381\",\n  \"symbol\": \"GYSR\",\n  \"decimals\": 18\n}\n```\n"
  },
  "gysr-lp-staking-balance": {
    "key": "gysr-lp-staking-balance",
    "author": "mitesh-mutha",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example GYSR LP Staking Query",
        "strategy": {
          "name": "gysr-lp-staking-balance",
          "params": {
            "pool": "0x05dff8d71cd222e09bb71e44e0be7cc8f03a07c9",
            "tokenAddress": "0xa92e7c82b11d10716ab534051b271d2f6aef7df5",
            "symbol": "ARA",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x29c0b49931A18CB8F343b8474D2fb103DBa1e294",
          "0xecfecf375160d2e3d1ab27a31a161d955c7650cb",
          "0x75f1771f278b064a6f09242ad8a8a5d1da1cc9bd",
          "0x001292f42f0ec85636f652f618fefd94bcc3ac6e"
        ],
        "snapshot": 15364930
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. UNI"
              ],
              "maxLength": 16
            },
            "pool": {
              "type": "string",
              "title": "Pool Address",
              "examples": [
                "e.g. 0x05dff8d71cd222e09bb71e44e0be7cc8f03a07c9"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "tokenAddress": {
              "type": "string",
              "title": "Token Address",
              "examples": [
                "e.g. 0xa92e7c82b11d10716ab534051b271d2f6aef7df5"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ]
            }
          },
          "required": [
            "pool",
            "tokenAddress",
            "decimals"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# gysr-lp-staking-balance\n\nThis strategy returns the LP staking balance for each user in a specified GYSR pool with a given token.\n\nHere is an example of the parameters:\n\n```json\n{\n  \"pool\": \"0x05dff8d71cd222e09bb71e44e0be7cc8f03a07c9\",\n  \"tokenAddress\": \"0xa92e7c82b11d10716ab534051b271d2f6aef7df5\",\n  \"symbol\": \"ARA\",\n  \"decimals\": 18\n}\n```\n"
  },
  "wanakafarm-staking": {
    "key": "wanakafarm-staking",
    "author": "TranTien139",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Wanakafarm stake query",
        "strategy": {
          "name": "wanakafarm-staking",
          "params": {
            "address": "0x339C72829AB7DD45C3C52f965E7ABe358dd8761E",
            "symbol": "WANA"
          }
        },
        "network": "56",
        "addresses": [
          "0xf0867d0e0689e63cd4a6a4aefe3d2eaf11bf9d2b"
        ],
        "snapshot": 15785276
      }
    ],
    "schema": null,
    "about": ""
  },
  "starsharks": {
    "key": "starsharks",
    "author": "starsharks",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "starsharks",
          "params": {
            "symbol": "VP",
            "chainId": 56
          }
        },
        "network": "56",
        "addresses": [
          "0x413134Dd97857F103964ed85d96D04ED744B9fc6",
          "0x82acB2ad3EF6A61c923D27b922bCaf89A97AC5A4"
        ],
        "snapshot": 15364151
      }
    ],
    "schema": null,
    "about": "# StarSharks\n\nStarSharks voting power strategy.\n"
  },
  "printer-financial": {
    "key": "printer-financial",
    "author": "printerfinancial",
    "version": "0.1.1",
    "examples": [
      {
        "name": "Example printer-financial query",
        "strategy": {
          "name": "printer-financial",
          "params": {
            "symbol": "INK",
            "lpPairAddress": "0xDECC75dBF9679d7A3B6AD011A98F05b5CC6A8a9d",
            "lpPoolAddress": "0xF95AB2A261B0920f3d5aBc02A41dBe125eBA10aE",
            "lpPoolId": "3",
            "printerAddress": "0xb1E6B2a4e6c5717CDBf8F6b01e89455C920a3646",
            "inkAddress": "0xFFAbb85ADb5c25D57343547a8b32B62f03814B12"
          }
        },
        "network": "250",
        "addresses": [
          "0x659fc9f71f407764D6C961Cea4c1814409feb5eE",
          "0x1CBC2226b57Ae4BDbF6BC5CE1908E9D1873553aa"
        ],
        "snapshot": 31153229
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. UNI"
              ],
              "maxLength": 16
            },
            "inkAddress": {
              "type": "string",
              "title": "INK contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "printerAddress": {
              "type": "string",
              "title": "Printer contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "lpPoolAddress": {
              "type": "string",
              "title": "LP Pool address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "lpPoolId": {
              "type": "string",
              "title": "LP Pool ID",
              "examples": [
                "e.g. 0"
              ],
              "pattern": "^[0-9]{1}$",
              "minLength": 1,
              "maxLength": 1
            },
            "lpPairAddress": {
              "type": "string",
              "title": "INK LP Pair address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            }
          },
          "required": [
            "inkAddress",
            "printerAddress",
            "lpPoolAddress",
            "lpPairAddress"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": ""
  },
  "ethercats-founders-series": {
    "key": "ethercats-founders-series",
    "author": "woodydeck",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "ethercats-founders-series",
          "params": {
            "symbol": "Meows"
          }
        },
        "network": "1",
        "addresses": [
          "0x03C4dcDbD7Efc4fD32e2C0E92D4E1F8B778e1A56",
          "0x0e917dcffb792dbfb36b75afcc1a5d6174ec94e2",
          "0x160e5B66f58924736B0a264f25ffd01e6732C39f"
        ],
        "snapshot": 14101221
      }
    ],
    "schema": null,
    "about": ""
  },
  "potion": {
    "key": "potion",
    "author": "bonustrack",
    "version": "0.1.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "potion",
          "params": {
            "address": "0xEDAC702337b70f176423175d2f30fDf9c7a613A4",
            "symbol": "SECRET"
          }
        },
        "network": "1",
        "addresses": [
          "0xDbaaE747346488f372F0168A2D515B63Eb6586ba",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x9C732F0ABd5961b2c7E23FF646cad187D2687e80",
          "0xAF1bff74708098dB603e48aaEbEC1BBAe03Dcf11",
          "0x149Df72C9B65E99897FFa6b988cEFcEb87fF0E91",
          "0xB4ACa4d18C3F3AD9Bfddd0A0dc8F669d51798dEA",
          "0x9aADd82015413781D4b030aB839E965b1Ae0b264",
          "0x2a20D21eAf90F14c0662ec94b3f1a192bbA17991"
        ],
        "snapshot": 14275528
      }
    ],
    "schema": null,
    "about": "# potion\n\nThis is a voting strategy specific for Potion DAO to vote with the Potion Unlock NFT secret length.\n"
  },
  "minotaur-money": {
    "key": "minotaur-money",
    "author": "pepperstepper",
    "version": "0.0.4",
    "examples": [
      {
        "name": "MinotaurMoney",
        "strategy": {
          "name": "minotaur-money",
          "params": {
            "symbol": "MINO"
          }
        },
        "network": "25",
        "addresses": [
          "0x4E5D385E44DCD0b7adf5fBe03A6BB867A8A90E7B",
          "0x86Fdd9980aCD3e2C8e7959Db344Ff6D5FD5743F5"
        ],
        "snapshot": 4521240
      }
    ],
    "schema": null,
    "about": ""
  },
  "conv-finance": {
    "key": "conv-finance",
    "author": "eric-convergence",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Convergence finance LP and staking pool balance",
        "strategy": {
          "name": "conv-finance",
          "params": {
            "address": "0x8006320739fC281da67Ee62eB9b4Ef8ADD5C903a",
            "symbol": "CONV",
            "decimals": 18,
            "lpTokenAddresses": [
              "0x30059f41bdde4256bf94c29e1ab74648b2a23e7b",
              "0x7ed6102f2a4d3aa47dcbf6a85abfee6fd2921a27",
              "0x083a91f24D02201946Ab6B1Ef3ACb60851432D1E",
              "0xACe46AeC3b4C5a353F44f89fBf0A9d886f27D6a2",
              "0xfaa5b559cd3dbE9329a5c4E4483c8DcC4B2C07C4"
            ],
            "stakingPools": [
              {
                "address": "0x72D7965fD3CD2b81Af638BbB0752DFdA362910B5",
                "pools": [
                  {
                    "poolId": "1",
                    "rewarderIdx": "1"
                  },
                  {
                    "poolId": "7",
                    "rewarderIdx": "0"
                  },
                  {
                    "poolId": "8",
                    "rewarderIdx": "0"
                  }
                ]
              }
            ],
            "stakingPoolsVersion": "2",
            "rewarder": [
              {
                "address": "0x5fC40FAd9728B45be4A762C02Fdb574b1E5E9e93",
                "poolIds": [
                  7
                ]
              },
              {
                "address": "0x823c9f78DD5cf945DB8d81Ac3A959fC0E6233bb9",
                "poolIds": [
                  1
                ]
              },
              {
                "address": "0x88Cb1456b8325aC99f90eBdadB1826516BfFc79a",
                "poolIds": [
                  2
                ]
              }
            ],
            "rewarderVersion": "2"
          }
        },
        "network": "1284",
        "addresses": [
          "0xa63982283bc992744f8ad978b09bf254aa964c0b",
          "0x76a743237fdab1c0d80d84fd08ef558dac8776ab",
          "0x941df80bc611ef10736f16441c36cb232cd07814",
          "0x873ca57e8236a3fd3834a7ef3fa624afad14a36e",
          "0xe51231daa306acf16eac34a864564ca36b262a1f"
        ],
        "snapshot": 563524
      }
    ],
    "schema": null,
    "about": ""
  },
  "sd-boost": {
    "key": "sd-boost",
    "author": "clement-ux",
    "version": "0.0.3",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "sd-boost",
          "params": {
            "sdToken": "0x402F878BDd1f5C66FdAF0fabaBcF74741B68ac36",
            "veToken": "0xc8418aF6358FFddA74e09Ca9CC3Fe03Ca6aDC5b0",
            "lockerToken": "0xCd3a267DE09196C48bbB1d9e842D7D7645cE448f",
            "gauge": "0xF3C6e8fbB946260e8c2a55d48a5e01C82fD63106",
            "symbol": "sdToken",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0xb7BFcDC3a2AA2aF3Fe653C9E8a19830977E1993C",
          "0x806346b423dDB4727C1f5dC718886430aA7CE9cF"
        ],
        "snapshot": 14476645
      }
    ],
    "schema": null,
    "about": "# sd-boost\n\nThis strategy is used by StakeDAO to vote with sdToken with veSDT voting boost\nHere is an example of parameters:\n\n```json\n{\n  \"sdToken\": \"0x402F878BDd1f5C66FdAF0fabaBcF74741B68ac36\",\n  \"veToken\": \"0xc8418aF6358FFddA74e09Ca9CC3Fe03Ca6aDC5b0\",\n  \"lockerToken\": \"0xCd3a267DE09196C48bbB1d9e842D7D7645cE448f\",\n  \"gauge\": \"0xF3C6e8fbB946260e8c2a55d48a5e01C82fD63106\",\n  \"symbol\": \"sdToken\",\n  \"decimals\": 18\n}\n```\n"
  },
  "wanakafarm-land-ingame": {
    "key": "wanakafarm-land-ingame",
    "author": "TranTien139",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Wanakafarm land ingame query",
        "strategy": {
          "name": "wanakafarm-land-ingame",
          "params": {
            "address": "0x339C72829AB7DD45C3C52f965E7ABe358dd8761E",
            "symbol": "WANA"
          }
        },
        "network": "56",
        "addresses": [
          "0xf0867d0e0689e63cd4a6a4aefe3d2eaf11bf9d2b"
        ],
        "snapshot": 15785276
      }
    ],
    "schema": null,
    "about": ""
  },
  "starcatchers-top-window": {
    "key": "starcatchers-top-window",
    "author": "sunshinekitty",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "starcatchers-top-window",
          "params": {
            "origin": 14277684,
            "delegateLimit": 1,
            "delegateDuration": 91000,
            "symbol": "STAR"
          }
        },
        "network": "1",
        "addresses": [
          "0x370f75a63F438186DbfECfD27cD75a5023bEa737",
          "0x239f4b81f1B54Ee89a506C98b34a4FF6b012f8E7",
          "0xB0B60594c97D73A16233B112f7fFa6aB470B1790"
        ],
        "snapshot": 14278000
      }
    ],
    "schema": null,
    "about": "# Starcatchers Top Wallet Window Strategy\n\nFetches Starcatchers Intergalactic Alliance subgraph to calculate top delegated\nwallets.  It then uses a block based window of time to determine the active\ndelegates in the selected cycle.\n\n## Parameters\n\n|    Parameter     |                        Desc                        |\n| ---------------- | -------------------------------------------------- |\n| origin           | At what block height does Intergalactic time begin |\n| delegateLimit    | Max delegates allowed to vote                      |\n| delegateDuration | How many blocks do delegates last                  |\n"
  },
  "gno": {
    "key": "gno",
    "author": "nginnever",
    "version": "0.1.1",
    "examples": null,
    "schema": null,
    "about": ""
  },
  "gno-vote-weight": {
    "key": "gno-vote-weight",
    "author": "nginnever",
    "version": "0.1.1",
    "examples": null,
    "schema": null,
    "about": ""
  },
  "masterchef-pool-balance-no-rewarddebt": {
    "key": "masterchef-pool-balance-no-rewarddebt",
    "author": "defimatt",
    "version": "0.0.1",
    "examples": [
      {
        "name": "RXS Example",
        "strategy": {
          "name": "masterchef-pool-balance-no-rewarddebt",
          "params": {
            "symbol": "RXS",
            "chefAddress": "0xcfA857d6EC2F59b050D7296FbcA8a91D061451f3",
            "uniPairAddress": null,
            "tokenIndex": null,
            "pid": "75",
            "weight": 1,
            "weightDecimals": 0
          }
        },
        "network": "56",
        "addresses": [
          "0x191727d22f2693100acef8e48F8FeaEaa06d30b1",
          "0xFAdE3DE0E802B9Bf52bD457389d933F9483fF2fD"
        ],
        "snapshot": 16801195
      },
      {
        "name": "RXS-BUSD LP Example",
        "strategy": {
          "name": "masterchef-pool-balance-no-rewarddebt",
          "params": {
            "symbol": "RXS-BUSD LP",
            "chefAddress": "0xcfA857d6EC2F59b050D7296FbcA8a91D061451f3",
            "uniPairAddress": "0xE576ebF57b3776f8892e2dF1787Cb163f41a1242",
            "tokenIndex": 0,
            "pid": "74",
            "weight": 1,
            "weightDecimals": 0
          }
        },
        "network": "56",
        "addresses": [
          "0xe563983d6f46266Ad939c16bD59E5535Ab6E774D"
        ],
        "snapshot": 16801195
      }
    ],
    "schema": null,
    "about": ""
  },
  "proof-of-humanity": {
    "key": "proof-of-humanity",
    "author": "jaybuidl",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "proof-of-humanity",
          "params": {
            "address": "0xC5E9dDebb09Cd64DfaCab4011A0D5cEDaf7c9BDb"
          }
        },
        "network": "1",
        "addresses": [
          "0x1d7b9b8234bb7d72ddb278977f63fcc304d6f5d4",
          "0xad51219eed2068da73ef6a3a8f19b6144c328a9f"
        ],
        "snapshot": 14551594
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "title": "PoH Contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            }
          },
          "required": [
            "address"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# proof-of-humanity\n\nIt checks if an address is registered with Proof of Humanity.\n\nIt takes the address of the Proof of Humanity contract as a parameter:\n\n```json\n{\n  \"address\": \"0x6b175474e89094c44da98b954eedeac495271d0f\"\n}\n```\n"
  },
  "sybil-protection": {
    "key": "sybil-protection",
    "author": "samuveth",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "sybil-protection",
          "params": {
            "strategy": {
              "name": "erc20-balance-of",
              "params": {
                "address": "0xc944E90C64B2c07662A292be6244BDf05Cda44a7",
                "symbol": "GRT",
                "decimals": 18
              }
            },
            "sybil": {
              "poh": "0xC5E9dDebb09Cd64DfaCab4011A0D5cEDaf7c9BDb",
              "brightId": "v5"
            }
          }
        },
        "network": "1",
        "addresses": [
          "0x7A38760C295f1ea086005214a279fb1280010483",
          "0xF78108c9BBaF466dd96BE41be728Fe3220b37119",
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x8d07D225a769b7Af3A923481E1FdF49180e6A265",
          "0x8f60501dE5b9b01F9EAf1214dbE1924aA97F7fd0",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x17ea92D6FfbAA1c7F6B117c1E9D0c88ABdc8b84C",
          "0x38C0039247A31F3939baE65e953612125cB88268"
        ],
        "snapshot": 15068173
      }
    ],
    "schema": null,
    "about": "# sybil-protection\n\nThis is the most common strategy, it returns the balances of the voters for a specific ERC20 token.\n\nHere is an example of parameters:\n\n```json\n{\n  \"strategy\": {\n    \"name\": \"erc20-balance-of\",\n    \"params\": {\n      \"address\": \"0xc944E90C64B2c07662A292be6244BDf05Cda44a7\",\n      \"symbol\": \"GRT\",\n      \"decimals\": 18\n    }\n  },\n  \"sybil\": {\n    \"poh\": \"0xC5E9dDebb09Cd64DfaCab4011A0D5cEDaf7c9BDb\",\n    \"brightId\": \"v5\"\n  }\n}\n```\n"
  },
  "samurailegends-generals-balance": {
    "key": "samurailegends-generals-balance",
    "author": "Samurai-Legends",
    "version": "0.2.0",
    "examples": [
      {
        "name": "Example Samurai Legends Generals balance query",
        "strategy": {
          "name": "samurailegends-generals-balance",
          "params": {
            "batchAddress": "0x7442bf183d95d6ef452375ee6d021b84c5bc46a9",
            "nftAddress": "0x14a3Ee3771845cee9EA2D49Fcca8DDA58f5D5D8b",
            "multiplier": 3,
            "treshold": 500
          }
        },
        "network": "97",
        "addresses": [
          "0x77a8e03bbA3F669A56C3F5e0194654b96C0d8449"
        ],
        "snapshot": 18684485
      }
    ],
    "schema": null,
    "about": "# samurailegends-generals-balance\n\nA strategy that calculates the amount of general NFTs a user owns (NFT's with ids under 5000), which gives the voting power score.\n\nHere is an example of parameters:\n\n```json\n{\n  \"batchAddress\": \"0x197352D6738011f2df1c3bB487a64aB075d1153A\",\n  \"nftAddress\": \"0x14a3Ee3771845cee9EA2D49Fcca8DDA58f5D5D8b\",\n  \"multiplier\": 400,\n  \"treshold\": 500\n}\n```\n\nParameter explanation:\n\n- **batchAddress** The address of the batch balance contract\n- **nftAddress** The address of the nft collection that should be fetched\n- **multiplier** The voting multiplier to use\n- **treshold** The treshold for which the NFTs should be counted (e.g. if 500, all under 500 are counted)\n"
  },
  "dogs-unchained": {
    "key": "dogs-unchained",
    "author": "dogsunchained",
    "version": "0.1.1",
    "examples": [
      {
        "name": "DU Global Voting Query",
        "strategy": {
          "name": "dogs-unchained",
          "params": {
            "boom": "0x1f17996beacc0803841d5f8cecc753e688fb5084",
            "dogs": "0x9c0ffc9088abeb2ea220d642218874639229fa7a",
            "steaks": "0xcab65c60d9dc47e1d450c7e9074f73f1ff75f181",
            "puppies": "0x948bc723d7e33575427270ac4f26c73b8ba938aa",
            "staking": "0xD742193C84062c1e0488545FB91A32D220Ec6c76",
            "decimals": 18
          }
        },
        "network": "1",
        "snapshot": 14616017,
        "addresses": [
          "0x99484019bdcd444af57a365bea0188f937fe751d",
          "0x34dde35b7a88a1634c5e5e7ab8f18e67974997c8",
          "0x8a91de08552c5b16930a25b3d88af17dfa44ba0c",
          "0x625a840144253a7dcb638de03454d6f281616ed3",
          "0x6795474c42d4562e7242b042d4b91b86a3e96889",
          "0x74c75f96f183e4553df09151de69b39c63a95fef",
          "0x9002b80e3fd2cfe9bb04d89438c55a0d08dd218c",
          "0xdcf3d0d56804bc4c04d034e323aa4ec77015e76c",
          "0xfd9395acb188ae0166d8ed970e1117410b67ad6d",
          "0x18b4ddab23483770af0b105e21145dfdaa047ab5",
          "0x1cc0c0921463ec1fa70b883df209d753f55e07e3",
          "0x30d02630998d983e4c3e07aa5bff2ee200c5ab64",
          "0x439c5deac76813e49a97362bb52ccdf649ea0511"
        ]
      }
    ],
    "schema": null,
    "about": "# DU \n\nThis strategy pulls ownership of BOOM, Dogs, Steaks, and Puppies. It checks for ownership both in-wallet and stake via direct contract calls and subgraph info.\n\nIt weights BOOM voting as 50% of all voting value, regardless of current BOOM supply."
  },
  "umami-voting": {
    "key": "umami-voting",
    "author": "EncryptedBunny",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "umami-voting",
          "params": {
            "address": "0x2adabd6e8ce3e82f52d9998a7f64a90d294a92a4",
            "symbol": "mUMAMI",
            "decimals": 9,
            "cmUMAMIAddress": "0x1922C36F3bc762Ca300b4a46bB2102F84B1684aB",
            "stakedcmUMAMIAddress": "0x6A0F4AFB31e90c378FA2Aaa40371a652578F339B"
          }
        },
        "network": "42161",
        "addresses": [
          "0xaDbb744a9434AAd006772CF76e79D246c4506D1B",
          "0x307923a41f1fe2cf876b2cb103e24438b56aba91",
          "0x375cf42640e384d04314cb1b76a36d1d2924460a"
        ],
        "snapshot": 9024000
      }
    ],
    "schema": null,
    "about": "# Contract call strategy\n\nAllows the tokens locked in marinate contract to be used to calculate voter scores.\nIncludes mUMAMI, cmUMAMI and Staked cmUMAMI\n\n\n```JSON\n{\n        \"address\": \"0x2adabd6e8ce3e82f52d9998a7f64a90d294a92a4\",\n        \"symbol\": \"mUMAMI\",\n        \"decimals\": 9,\n        \"cmUMAMIAddress\": \"0x1922C36F3bc762Ca300b4a46bB2102F84B1684aB\",\n        \"stakedcmUMAMIAddress\": \"0x6A0F4AFB31e90c378FA2Aaa40371a652578F339B\"\n}\n"
  },
  "liquidity-token-provide": {
    "key": "liquidity-token-provide",
    "author": "weizard",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "liquidity-token-provide",
          "params": {
            "address": "0xffffffff2ba8f66d4e51811c5190992176930278",
            "symbol": "COMBO"
          }
        },
        "network": "1",
        "addresses": [
          "0xe4ef29545db14e252AeC1c660A004e2408Dc62d2",
          "0xa3c1c91403f0026b9dd086882adbc8cdbc3b3cfb"
        ],
        "snapshot": 14716396
      }
    ],
    "schema": null,
    "about": "# Liquidity Providers\n\n\nFork from infinityprotocol-liquidity-pools. Fix there is some protocol can't query `users` issue.\n\nThis strategy will return the scores of all users who have provided token liquidity on any Uniswap style exchange. Users can change the subGraphURL field to direct their request to a different subgraph.\n\n\n## Example\n\nThe space config will look like this:\n\n```JSON\n{\n  \"address\": \"0xffffffff2ba8f66d4e51811c5190992176930278\",\n  \"symbol\": \"COMBO\"\n  // subgraphURL for the request\n  \"subGraphURL\": \"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\",\n  // scoreMultiplier can be used to increase users' scores by a certain magnitude\n  \"scoreMultiplier\": 1,\n}\n```\n"
  },
  "gamium-voting": {
    "key": "gamium-voting",
    "author": "gamiumworld",
    "version": "0.1.0",
    "examples": [
      {
        "name": "GAMIUM Holders & Stakers",
        "strategy": {
          "name": "gamium-voting",
          "params": {
            "token": "0x5B6bf0c7f989dE824677cFBD507D9635965e9cD3",
            "lp_token": "0xEdeec0ED10Abee9b5616bE220540CAb40C9d991E",
            "staking_token": "0x8a3FB54dE0df64915FD66B55e1594141C1A880AB",
            "staking_pair": "0xaD0916e7Ba7100629EAe9143e035F98ab5EA4ABd",
            "symbol": "GMM",
            "decimals": 18
          }
        },
        "network": "56",
        "addresses": [
          "0xbf9Cd2f0902e1c09A096384b3D673728BcEB5a48",
          "0xD662F69daA8acD8A4eBD7E25fcF1cFc054106Ce9",
          "0x02622882eDE73f887D5602B2F8285a43A528a120",
          "0xcE12c8FdFa479FD9e1B37327ee960ea441E4bc80"
        ],
        "snapshot": 17342974
      }
    ],
    "schema": null,
    "about": "# gamium-voting\n\nThis is the voting strategy for holders and stakers of Gamium's ERC20 token (GMM).\n\nHere is an example of parameters:\n\n```json\n{\n  \"token\": \"0x5B6bf0c7f989dE824677cFBD507D9635965e9cD3\",\n  \"lp_token\": \"0xEdeec0ED10Abee9b5616bE220540CAb40C9d991E\",\n  \"staking_token\": \"0x8a3FB54dE0df64915FD66B55e1594141C1A880AB\",\n  \"staking_pair\": \"0xaD0916e7Ba7100629EAe9143e035F98ab5EA4ABd\",\n  \"symbol\": \"GMM\",\n  \"decimals\": 18\n}\n```\n"
  },
  "citydao-square-root": {
    "key": "citydao-square-root",
    "author": "citydao",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example",
        "strategy": {
          "name": "citydao-square-root",
          "params": {
            "symbol": "CITIZEN",
            "address": "0x7EeF591A6CC0403b9652E98E88476fe1bF31dDeb",
            "tokenId": 42,
            "decimals": 0
          }
        },
        "network": "1",
        "addresses": [
          "0xafa46468De1D6f1ab77DEFAe5F7657467911182d",
          "0x944Fd37C2a46A3ad6B5EE11f7e26035Ed2F1E4FE",
          "0x4c55C41Bd839B3552fb2AbecaCFdF4a5D2879Cb9"
        ],
        "snapshot": 14616178
      },
      {
        "name": "Plural Voting Example",
        "strategy": {
          "name": "citydao-square-root",
          "params": {
            "symbol": "CITIZEN",
            "address": "0x7EeF591A6CC0403b9652E98E88476fe1bF31dDeb",
            "tokenId": 42,
            "decimals": 0,
            "voiceCredits": 9
          }
        },
        "network": "1",
        "addresses": [
          "0xafa46468De1D6f1ab77DEFAe5F7657467911182d",
          "0x944Fd37C2a46A3ad6B5EE11f7e26035Ed2F1E4FE",
          "0x4c55C41Bd839B3552fb2AbecaCFdF4a5D2879Cb9"
        ],
        "snapshot": 14616178
      }
    ],
    "schema": null,
    "about": "# CityDAO Square Root Strategy\n\nHolders of an ERC1155 token can cast a number of votes equal to the square root of their net token holdings.\n\n### Example\n\nThis example uses [CityDAO's Citizen Token](https://opensea.io/assets/0x7eef591a6cc0403b9652e98e88476fe1bf31ddeb/42).\n\n```json\n{\n  \"symbol\": \"CITIZEN\",\n  \"address\": \"0x7EeF591A6CC0403b9652E98E88476fe1bF31dDeb\",\n  \"tokenId\": 42,\n  \"decimals\": 0\n}\n```\n\n### Development\n\n#### Testing\n\n```shell\nyarn test --strategy=citydao-square-root\n```\n\n#### Changelog\n\n- **0.0.1**\n  - Makes initial commit of strategy.\n"
  },
  "rowdy-roos": {
    "key": "rowdy-roos",
    "author": "npbroo",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Rowdy Roos",
        "strategy": {
          "name": "rowdy-roos",
          "params": {
            "staking": "0xcC5CcdcbB9C4bc26e387052a94FA93b8890D5693",
            "token": "0x2Af3cc814B0a10ABeD25C62b9bB679Da667E4bda",
            "symbol": "BOBL",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x9E2Ae5480ca4933149E6E1D834b3a880c4fC90Db"
        ],
        "snapshot": 14848961
      }
    ],
    "schema": null,
    "about": "# Rowdy Roos Voting Strategy\n\nThis strategy can check the claimed balance and unclaimed balance of staking rewards, based off the Rowdy Roos staking contract. This means that it will include the balance that is still pending in the contract.\n\nThe staking contract is expected to have the following two functions:\n- `function getStakedTokens(address _owner) external view returns (uint16[] memory)`\n- `function currentRewardsOf(uint16 _tokenId) public view returns (uint256)`\n\nThe strategy returns the total of claimed and unclaimed rewards token.\n\n## Accepted options\n\n- **staking:** The address of the staking contract\n\n- **token:** The address of the rewards ERC20 token\n\n- **symbol:** The symbol of the rewards token\n\n- **decimals** Decimals for ERC-20\n\n## Examples\n\n```JSON\n\n[\n  {\n    \"name\": \"Balance and Staking Unclaimed\",\n    \"strategy\": {\n      \"name\": \"balance-and-staking-unclaimed\",\n      \"params\": {\n        \"staking\": \"0xcC5CcdcbB9C4bc26e387052a94FA93b8890D5693\",\n        \"token\": \"0x2Af3cc814B0a10ABeD25C62b9bB679Da667E4bda\",\n        \"symbol\": \"BOBL\",\n        \"decimals\": 18\n      }\n    }\n  }\n]\n```\n"
  },
  "hedgey": {
    "key": "hedgey",
    "author": "Hedgey",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example voting based on hedgey token underlying balance",
        "strategy": {
          "name": "hedgey",
          "params": {
            "contractAddress": "0x8d53fd121198d0982f8e19286e924c78ed5a6a7a",
            "token": "0xb0C5f3100A4d9d9532a4CfD68c55F1AE8da987Eb",
            "decimals": 18
          }
        },
        "network": "100",
        "snapshot": 22423721,
        "addresses": [
          "0x92d9802eFcD0485876DDC13c16cEA67e6aD5EB35"
        ]
      }
    ],
    "schema": null,
    "about": "# Hedgey strategy\n\nCalculates voting rights based on the underlying tokens locked in the Hedgey protocol\n\n## Examples\n\nRequires 3 input parameters:\n\ncontractAddress\n\nThe address of the Hedgey NFT contract deployed on the selected network.\n\ntoken\n\nThe token address that contains the token balance for voting rights\n\ndecimals\n\nThe number of decimals used by the token (usually 18)\n"
  },
  "hedgey-delegate": {
    "key": "hedgey-delegate",
    "author": "hedgey-finance",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Example voting based on hedgey vesting token with delegation and multiplier",
        "strategy": {
          "name": "hedgey-delegate",
          "params": {
            "contracts": [
              "0xce7ac66e78aae01d899eb90b63d1f20be2e9c4b1",
              "0x24f4BC74C00412422C9D2A7c78033fc8Aea8Da18"
            ],
            "token": "0xE13FB676E9bdd7AFda91495eC4e027FC63212FC3",
            "symbol": "TACO",
            "decimals": 18,
            "multiplier": 10
          }
        },
        "network": "5",
        "addresses": [
          "0xAa9c3a194C9E78085260dfC7EAcFef51653412Bf",
          "0x92d9802eFcD0485876DDC13c16cEA67e6aD5EB35",
          "0xF0138A76223d93192C9c903520f1cf95c9094065",
          "0xDC13Ab880e2AB7b5544a7b927769B5CEc6d62a0b",
          "0xe31D847B47465cC2745319dAc9E0c6ac711cA10b"
        ],
        "snapshot": 8974862
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. UNI"
              ],
              "maxLength": 16
            },
            "contracts": {
              "type": "array",
              "title": "Hedgey Contract addresses",
              "items": {
                "type": "string",
                "examples": [
                  "e.g. 0xCe7Ac66E78aAE01d899eb90b63D1f20bE2E9c4B1"
                ],
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "minLength": 42,
                "maxLength": 42
              }
            },
            "token": {
              "type": "string",
              "title": "Token Contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ]
            },
            "multiplier": {
              "type": "number",
              "title": "Multiplier",
              "examples": [
                "e.g. 1"
              ]
            }
          },
          "required": [
            "contracts",
            "token",
            "decimals",
            "multiplier"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# hedgey-delegate\n\nThis strategy calls the delegatedBalances function on Hedgey Vesting contracts\n\nIt can also apply a multiplier to the value returned\n\nHere is an example of parameters:\n\n```json\n{\n  \"contract\": \"0xce7ac66e78aae01d899eb90b63d1f20be2e9c4b1\",\n  \"token\": \"0xE13FB676E9bdd7AFda91495eC4e027FC63212FC3\",\n  \"symbol\": \"TACO\",\n  \"decimals\": 18,\n  \"multiplier\": 10\n}\n```\n"
  },
  "ve-balance-of-at-nft": {
    "key": "ve-balance-of-at-nft",
    "author": "thlynn",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "ve-balance-of-at-nft",
          "params": {
            "address": "0xc8034b3dF18Ea4d607E86D6b6Bf23E2A8Ed70F89",
            "symbol": "vedcMST",
            "decimals": 18
          }
        },
        "network": "250",
        "addresses": [
          "0x378f7533041249cd1806550deaA2f73A856c9889",
          "0x83BB8062ea95E7a234c48778590cEA150217627D",
          "0x9Fd7f1aE7e600056E34b9515443600F01AD95a28"
        ],
        "snapshot": 39532840
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. UNI"
              ],
              "maxLength": 16
            },
            "address": {
              "type": "string",
              "title": "Contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ]
            }
          },
          "required": [
            "address",
            "decimals"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# ve-balance-of-at-nft\n\nThis returns the voting power of the voters for his ve NFTs by calling `balanceOfAtNFT` on the contract.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0xc8034b3dF18Ea4d607E86D6b6Bf23E2A8Ed70F89\",\n  \"symbol\": \"vedcMST\",\n  \"decimals\": 18\n}\n```"
  },
  "genzees-from-subgraph": {
    "key": "genzees-from-subgraph",
    "author": "alephao",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "genzees-from-subgraph",
          "params": {
            "symbol": "GZ",
            "graph": "https://api.thegraph.com/subgraphs/name/alephao/genzee"
          }
        },
        "network": "1",
        "addresses": [
          "0x000000070f91b6c56fa08d4f3a26c7fc992b38f4",
          "0x0007796d3b5bae6e3960ecb639bc159f6c1dcdf0",
          "0x000d65681e8df8a6ad5bc864833c38c9ecdac0ff",
          "0x0010e29271bbca7abfbbbda1bdec668720cca795",
          "0x002c609dc34918269e2174d82fcb6ecb4f6cf386"
        ],
        "snapshot": 14893355
      }
    ],
    "schema": null,
    "about": "This is simple strategy to use balance from graph instead of archive node.\n\nThe configuration would be like this:\n\n```json\n{\n    \"symbol\": \"GZ\",\n    \"graph\": \"the api address of your graph\",\n}\n```\n\nThe schema of the graph project is:\n\n```\nUser {\n    id: ID!\n    genzeeBalance: Int!\n}\n```\n\nAs a example, here is a the graph project for Genzee NFTs: [genzee](https://thegraph.com/hosted-service/subgraph/alephao/genzee).\n"
  },
  "position-governance-power": {
    "key": "position-governance-power",
    "author": "JustinPosition",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "position-governance-power",
          "params": {
            "address": "0x5ca42204cdaa70d5c773946e69de942b85ca6706",
            "symbol": "POSI",
            "decimals": 18,
            "stakeManagerAddress": "0x0C54B0b7d61De871dB47c3aD3F69FEB0F2C8db0B",
            "nftStakingPoolAddress": "0x6257229FA379AFDBb91732091B5DE32cdB759845"
          }
        },
        "network": "56",
        "addresses": [
          "0xA3772E9B69b5877dde7580D17aE9716d228aafde",
          "0x694fC01E9A8A0E4814B15B15317Db42D777F8b2B",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad"
        ],
        "snapshot": 18482717
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. UNI"
              ],
              "maxLength": 16
            },
            "address": {
              "type": "string",
              "title": "Contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ]
            },
            "stakeManagerAddress": {
              "type": "string",
              "title": "Stake Manager Contract address",
              "examples": [
                "e.g. 0x0C54B0b7d61De871dB47c3aD3F69FEB0F2C8db0B"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "nftStakingPoolAddress": {
              "type": "string",
              "title": "NFT Stake Contract address",
              "examples": [
                "e.g. 0x6257229FA379AFDBb91732091B5DE32cdB759845"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            }
          },
          "required": [
            "address",
            "decimals",
            "stakeManagerAddress",
            "nftStakingPoolAddress"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# position-governance-power\n\nAllows the tokens staked in the staking contracts, and casted NFT to be used to calculate voter scores.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0x5ca42204cdaa70d5c773946e69de942b85ca6706\",\n  \"symbol\": \"POSI\",\n  \"decimals\": 18,\n  \"stakeManagerAddress\": \"0x0C54B0b7d61De871dB47c3aD3F69FEB0F2C8db0B\",\n  \"nftStakingPoolAddress\": \"0x6257229FA379AFDBb91732091B5DE32cdB759845\"\n}\n```\n"
  },
  "credit-lp": {
    "key": "credit-lp",
    "author": "0xEntropy",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Credit LP",
        "strategy": {
          "name": "credit-lp",
          "params": {
            "address": "0x77128DFdD0ac859B33F44050c6fa272F34872B5E",
            "lpToken": "0x06F3Cb227781A836feFAEa7E686Bdc857e80eAa7",
            "masterchef": "0xe0c43105235C1f18EA15fdb60Bb6d54814299938",
            "crypt": "0xAD48320c7e3D3e9fF0c7e51608869cbbfFE7422C",
            "pid": 1,
            "symbol": "CREDIT",
            "decimals": 18
          }
        },
        "network": "250",
        "addresses": [
          "0x70f8892B9AEd192b3E794f9398B62D50Cf2fbBf8",
          "0x865b59FeE0Fd5230BED5Cf9D0A15151C21BF0499",
          "0xa0AD4e0111bE3d664262488fb54e2e543C9C2B54",
          "0xaC207c599e4A07F9A8cc5E9cf49B02E20AB7ba69",
          "0x6D5C8b593958eE0cB7aD6Ac2531AB1b818186857"
        ],
        "snapshot": 39939923
      }
    ],
    "schema": null,
    "about": ""
  },
  "helix": {
    "key": "helix",
    "author": "helixgeometry",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example query Helix",
        "strategy": {
          "name": "helix",
          "params": {
            "address": "0x79DD2dad8D04F9279F94580DBEd2306A0aE118Bd",
            "masterChef": "0x15B400a434E0d94e0F1e1A0AA4a08E98A2d04128",
            "autoHelix": "0xF34316463B29B0D7A387a8443b2E17B3629e99b2",
            "vault": "0x370650b477D550E4611CCe63eE8b7eCa64F207C0",
            "helixLPs": [
              {
                "address": "0xfbfe53025c54b70b48070904f8765703D2aD749D",
                "pid": 1
              },
              {
                "address": "0x161962Aec8f3c61D865cd5d53A334780763364e6",
                "pid": 2
              }
            ],
            "symbol": "HELIX",
            "decimals": 18
          }
        },
        "network": "4",
        "addresses": [
          "0x2155BCeA4f362D5D9CE67817b826A8F31b61D0BF",
          "0xb1F7D313Ce45fe62EdE9CE4cfb46833051d38e57"
        ],
        "snapshot": 10819269
      }
    ],
    "schema": null,
    "about": "# Helix\n\nThis is the strategy, it returns the balances of the voters for HELIX token balances\nin Helix project(pools, farms, vaults, token).\n\nHere is an example of parameters:\n\n```json\n[\n  {\n    \"name\": \"Example query Helix\",\n    \"strategy\": {\n      \"name\": \"helix\",\n      \"params\": {\n        \"address\": \"0x79DD2dad8D04F9279F94580DBEd2306A0aE118Bd\",\n        \"masterChef\": \"0x15B400a434E0d94e0F1e1A0AA4a08E98A2d04128\",\n        \"autoHelix\": \"0xF34316463B29B0D7A387a8443b2E17B3629e99b2\",\n        \"vault\": \"0x370650b477D550E4611CCe63eE8b7eCa64F207C0\",\n        \"helixLPs\": [\n          {\n            \"address\": \"0xfbfe53025c54b70b48070904f8765703D2aD749D\",\n            \"pid\": 1\n          },\n          {\n            \"address\": \"0x161962Aec8f3c61D865cd5d53A334780763364e6\",\n            \"pid\": 2\n          }\n        ],\n        \"symbol\": \"HELIX\",\n        \"decimals\": 18\n      }\n    },\n    \"network\": \"4\",\n    \"addresses\": [\n      \"0x2155BCeA4f362D5D9CE67817b826A8F31b61D0BF\",\n      \"0xb1F7D313Ce45fe62EdE9CE4cfb46833051d38e57\"\n    ],\n    \"snapshot\": 10819269\n  }\n]\n```\n"
  },
  "aura-vault-balance-of-single-asset": {
    "key": "aura-vault-balance-of-single-asset",
    "author": "chuddster",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "aura-vault-balance-of-single-asset",
          "params": {
            "auraVaultDeposit": "0x712cc5bed99aa06fc4d5fb50aea3750fa5161d0f",
            "tokenIndex": "1",
            "decimals": "18"
          }
        },
        "network": "1",
        "addresses": [
          "0x905c1cA2ac32eE0799E4Aa31927f1166A93F3b17",
          "0x4F76fF660dc5e37b098De28E6ec32978E4b5bEb6",
          "0xDA6b2a5e0c56542984d84A710F90EefD94CA1991",
          "0xa669070D106E96CC2390523E9745B425a1b3a0E0"
        ],
        "snapshot": 16897224
      }
    ],
    "schema": null,
    "about": "# aura-vault-balance-of-single-asset\n\nThis strategy returns the balance of an underlying asset in a BPT LP pair staked on Aura\n\nFor example:\n- aura50WETH-50AURA-vault total supply: 137,880 (staked BPT)\n- 50WETH-50AURA total supply: 145,710 (unstaked BPT)\n- token of interest (either WETH or AURA): AURA\n- Alice aura50WETH-50AURA-vault balance: 50,000\n- 50WETH-50AURA total Aura balance: 1,878,388\n\n_Note: aura50WETH-50AURA-vault and 50WETH-50AURA minted 1:1_\n\nAlice AURA balance: 1,878,388 AURA * 50,000 / 145,710 = 644,563 AURA\n\n## Params\n\n- `auraVaultDeposit` - (**Required**, `string`) Address of aura vault deposit token (ex: aura50WETH-50AURA-vault address)\n- `tokenIndex` - (**Required**, `string`) Index of token in 50/50 pair on Balancer Vault\n- `decimals` - (**Required**, `string`) Decimals of underlying asset\n\nHere is an example of parameters:\n\n```json\n{\n    \"auraLocker\": \"0x712cc5bed99aa06fc4d5fb50aea3750fa5161d0f\",\n    \"auraVoterProxy\": \"1\",\n    \"votingEscrow\": \"18\"\n}\n```\n"
  },
  "rocketpool-node-operator": {
    "key": "rocketpool-node-operator",
    "author": "rocket-pool",
    "version": "0.1.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "rocketpool-node-operator",
          "params": {
            "address": "0xD33526068D116cE69F19A9ee46F0bd304F21A51f",
            "symbol": "RPL",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x17Fa597cEc16Ab63A7ca00Fb351eb4B29Ffa6f46",
          "0xca317A4ecCbe0Dd5832dE2A7407e3c03F88b2CdD",
          "0x327260c50634136551bfE4e4eB082281555AAfAE",
          "0x5d8172792a9e649053c07366E3a7C24a37F0C534",
          "0x701F4dcEAD1049FA01F321d49F6dca525cF4A5A5",
          "0xb8ed9ea221bf33d37360A76DDD52bA7b1E66AA5C",
          "0xbfaf9BFa09F26EF8104A6d5FF09afdCC9300E5bc",
          "0x174E0b45C03318B0C9bc03573028605B26764931",
          "0x5f4cb66c9b1ed8a4758a059fdb10e0f72c307d8a",
          "0x24609303b67051ef77735e34d671e2a13e3da35d",
          "0xe35854cde18a3cc4706134b4850dd861a55b9a30",
          "0x53938f795ab6c57070aad32905a70a2e5961a887",
          "0xD6527Bd3d62f1Da520E6f74B89EBD8F8cD04564f",
          "0xf8bFf17a1C9dfC632F6C905d12C404AfE451B16c",
          "0x689c6853f3debac91b72f32bafa83200eec9613c",
          "0xaebb400542598e6ee58b2fdf2e7425c07e8ba68d"
        ],
        "snapshot": 14490773
      }
    ],
    "schema": null,
    "about": "# rocketpool-node-operator\n\nThis is a strategy for staking node operators, it returns the half square rooted node effective stake balance given a node address.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0xD33526068D116cE69F19A9ee46F0bd304F21A51f\",\n  \"symbol\": \"RPL\",\n  \"decimals\": 18\n}\n```\n"
  },
  "rocketpool-node-operator-v2": {
    "key": "rocketpool-node-operator-v2",
    "author": "rocket-pool",
    "version": "0.1.2",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "rocketpool-node-operator-v2",
          "params": {
            "address": "0xD33526068D116cE69F19A9ee46F0bd304F21A51f",
            "symbol": "RPL",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x17Fa597cEc16Ab63A7ca00Fb351eb4B29Ffa6f46",
          "0xca317A4ecCbe0Dd5832dE2A7407e3c03F88b2CdD",
          "0x327260c50634136551bfE4e4eB082281555AAfAE",
          "0x5d8172792a9e649053c07366E3a7C24a37F0C534",
          "0x701F4dcEAD1049FA01F321d49F6dca525cF4A5A5",
          "0xb8ed9ea221bf33d37360A76DDD52bA7b1E66AA5C",
          "0xbfaf9BFa09F26EF8104A6d5FF09afdCC9300E5bc",
          "0x174E0b45C03318B0C9bc03573028605B26764931",
          "0x5f4cB66c9B1Ed8A4758A059FDB10E0F72C307D8A",
          "0x24609303B67051eF77735E34D671e2A13E3Da35d",
          "0xE35854CdE18A3cC4706134b4850Dd861a55B9A30",
          "0x53938f795AB6c57070AAd32905a70A2E5961A887",
          "0xD6527Bd3d62f1Da520E6f74B89EBD8F8cD04564f",
          "0xf8bFf17a1C9dfC632F6C905d12C404AfE451B16c",
          "0x689C6853f3deBac91b72f32BafA83200eeC9613C",
          "0xaEbb400542598E6ee58b2FDF2E7425c07E8Ba68D"
        ],
        "snapshot": 17761214
      }
    ],
    "schema": null,
    "about": "# rocketpool-node-operator-v2\n\nThis is a strategy for staking node operators, it returns the half square rooted node effective stake balance given a node address.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0xD33526068D116cE69F19A9ee46F0bd304F21A51f\",\n  \"symbol\": \"RPL\",\n  \"decimals\": 18\n}\n```\n"
  },
  "rocketpool-node-operator-v3": {
    "key": "rocketpool-node-operator-v3",
    "author": "rocket-pool",
    "version": "0.1.3",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "rocketpool-node-operator-v3",
          "params": {
            "address": "0xD33526068D116cE69F19A9ee46F0bd304F21A51f",
            "symbol": "RPL",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x17Fa597cEc16Ab63A7ca00Fb351eb4B29Ffa6f46",
          "0xca317A4ecCbe0Dd5832dE2A7407e3c03F88b2CdD",
          "0x327260c50634136551bfE4e4eB082281555AAfAE",
          "0x5d8172792a9e649053c07366E3a7C24a37F0C534",
          "0x701F4dcEAD1049FA01F321d49F6dca525cF4A5A5",
          "0xb8ed9ea221bf33d37360A76DDD52bA7b1E66AA5C",
          "0xbfaf9BFa09F26EF8104A6d5FF09afdCC9300E5bc",
          "0x174E0b45C03318B0C9bc03573028605B26764931",
          "0x5f4cB66c9B1Ed8A4758A059FDB10E0F72C307D8A",
          "0x24609303B67051eF77735E34D671e2A13E3Da35d",
          "0xE35854CdE18A3cC4706134b4850Dd861a55B9A30",
          "0x53938f795AB6c57070AAd32905a70A2E5961A887",
          "0xD6527Bd3d62f1Da520E6f74B89EBD8F8cD04564f",
          "0xf8bFf17a1C9dfC632F6C905d12C404AfE451B16c",
          "0x689C6853f3deBac91b72f32BafA83200eeC9613C",
          "0xaEbb400542598E6ee58b2FDF2E7425c07E8Ba68D",
          "0xa016344b2D4dfBf370766F24d196171DeC86544A"
        ],
        "snapshot": 17761214
      }
    ],
    "schema": null,
    "about": "# rocketpool-node-operator-v3\n\nThis is a strategy for staking node operators, it returns the half square rooted node effective stake balance given a node address.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0xD33526068D116cE69F19A9ee46F0bd304F21A51f\",\n  \"symbol\": \"RPL\",\n  \"decimals\": 18\n}\n```\n"
  },
  "earthfund-child-dao-staking-balance": {
    "key": "earthfund-child-dao-staking-balance",
    "author": "bonustrack",
    "version": "0.1.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "earthfund-child-dao-staking-balance",
          "params": {
            "stakingRewardsContractAddress": "0x351e9c4de57a1854397E97Df909Ea0b3D7cbd219",
            "childDaoTokenAddress": "0xbEdAf8563DE032A8A48ae8B04552c18c6Cb60B85"
          }
        },
        "network": "4",
        "addresses": [
          "0xB300ecae675213d6889d93c0Bf0B27DD04d8eaa0",
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x8d07D225a769b7Af3A923481E1FdF49180e6A265",
          "0x8f60501dE5b9b01F9EAf1214dbE1924aA97F7fd0",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x17ea92D6FfbAA1c7F6B117c1E9D0c88ABdc8b84C",
          "0x38C0039247A31F3939baE65e953612125cB88268"
        ],
        "snapshot": 10928132
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "stakingRewardsContractAddress": {
              "type": "string",
              "title": "Address of the staking rewards contract",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "childDaoTokenAddress": {
              "type": "string",
              "title": "Child DAO token contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            }
          },
          "required": [
            "stakingRewardsContractAddress",
            "childDaoTokenAddress"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# earthfund-child-dao-staking-balance\n\nEarthfund's custom snapshot strategy, calculates voting score based of the staked balances of the voters for a specific child dao token in the staking rewards contract.\n\nHere is an example of parameters:\n\n```json\n{\n  \"stakingRewardsContractAddress\": \"0x351e9c4de57a1854397E97Df909Ea0b3D7cbd219\",\n  \"childDaoTokenAddress\": \"0xbEdAf8563DE032A8A48ae8B04552c18c6Cb60B85\"\n}\n```\n"
  },
  "sd-boost-twavp": {
    "key": "sd-boost-twavp",
    "author": "clement-ux",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "sd-boost-twavp",
          "params": {
            "sdToken": "0xD1b5651E55D4CeeD36251c61c50C889B36F6abB5",
            "veToken": "0x5f3b5DfEb7B28CDbD7FAba78963EE202a494e2A2",
            "lockerToken": "0x52f541764E6e90eeBc5c21Ff570De0e2D63766B6",
            "gauge": "0x7f50786A0b15723D741727882ee99a0BF34e3466",
            "symbol": "sdToken",
            "decimals": 18,
            "sampleSize": 15,
            "sampleStep": 5,
            "avgBlockTime": 13.91
          }
        },
        "network": "1",
        "addresses": [
          "0xa7888f85bd76deef3bd03d4dbcf57765a49883b3",
          "0x8d9f950c23b73edf79ce52f74c6fb589cd2cbd90"
        ],
        "snapshot": 15000000
      }
    ],
    "schema": null,
    "about": "# sd-boost-twavp\n\nThis strategy is used by StakeDAO to vote with sdToken with Time Weighted Averaged Voting Power system and veSDT voting boost.\n_sampleSize is in days_\n_sampleStep is the number of block for TWAVP_\n_avgBlockTime is in seconds_\nHere is an example of parameters:\n\n```json\n{\n  \"sdToken\": \"0xD1b5651E55D4CeeD36251c61c50C889B36F6abB5\",\n  \"veToken\": \"0x5f3b5DfEb7B28CDbD7FAba78963EE202a494e2A2\",\n  \"lockerToken\": \"0x52f541764E6e90eeBc5c21Ff570De0e2D63766B6\",\n  \"gauge\": \"0x7f50786A0b15723D741727882ee99a0BF34e3466\",\n  \"symbol\": \"sdToken\",\n  \"decimals\": 18,\n  \"sampleSize\": 30,\n  \"sampleStep\": 5,\n  \"avgBlockTime\": 13.91\n}\n```\n"
  },
  "unipilot-vault-pilot-balance": {
    "key": "unipilot-vault-pilot-balance",
    "author": "daniyalmanzoor",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Unipilot vault pilot balance query",
        "strategy": {
          "name": "unipilot-vault-pilot-balance",
          "params": {
            "decimals": 18,
            "unipilotSubgraphURI": "https://api.thegraph.com/subgraphs/name/unipilotvoirstudio/stats-v2",
            "vaultAddress": "0x8fd23f313c147d3c2a0fb11dd6b98515b9cb0603",
            "unipilotFarming": "0x52D1Cc3E97B97d3a915f2C91E0aE687c89f6F2E0",
            "unipilotVaultMethodABI": [
              {
                "inputs": [],
                "name": "totalSupply",
                "outputs": [
                  {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                  }
                ],
                "stateMutability": "view",
                "type": "function"
              },
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                  }
                ],
                "name": "balanceOf",
                "outputs": [
                  {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                  }
                ],
                "stateMutability": "view",
                "type": "function"
              }
            ],
            "unipilotFarmingMethodABI": [
              {
                "inputs": [
                  {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                  }
                ],
                "name": "userInfo",
                "outputs": [
                  {
                    "internalType": "uint256",
                    "name": "reward",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "altReward",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "lpLiquidity",
                    "type": "uint256"
                  },
                  {
                    "internalType": "address",
                    "name": "vault",
                    "type": "address"
                  }
                ],
                "stateMutability": "view",
                "type": "function"
              }
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x899917ef0213b78cd9da7ff930efbd505433de56",
          "0x019cdfd2a70dd4b899f330877752edfda5bd34c4"
        ],
        "snapshot": 15034421
      }
    ],
    "schema": null,
    "about": ""
  },
  "balance-of-with-linear-vesting-power": {
    "key": "balance-of-with-linear-vesting-power",
    "author": "morpho-labs",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "balance-of-with-linear-vesting-power",
          "params": {
            "ERC20Address": "0x9994E35Db50125E0DF82e4c2dde62496CE330999",
            "DSSVestAddress": "0x6017dd61f4d0C8123f160F99058Adc5671dF6447",
            "decimals": 18,
            "vestingNetwork": 1,
            "vestingDuration": 94608000,
            "startVesting": 1656078603
          }
        },
        "network": "1",
        "addresses": [
          "0xd9286ab8Ac06a428Bbb45Bfd785f9A22FD0ef0Bd",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x38C0039247A31F3939baE65e953612125cB88268"
        ],
        "snapshot": 15076584
      }
    ],
    "schema": null,
    "about": ""
  },
  "linear-vesting-power": {
    "key": "linear-vesting-power",
    "author": "morpho-labs",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "linear-vesting-power",
          "params": {
            "DSSVestAddress": "0x6017dd61f4d0C8123f160F99058Adc5671dF6447",
            "decimals": 18,
            "vestingNetwork": 1,
            "cliffDuration": 15768000
          }
        },
        "network": "1",
        "addresses": [
          "0xd9286ab8Ac06a428Bbb45Bfd785f9A22FD0ef0Bd",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x38C0039247A31F3939baE65e953612125cB88268"
        ],
        "snapshot": 15076584
      }
    ],
    "schema": null,
    "about": ""
  },
  "lrc-l2-subgraph-balance-of": {
    "key": "lrc-l2-subgraph-balance-of",
    "author": "shad-k",
    "version": "0.1.1",
    "examples": [
      {
        "name": "LoopringV2",
        "strategy": {
          "name": "lrc-l2-subgraph-balance-of",
          "params": {
            "symbol": "LRC",
            "tokenId": 1,
            "graph": "https://api.thegraph.com/subgraphs/name/juanmardefago/loopring36"
          }
        },
        "network": "1",
        "addresses": [
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x8d07D225a769b7Af3A923481E1FdF49180e6A265",
          "0x8f60501dE5b9b01F9EAf1214dbE1924aA97F7fd0",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x17ea92D6FfbAA1c7F6B117c1E9D0c88ABdc8b84C",
          "0x38C0039247A31F3939baE65e953612125cB88268"
        ],
        "snapshot": 14437846
      }
    ],
    "schema": null,
    "about": "# lrc-l2-subgraph-balance-of\n\nStrategy to read account LRC balance from LoopringV2 subgraph.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0x17ea92d6ffbaa1c7f6b117c1e9d0c88abdc8b84c\",\n  \"symbol\": \"LRC\",\n  \"tokenId\": 1,\n  \"graph\": \"https://api.thegraph.com/subgraphs/name/juanmardefago/loopring36\"\n}\n```\n"
  },
  "lrc-l2-nft-balance-of": {
    "key": "lrc-l2-nft-balance-of",
    "author": "karamorf",
    "version": "0.1.1",
    "examples": [
      {
        "name": "LoopringV2NFT",
        "strategy": {
          "name": "lrc-l2-nft-balance-of",
          "params": {
            "graph": "https://api.thegraph.com/subgraphs/name/juanmardefago/loopring36",
            "minter_account_id": "74447",
            "tokens": [
              "0xc76eca2937b006606ebe717621409e4c2df906f1"
            ],
            "blacklisted_account_ids": [
              "38482"
            ],
            "blacklisted_nft_ids": [
              "0x94743548ba8d82a4ee8ea3dfad589ea501ad2738-0-0xc76eca2937b006606ebe717621409e4c2df906f1-0x15f13a1431906d9ca5b24df9de0b443690bf822d012e5da30b18d36ffad545aa-5"
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0xad29249bd6d203b3c824d2514b8221c83eb608d1",
          "0x3c41f4e24e52f624fd4bf00dfe90d63c64cf964c",
          "0xe4c9487dbef67405d4469ae27837e5f42197af21",
          "0xacf9c4d62f00ed3e47e3d8aabfc80300be02cb4d",
          "0x6efd66a92a22561c3b2e08b5253a2bbd64c3edcc",
          "0x197f6515eb864133ce1d689f50a912620f3953ac",
          "0xecd5d7ca36538174c977b42c08e924b4341ffbf0",
          "0x0a437c0caeda1e081ba413229da0bf132fe74584"
        ],
        "snapshot": 15175152
      }
    ],
    "schema": null,
    "about": "# lrc-l2-nft-balance-of\n\nStrategy to read account balances for NFTs (72 or 1155) from LoopringV2 subgraph. Assumes we only want tokens minted by a specific account id.\n\nHere is an example of parameters:\n\n```json\n{\n  \"graph\": \"https://api.thegraph.com/subgraphs/name/juanmardefago/loopring36\",\n  \"minter_account_id\": \"74447\",\n  \"tokens\": [\"token (Collection) id's to include\"],\n  \"blacklisted_account_ids\": [\"38482\"],\n  \"blacklisted_nft_ids\": [\"... nft id's to exclude ...\"]\n}\n```\n\nUse explorer.loopring.io to look up addresses and find account id's.\n\nAccount id `38482` maps to `0x000000000000000000000000000000000000dead` and is used for burning tokens.\n\nto note: either the `minter_account_id` or the `tokens` parameter must be provided for this query to work. You do not need to specify both, just one of them.\n"
  },
  "lrc-lp-subgraph-balance-of": {
    "key": "lrc-lp-subgraph-balance-of",
    "author": "shad-k",
    "version": "0.1.1",
    "examples": [
      {
        "name": "LoopringV2 LP Balance",
        "strategy": {
          "name": "lrc-lp-subgraph-balance-of",
          "params": {
            "symbol": "LRC",
            "tokenIdToPoolMap": {
              "83": "0x18920d6e6fb7ebe057a4dd9260d6d95845c95036",
              "102": "0xe6cc0d45c4e4f81be340f4d176e6ce0d63ad5743",
              "168": "0xfa6680779dc9168600bcdcaff28b41c8fa568d98",
              "200": "0xc8f242b2ac6069ebdc876ba0ef42efbf03c5ba4b",
              "235": "0x194db39e4c99f6c8dd81b4647465f7599f3c215a"
            },
            "graph": "https://api.thegraph.com/subgraphs/name/juanmardefago/loopring36"
          }
        },
        "network": "1",
        "addresses": [
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030",
          "0x4AcBcA6BE2f8D2540bBF4CA77E45dA0A4a095Fa2",
          "0x4F3D348a6D09837Ae7961B1E0cEe2cc118cec777",
          "0x6D7f23A509E212Ba7773EC1b2505d1A134f54fbe",
          "0x07a1f6fc89223c5ebD4e4ddaE89Ac97629856A0f",
          "0x8d5F05270da470e015b67Ab5042BDbE2D2FEFB48",
          "0x8d07D225a769b7Af3A923481E1FdF49180e6A265",
          "0x8f60501dE5b9b01F9EAf1214dbE1924aA97F7fd0",
          "0x9B8e8dD9151260c21CB6D7cc59067cd8DF306D58",
          "0x17ea92D6FfbAA1c7F6B117c1E9D0c88ABdc8b84C",
          "0x38C0039247A31F3939baE65e953612125cB88268",
          "0x2b1284fa49af4f7b1a6563e1ec7f88767f2a3900"
        ],
        "snapshot": 15482770
      }
    ],
    "schema": null,
    "about": "# lrc-l2-subgraph-balance-of\n\nStrategy to read account LRC LP balance from LoopringV2 subgraph.\n\nHere is an example of parameters:\n\n```json\n{\n  \"symbol\": \"LRC\",\n  \"tokenIdToPoolMap\": {\n    \"235\": \"0x194db39e4c99f6c8dd81b4647465f7599f3c215a\",\n    \"102\": \"0xe6cc0d45c4e4f81be340f4d176e6ce0d63ad5743\",\n    \"83\": \"0x18920d6e6fb7ebe057a4dd9260d6d95845c95036\",\n    \"168\": \"0xfa6680779dc9168600bcdcaff28b41c8fa568d98\",\n    \"200\": \"0xc8f242b2ac6069ebdc876ba0ef42efbf03c5ba4b\"\n  },\n  \"graph\": \"https://api.thegraph.com/subgraphs/name/juanmardefago/loopring36\"\n}\n```\n"
  },
  "lrc-nft-search-mult": {
    "key": "lrc-nft-search-mult",
    "author": "raecaug",
    "version": "0.1.0",
    "examples": [
      {
        "name": "lrcNFTmult",
        "strategy": {
          "name": "lrc-nft-search-mult",
          "params": {
            "graph": "https://api.thegraph.com/subgraphs/name/juanmardefago/loopring36",
            "minter_account_id": "157510",
            "tokens": [
              "0xb6d91e38e4ac53c9f8952c6c6b1c7aee66c8b6f0"
            ],
            "nft_ids": [
              "0x1e31297dd163ca44a5fad74de4ffbebf1ba11d46e1b448b0e105449d827fb264"
            ],
            "blacklisted_account_ids": [
              ""
            ],
            "blacklisted_nft_ids": [
              ""
            ],
            "multiplier": "1"
          }
        },
        "network": "1",
        "addresses": [
          "0xeE253D3fCC30787a1E58570E355010d0b9C33B60",
          "0xddCCE06088517c56FA938bD99cD0820094010F8e",
          "0x9Fd19B8ca6E49eD92142339F54026497cE913492"
        ],
        "snapshot": 15677787
      }
    ],
    "schema": null,
    "about": "# lrc-nft-search-mult\n\nThis is a further improvement of karamorf's lrc-l2-nft-balance of Snapshot voting strategy by raecaug(system32).\n\nThis strategy is an extension of lrc-nft-dao-search, allowing space owners to apply a multiplier to counted votes. \nThis can then be combined with additional voting strategies to allow for complex DAO setups with vote weighting of specific NFTs.\nProviding a multiplier is necessary; if default behavior is desired, simply specify '1'.\n\nStrategy to read account balances for NFTs (72 or 1155) from LoopringV2 subgraph. Assumes we only want tokens minted by a specific account id.\n\nHere is an example of parameters:\n\n```json\n{\n  \"graph\": \"https://api.thegraph.com/subgraphs/name/juanmardefago/loopring36\",\n  \"minter_account_id\": \"74447\",\n  \"tokens\": [\"token (Collection contract address) to include\"],\n  \"nft_ids\": [\"nftIDs, unique to every nft, even those under the same token contract\"],\n  \"blacklisted_account_ids\": [\"38482\"],\n  \"blacklisted_nft_ids\": [\"... nft id's to exclude ...\"]\n  \"multiplier\": \"3\" // Setting this to '1' will result in normal vote counting behavior. \n}\n```\n\nUse explorer.loopring.io to look up addresses and find account id's.\n\nAccount id `38482` maps to `0x000000000000000000000000000000000000dead` and is used for burning tokens.\n\nto note: either the `minter_account_id` or the `tokens` parameter must be provided for this query to work. You do not need to specify both, just one of them.\n"
  },
  "bancor-pool-token-underlying-balance": {
    "key": "bancor-pool-token-underlying-balance",
    "author": "TudorSante",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "bancor-pool-token-underlying-balance",
          "params": {
            "symbol": "bnROOK",
            "decimals": 18,
            "underlyingTokenAddress": "0xfA5047c9c78B8877af97BDcb85Db743fD7313d4a",
            "bancorNetworkInfoAddress": "0x8E303D296851B320e6a697bAcB979d13c9D6E760"
          }
        },
        "network": "1",
        "addresses": [
          "0x66e81feea36764103b755144b161c70e75906535",
          "0x857eb0eb2572f7092c417cd386ba82e45eba9b8a",
          "0x98625957c6b96eeecd040e5bd26bd42100d124b2"
        ],
        "snapshot": 15191222
      }
    ],
    "schema": null,
    "about": ""
  },
  "balance-of-subgraph": {
    "key": "balance-of-subgraph",
    "author": "weizard",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "balance-of-subgraph",
          "params": {
            "subGraphURL": "https://api.thegraph.com/subgraphs/name/dinngodev/furucombo-tokenomics-mainnet"
          }
        },
        "network": "1",
        "addresses": [
          "0xe4ef29545db14e252AeC1c660A004e2408Dc62d2",
          "0xa3c1c91403f0026b9dd086882adbc8cdbc3b3cfb"
        ],
        "snapshot": 14716396
      }
    ],
    "schema": null,
    "about": "# Balance of subgraph\n\nTo calculate the token balance including user's EOA and smart wallet, we developed this strategy. Developers can create their own subparagraphs using the below scheme, and the score will be calculated as a result.\n\n```\nusers{\n  id\n  amount\n}\n```\n\n\n## Example\n\nThe space config will look like this:\n\n```JSON\n{\n  // subgraphURL for the request\n  \"subGraphURL\": \"https://api.thegraph.com/subgraphs/name/dinngodev/furucombo-tokenomics-mainnet\",\n  // scoreMultiplier can be used to increase users' scores by a certain magnitude\n  \"scoreMultiplier\": 1,\n}\n```\n"
  },
  "wagdie-subgraph": {
    "key": "wagdie-subgraph",
    "author": "IcculusHerEmissary",
    "version": "0.2.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "wagdie-subgraph",
          "params": {
            "subGraphURL": "https://api.thegraph.com/subgraphs/name/wagdie/wagdieworld-mainnet",
            "scoreMultiplier": 1,
            "location": [
              "all"
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0xca8307d015aa664a186ad67da19ac6fc4b6c0198",
          "0x326937d5f4ad932db9d814ee7d852bc77b9d2e0d",
          "0x4F0EceDCd73dA0315134741d9D3830B08fE32e95",
          "0xa027b41dc6fe7abec1b6ac69335383604766623c"
        ],
        "snapshot": 16470969
      }
    ],
    "schema": null,
    "about": "# WAGDIE Balance from Subgraph\n### Modified from balance-of-subgraph\n\nCalculates users balance of users WAGDIE in wallet and staked in the Forsaken Lands. \n\n```\ncharacters{\n  id\n  owner {id}\n  location {id}\n}\n```\n\n\n## Example\n\nThe space config will look like this:\n\n```JSON\n{\n  // subgraphURL for the request\n  \"subGraphURL\": \"https://api.thegraph.com/subgraphs/name/wagdie/wagdieworld-mainnet\",\n  // scoreMultiplier can be used to increase users' scores by a certain magnitude\n  \"scoreMultiplier\": 1,\n  // Array of location IDs to limit votes to specific locations. Can be set to [\"all\"] to include all locations. \n  \"location\": [\"1\", \"2\"]\n}\n```\n"
  },
  "erc721-pair-weights": {
    "key": "erc721-pair-weights",
    "author": "arpitkarnatak",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc721-pair-weights",
          "params": {
            "symbol": "OCMONK",
            "registries": [
              "0x960b7a6bcd451c9968473f7bbfd9be826efd549a",
              "0x86cc280d0bac0bd4ea38ba7d31e895aa20cceb4b"
            ],
            "weights": [
              2,
              3
            ],
            "pairWeight": 4
          }
        },
        "network": "1",
        "addresses": [
          "0x5F9345FdAd91Bf9757445ADc82e477B33FD3349c",
          "0xE052113bd7D7700d623414a0a4585BCaE754E9d5"
        ],
        "snapshot": 15223064
      }
    ],
    "schema": null,
    "about": "# ERC721 Weighted Pairs\n\nThis strategy determines the voting powers for a pair of ERC721 NFT registries. This strategy supports 2 different NFT collections and it provides different voting powers to the holders of these collections, and also supports bonus powers for holders which have items from both the collections.\n\n```json\n{\n    \"symbol\": \"OCMONK\",\n    \"registries\": [\n      \"0x960b7a6bcd451c9968473f7bbfd9be826efd549a\",\n      \"0x86cc280d0bac0bd4ea38ba7d31e895aa20cceb4b\"\n    ],\n    \"weights\": [\n      2,\n      3\n    ],\n    \"pairWeight\": 4 \n }\n```\n\nIn `example.json`, address `0xE052113bd7D7700d623414a0a4585BCaE754E9d5` has 31 items of `collection1` NFT and 35 items of `collection2` NFT. \n\nAs we can see, there are 31 pairs, 0 items exclusively for collection1 and 4 items exclusively for collection2. So, the voting power of the address will be \n\n```\n(31 * pairWeight) + (collection1 * weights[0]) + (collection2 * weights[1])`\n= 31*4 + 0*2 + 4*3\n= 136\n```\nwhich can be seen in the snapshot:\n\n```\n    [\n      {\n        '0x5F9345FdAd91Bf9757445ADc82e477B33FD3349c': 6,\n        '0xE052113bd7D7700d623414a0a4585BCaE754E9d5': 136\n      }\n    ]\n```"
  },
  "harmony-staking": {
    "key": "harmony-staking",
    "author": "harmony-one",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "harmony-staking",
          "params": {
            "symbol": "ONE"
          }
        },
        "network": "1666600000",
        "addresses": [
          "0xF677b8EF72C34f63c43f47C30612B1A3Ec1b622F",
          "0xd143988234dF9117f4Baa00b5f8D4A56d64e56eA",
          "0xA5241513DA9F4463F1d4874b548dFBAC29D91f34"
        ],
        "snapshot": 10937992
      },
      {
        "name": "Example query",
        "strategy": {
          "name": "harmony-staking",
          "params": {
            "symbol": "ONE"
          }
        },
        "network": "1666700000",
        "addresses": [
          "0x29c2eC57803f8b695f02613E5FA1749c165c5057",
          "0xd143988234dF9117f4Baa00b5f8D4A56d64e56eA",
          "0xA5241513DA9F4463F1d4874b548dFBAC29D91f34"
        ],
        "snapshot": 192690
      }
    ],
    "schema": null,
    "about": ""
  },
  "erc3525-flexible-voucher": {
    "key": "erc3525-flexible-voucher",
    "author": "buchaoqun",
    "version": "0.1.2",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc3525-flexible-voucher",
          "params": {
            "symbol": "fvSOLV",
            "address": "0xb77Ca8CB421fAE5d4790a6f5EdAD97Cfb7868aD0",
            "decimals": 18
          }
        },
        "network": "4",
        "addresses": [
          "0x1a71c8EF63aB6f578b1702a35367cA81c9281A8c"
        ],
        "snapshot": 11096688
      }
    ],
    "schema": null,
    "about": ""
  },
  "orca-pod": {
    "key": "orca-pod",
    "author": "snapshot-labs",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "orca-pod",
          "params": {
            "symbol": "ORCA",
            "id": "1",
            "weight": 100
          }
        },
        "network": "1",
        "addresses": [
          "0x094a473985464098b59660b37162a284b5132753"
        ],
        "snapshot": 15188155
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. ORCA"
              ],
              "maxLength": 16
            },
            "id": {
              "type": "string",
              "title": "Token id",
              "examples": [
                "1"
              ]
            },
            "weight": {
              "type": "number",
              "title": "Weight",
              "examples": [
                "e.g. 100"
              ]
            }
          },
          "required": [
            "id"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# orca-pod\n\nThis strategy give 1 voting power for each holder of a specific tokenId of orca's ERC1155\n\n## Parameters\n\n| Param Name      | Description |\n| ----------- | ----------- |\n| id      | TokenId of the pod   |\n| weight (optional)   | Multiplier of the voting power - Default is `1`  |\n\nHere is an example of the parameters:\n\n```json\n{\n  \"symbol\": \"ORCA\",\n  \"id\": \"1\",\n  \"weight\": 100\n}\n```\n"
  },
  "metropolis-pod": {
    "key": "metropolis-pod",
    "author": "itsdanwu",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "metropolis-pod",
          "params": {
            "symbol": "METRO",
            "id": "1",
            "weight": 100
          }
        },
        "network": "1",
        "addresses": [
          "0x094a473985464098b59660b37162a284b5132753",
          "0x4B4C43F66ec007D1dBE28f03dAC975AAB5fbb888",
          "0x403f69b1092cf1cB82487CD137F96E8200f03BD5"
        ],
        "snapshot": 15188155
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. METRO"
              ],
              "maxLength": 16
            },
            "id": {
              "type": "string",
              "title": "Token ID",
              "examples": [
                "1"
              ]
            },
            "weight": {
              "type": "number",
              "title": "Weight",
              "examples": [
                "e.g. 100"
              ]
            }
          },
          "required": [
            "id"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# metropolis-pod\n\nThis strategy gives one voting power to each member of a specific Metropolis Pod NFT, specified by the ERC1155 Token ID - which can be found in the [Metropolis web app](https://pod.xyz) or in your wallet. \n\n## Parameters\n\n| Param Name      | Description |\n| ----------- | ----------- |\n| id      | Token ID of the pod   |\n| weight (optional)   | Multiplier of the voting power - Default is `1`  |\n\nHere is an example of the parameters:\n\n```json\n{\n  \"symbol\": \"METRO\",\n  \"id\": \"1\",\n  \"weight\": 100\n}\n```\n"
  },
  "proxyprotocol-erc721-balance-of": {
    "key": "proxyprotocol-erc721-balance-of",
    "author": "rawrjustin",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "proxyprotocol-erc721-balance-of",
          "params": {
            "address": "0x6826c4c51f4855d0280e99f646c5ef43edb3848e",
            "symbol": "TYXMK"
          }
        },
        "network": "1",
        "addresses": [
          "0x346f1c338b38ef9cf18964695dd68e9956ca5d37",
          "0xa164591f695b11e1c6b77925e326e20754521200"
        ],
        "snapshot": 15304592
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. DOODLE"
              ],
              "maxLength": 16
            },
            "address": {
              "type": "string",
              "title": "Contract address",
              "examples": [
                "e.g. 0x1f9840a85d5af5bf1d1762f925bdaddc4201f984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            }
          },
          "required": [
            "address"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# Proxy ERC-721\n\nThis allows for a Proxy wallet to map to multiple wallets owned by the user.\n\nYou would use the exact same parameters as erc721-balance-of, but the signing wallet is now the proxy wallet.\n"
  },
  "posichain-staking": {
    "key": "posichain-staking",
    "author": "dannyposi",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "posichain-staking",
          "params": {
            "symbol": "POSI"
          }
        },
        "network": "900000",
        "addresses": [
          "0xD3Ee1d798eCea22Fde4D29590eFF0c77bA7e6b9e",
          "0xb065c1a5BC1B3c1b1dF8781D369cffc534B65731",
          "0x7fd592690ec6A7300289B059ee8711f4f9BBfD8a"
        ],
        "snapshot": 3989273
      }
    ],
    "schema": null,
    "about": "# Posichain Staking Strategy\n\nCalculates vote of validators based on the total staking (includes self stake and total balance delegated to them).\n"
  },
  "posichain-total-balance": {
    "key": "posichain-total-balance",
    "author": "dannyposi",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "posichain-total-balance",
          "params": {
            "symbol": "POSI"
          }
        },
        "network": "900000",
        "addresses": [
          "0xD3Ee1d798eCea22Fde4D29590eFF0c77bA7e6b9e",
          "0xb065c1a5BC1B3c1b1dF8781D369cffc534B65731",
          "0x7fd592690ec6A7300289B059ee8711f4f9BBfD8a"
        ],
        "snapshot": 3989273
      }
    ],
    "schema": null,
    "about": "# Posichain Total Balance Strategy\n\nCalculates vote of validators based on their balance, plus total staking (includes self stake and total balance delegated to them).\n"
  },
  "arrow-vesting": {
    "key": "arrow-vesting",
    "author": "BrassLion",
    "version": "0.1.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "arrow-vesting",
          "params": {
            "address": "0x78b3C724A2F663D11373C4a1978689271895256f",
            "symbol": "ARROW",
            "decimals": 18,
            "vestingFactory": "0xB93427b83573C8F27a08A909045c3e809610411a"
          }
        },
        "network": "10",
        "addresses": [
          "0xaDc17e5f0e9F755C717B2beE43B590260034b852",
          "0xB66f08DBd7A59B32e98033b9A1da08B5793DAb79",
          "0x5b8eD2A2CfFCD474B2E688fdeA21CB5c4350E575",
          "0x03b5Dc2CE78a7bEe9F66DD619b291595a2E166BB",
          "0x06A61f56de8c6a2735D1Dea68340D201ddEd7348"
        ],
        "snapshot": 18879362
      }
    ],
    "schema": null,
    "about": "# arrow-vesting\n\nThis strategy returns voters underlying token balance for a given Arrow vesting contract factory.\n\nToken balance for is address is equal to the sum of the locked balance in all vesting contracts holding it\nas a beneficiary.\n\n## Params\n\n- `address` - (**Required**, `string`) Address of ERC20 token contract\n- `symbol` - (**Optional**, `string`) Symbol of ERC20 token\n- `decimals` - (**Required**, `number`) Decimal precision for ERC20 token\n- `vestingFactory` - (**Required**, `string`) Address of Vesting Escrow Factory that creates vesting contracts holding ERC20 tokens \n\nHere is an example of parameters:\n\n```json\n{\n    \"address\": \"0x78b3C724A2F663D11373C4a1978689271895256f\",\n    \"symbol\": \"ARROW\",\n    \"decimals\": 18,\n    \"vestingFactory\": \"0xB93427b83573C8F27a08A909045c3e809610411a\"\n}\n```\n"
  },
  "tutellus-protocol": {
    "key": "tutellus-protocol",
    "author": "victormer",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "tutellus-protocol",
          "params": {}
        },
        "network": "137",
        "addresses": [
          "0xf3adfDFdB3f9f3151db8595C4e850C11a2b1b70E",
          "0x18f43A59D698Ea7a4f5A0c11E7AA50973F5B396B",
          "0x81EC959A48756984C2c94DB1BF9D4BB18746Ee2A",
          "0x66e2495AEbCa70c141F3936Cb6F6d2e6464a5D99",
          "0x0F22A52D6Ee30abEc311fd67C998Ab4B5e00382C",
          "0xf79f703A6C80a427E826866cF91BC7c5B249187C"
        ],
        "snapshot": 32188493
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {},
          "required": [],
          "additionalProperties": false
        }
      }
    },
    "about": "# tutellus-protocol\n\nIt returns the voting power in the Tutellus Protocol for proposals of Tutellus DAO, this includes holding $TUT, staking $TUT in the Staking contract and staking LP tokens from Sushi Pool against $WBTC in the Farming contract.\n"
  },
  "fight-club": {
    "key": "fight-club",
    "author": "MantisClone",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "fight-club",
          "params": {
            "gloveAddresses": {
              "0x25ed58c027921E14D86380eA2646E3a1B5C55A8b": 3
            },
            "weightClassAddress": "0xF1F3ca6268f330fDa08418db12171c3173eE39C9",
            "weightClassIds": {
              "8": 4,
              "26": 5,
              "33": 6
            },
            "symbol": "FC"
          }
        },
        "network": "1",
        "addresses": [
          "0x1EC1CcEF3e1735bdA3F4BA698e8a524AA7c93274",
          "0x3eEFAa9d6e2ab7972C1001D41C82BB4881389257",
          "0x7911670881A81F8410d06053d7B3c237cE77b9B4"
        ],
        "snapshot": 13921307
      }
    ],
    "schema": null,
    "about": "# fight-club\n\nThis strategy calculates a fight-club member's voting score.\n\n## Params\n\n- `gloveAddresses` - (**Required**, `object`) Up to 10 Fight Club Glove NFT\n  addresses and their associated voting power.\n- `weightClassAddress` - (**Required**, `string`) Weight Class Kudo (ERC-1155)\n  Address\n- `weightClassIds` - (**Required**, `object`) Up to 10 Weight Class Kudo IDs and\n  their associated voting multiplier.\n- `symbol` - (**Optional**, `string`) Symbol of the strategy\n\n\nHere is an example of parameters:\n\n```json\n{\n  \"gloveAddresses\": {\n    \"0x25ed58c027921E14D86380eA2646E3a1B5C55A8b\": 3\n  },\n  \"weightClassAddress\": \"0xF1F3ca6268f330fDa08418db12171c3173eE39C9\",\n  \"weightClassIds\": {\n    \"8\": 4,\n    \"26\": 5,\n    \"33\": 6\n  },\n  \"symbol\": \"FC\"\n}\n```\n\n## Details\n\nThis strategy uses a Multicall to query `balanceOf` fight club glove NFTs and\n`balanceOf` weight class kudos (ERC-1155). A voter's total voting score is\ncalculated via the following equation:\n\n```\nscore = glovePower * weightClassMultiplier\n```\n\n* If a user has more than 1 fight club glove NFT, only the one with the highest\n  associated voting power is counted.\n* If a user has more than 1 weight class Kudo, only the one with the highest\n  associated voting multiplier is counted.\n* If a user has 0 fight club glove NFTs, then their total vote score is 0,\n  regardless of their weight class Kudos.\n* If a user has a fight club glove NFT, but 0 weight class Kudos, the weight\n  class multiplier defaults to 1.\n* To avoid memory issues, the strategy is limited to 10 distinct glove NFT\n  addresses and 10 distinct weight class kudo IDs.\n\n> **Warning**: This strategy uses `ethers.utils.BigNumber.toNumber()` and will\n  fail if a voter's `glovePower` or `weightClassMultiplier` is is greater than\n  or equal to `Number.MAX_SAFE_INTEGER` or less than or equal to\n  `Number.MIN_SAFE_INTEGER`\n"
  },
  "tpro-staking": {
    "key": "tpro-staking",
    "author": "tokenomia-pro",
    "version": "1.0.0",
    "examples": [
      {
        "name": "tpro-staking",
        "strategy": {
          "name": "tpro-staking",
          "params": {
            "address": "0x3540abe4f288b280a0740ad5121aec337c404d15",
            "symbol": "TPRO",
            "decimals": 18,
            "smartContracts": [
              "0x5c9977cA74Be8028a2715229A4ce1e7cABd6eFC6",
              "0x764C205a50Ef89A55b2E8FE13B0e06E50391716e",
              "0xa3c6dfaDF1ABA174e54406e692b09F61c4bFD689",
              "0x674EeEF1Da64b9e398210621A61d1d2a8Bf27387",
              "0x1C2AC88532f54A046f842B0651f0C2F6A80E729D"
            ],
            "contractFactor": [
              0.03125,
              0.0625,
              0.125,
              0.25,
              1
            ],
            "powerFactor": 2
          }
        },
        "network": "1",
        "addresses": [
          "0x9D424a91A4D47ccb858436CE006492D61C8dBA76",
          "0x8fc8405d41114D6F8271C44902464Ca1325Ac692",
          "0x87Dddb39a02755c8Bfc567e30080b006DaD93Bf6",
          "0xB5C8BB51A4cf229ced4cBA3fE352BF0D47088813",
          "0xAC02A175594010228AC9dDCa9584b894386f7b27",
          "0x8db0c967E6F8c6D8dA1a74147614Fd66c437bF45"
        ],
        "snapshot": 15402131
      }
    ],
    "schema": null,
    "about": ""
  },
  "safe-vested": {
    "key": "safe-vested",
    "author": "dasanra",
    "version": "0.2.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "safe-vested",
          "params": {
            "allocationsSource": "https://safe-claiming-app-data.gnosis-safe.io/allocations/1/snapshot-allocations-data.json",
            "claimDateLimit": "2022-12-28T11:00:00Z"
          }
        },
        "network": "1",
        "snapshot": 15800000,
        "addresses": [
          "0x9970dcab40e29a84D1020DeaEa443dCE1d8471b7",
          "0x1230B3d59858296A31053C1b8562Ecf89A2f888b",
          "0x121Cf7457171bD7a93232807CBa65f7Bd7a48a2d",
          "0xda2242a6DbDa924bf7D7DB8aC9482d4763EB211C",
          "0xf2565317F3Ae8Ae9EA98E9Fe1e7FADC77F823cbD",
          "0x37b828802FAeA4244d176Da386CF632F5Bbc414F",
          "0xA8FFD6B87388F8d5FACfDa0147d9B0Da511539b6",
          "0xd7539FCdC0aB79a7B688b04387cb128E75cb77Dc"
        ]
      }
    ],
    "schema": null,
    "about": "# safe-vested\n\nCustom strategy to compute voting power from vested tokens. Originally created for the Safe allocations. Vesting smart contract code can be found [here](https://github.com/safe-global/safe-token/blob/81e0f3548033ca9916f38444f2e62e5f3bb2d3e1/contracts/VestingPool.sol).\n\n## strategy parameters\n\nThe following parameters can be used to configure the strategy.\n\n### allocationsSource\n\nThis parameter is mandatory. It expects a JSON using the following structure providing at least the example parameters.\n```json\n[\n    [\n        {\n            \"account\": \"ACCOUNT_ADDRESS\",\n            \"contract\": \"ALLOCATIONS_CONTRACT\",\n            \"vestingId\": \"VESTING_HASH\",\n            \"amount\": \"VESTED_AMOUNT\"\n        }\n    ]\n]\n```\n\n### claimDateLimit\n\nThis is an optional parameter. A date limit to claim the vesting. Since that moment the vesting won't be considered unless the account already claimed some amount.\n\nNeeds to follow [ISO Date format](https://www.w3schools.com/js/js_date_formats.asp).\n```js\n\"2022-12-04T11:00:00Z\"\n```\n\n"
  },
  "otterspace-badges": {
    "key": "otterspace-badges",
    "author": "otterspace-xyz",
    "version": "1.0.1",
    "examples": [
      {
        "name": "Example query with specific badge specs",
        "strategy": {
          "name": "otterspace-badges",
          "params": {
            "symbol": "BADGES",
            "raftTokenId": "1",
            "specs": [
              {
                "id": "bafyreicmofif36f2s4d2iv37gy532epnw7rwjf5rygdhzzh2iw6nmbunrq",
                "weight": 5
              },
              {
                "id": "bafyreihj2e3mxqwk24auglrfckk3eh2hzsq7eyghjpcprmopvok5wxz3bu",
                "weight": 10
              },
              {
                "id": "bafyreiavo63i7sgb5dvjcj6nxfwkxd7thq37jj43l6f4mkorgdogqj2nni",
                "weight": 7
              }
            ]
          }
        },
        "network": "5",
        "addresses": [
          "0xbB9ECfD5685502977B5b7C1AC0cdff8C136A4Da8",
          "0x33d0BBd05cf3C7E040d33bc1F338585A087e5Dd9",
          "0x0F1c502d4EF5b1940a7A77062e51353D8B366547",
          "0xEAde2cEeDeA3b8d0D1d10537f507b9d262870748"
        ],
        "snapshot": 7509588
      },
      {
        "name": "Example query for all badge specs",
        "strategy": {
          "name": "otterspace-badges",
          "params": {
            "symbol": "BADGES",
            "raftTokenId": "1",
            "specs": []
          }
        },
        "network": "5",
        "addresses": [
          "0xbB9ECfD5685502977B5b7C1AC0cdff8C136A4Da8",
          "0x33d0BBd05cf3C7E040d33bc1F338585A087e5Dd9",
          "0x0F1c502d4EF5b1940a7A77062e51353D8B366547",
          "0xEAde2cEeDeA3b8d0D1d10537f507b9d262870748"
        ],
        "snapshot": 7509588
      },
      {
        "name": "Example query with specific badge specs",
        "strategy": {
          "name": "otterspace-badges",
          "params": {
            "symbol": "BADGES",
            "raftTokenId": "1",
            "specs": [
              {
                "id": "bafyreibvclrxnfm5nrchvdqfog6t2usvlqiozwgxynrxwlgftl3ln7uxqe",
                "weight": 5
              },
              {
                "id": "bafyreicl3unvw6tvzjfduvrhxbfi74gsob6mpf6ekn3s2nkopqz2phtx7e",
                "weight": 10
              }
            ]
          }
        },
        "network": "10",
        "addresses": [
          "0x76D84163bc0BbF58d6d3F2332f8A9c5B339dF983",
          "0x73677662f66088236dDFc95DA42e405Cf3F4ce13",
          "0x0F1c502d4EF5b1940a7A77062e51353D8B366547"
        ],
        "snapshot": 21528802
      },
      {
        "name": "Example query for all badge specs",
        "strategy": {
          "name": "otterspace-badges",
          "params": {
            "symbol": "BADGES",
            "raftTokenId": "1",
            "specs": []
          }
        },
        "network": "10",
        "addresses": [
          "0x76D84163bc0BbF58d6d3F2332f8A9c5B339dF983",
          "0x73677662f66088236dDFc95DA42e405Cf3F4ce13",
          "0x0F1c502d4EF5b1940a7A77062e51353D8B366547"
        ],
        "snapshot": 21528802
      }
    ],
    "schema": null,
    "about": "# Otterspace Badges\n\n- A RAFT is an NFT that represents a community (or a DAO) within Otterspace.\n- A RAFT has several badge specs under it. A badge spec is the design of a badge, which is essentially described as ERC721 metadata standard.\n- Each BADGE is a non-transferable token built with [ERC4973](\"https://github.com/otterspace-xyz/ERC4973\") spec and maximally backwards compatible with ERC721. Each badge spec may have several badges associated which indicate the badges minted for that spec that is associated to a raft\n\nThe parameters that must be specified when using this strategy are as follows\n\n- A RAFT token ID\n- The RAFT's contract address\n- An array of weights associated to the badge specs\n\nIf no specs are specified, all badges under the RAFT are considered equal with the weight of 1\n\nHere is an example of its usage:\n\n```json\n{\n  \"symbol\": \"BADGES\",\n  \"raftTokenId\": \"1\",\n  \"raftAddress\": \"0xa6773847d3D2c8012C9cF62818b320eE278Ff722\",\n  \"specs\": [\n    {\n      \"id\": \"bafyreicmofif36f2s4d2iv37gy532epnw7rwjf5rygdhzzh2iw6nmbunrq\",\n      \"weight\": 5\n    },\n    {\n      \"id\": \"bafyreihj2e3mxqwk24auglrfckk3eh2hzsq7eyghjpcprmopvok5wxz3bu\",\n      \"weight\": 10\n    }\n  ]\n}\n```\n"
  },
  "synthetic-nouns-with-claimer": {
    "key": "synthetic-nouns-with-claimer",
    "author": "stephancill",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query for Synthetic Nouns that are owned by the original claiming address",
        "strategy": {
          "name": "synthetic-nouns-with-claimer",
          "params": {
            "address": "0x8761b55af5a703d5855f1865db8fe4dd18e94c53",
            "symbol": "sNOUN"
          }
        },
        "network": "1",
        "addresses": [
          "0x8d25687829d6b85d9e0020b8c89e3ca24de20a89",
          "0x368f593244f04c599b3328a23493680b23818fa6",
          "0x6ab075abfA7cdD7B19FA83663b1f2a83e4A957e3",
          "0x7f16D5c969380E3420E17B4c3456A3844745A578"
        ],
        "snapshot": 15486783
      }
    ],
    "schema": null,
    "about": "# Synthetic Nouns\n\nThis strategy allows you to determine if an address is eligible to vote by checking if it holds the unique NFT claimed by it originally.\n\nIt uses the Zora API to find the minting event associated with the user address on the Synthetic Nouns contract and then checks if the NFT is still owned by the user.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0x8761b55af5a703d5855f1865db8fe4dd18e94c53\",\n  \"symbol\": \"sNOUN\"\n}\n```\n"
  },
  "echelon-wallet-prime-and-cached-key": {
    "key": "echelon-wallet-prime-and-cached-key",
    "author": "brandonleung",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "echelon-wallet-prime-and-cached-key",
          "params": {
            "symbol": "PRIME VOTE",
            "address": "0xb23d80f5FefcDDaa212212F028021B41DEd428CF",
            "decimals": 18,
            "stakingAddress": "0x3399eff96D4b6Bae8a56F4852EB55736c9C2b041",
            "baseValue": 4000,
            "startingBlock": 15166749,
            "monthsToDecay": 12
          }
        },
        "network": "1",
        "addresses": [
          "0xE6be99cbC7796F90baff870a2ffE838a540E27C9",
          "0xf98A4A42853cC611eED664627087d4ae19740ED8",
          "0xbdc3C931387e2c6647b0D7237Ed30c702260fa80",
          "0x5566eec3684F3ED896740590cc372758f25f056f",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0x1f254336E5c46639A851b9CfC165697150a6c327",
          "0x2ec3F80BeDA63Ede96BA20375032CDD3aAfb3030"
        ],
        "snapshot": 15540462
      }
    ],
    "schema": null,
    "about": "# echelon-wallet-prime-cached-key\n\nThis strategy looks at an ERC1155 caching (staking) contract and assigns a linearly decaying amount of voting power. The business context behind this is that each cached asset is eligible to claim a set amount of ERC20s over the same period; and thus can use those tokens to vote as well. \n\nFor example, at block 0, the voting should have equivalent to 4000 units of voting power. A year later, they should have 0 units. \n\nAs parameters, we pass in the base amount of voting power (e.g. 4000), starting block where there's no decay, and number of months until complete decay (e.g. 12).\n\nAt a high level, the strategy grabs the UNIX timestamp in seconds for starting block, current block, and project timestamp of final block. It then queries the contract for the amount of cached ERC1155s. A simple slope formula is then applied to calculate the decay rate; which is then applied to determine the voting power per asset at current block.\n\nThis strategy also makes use of the `erc20-balance-of` strategy. The erc20 balance is added to the equivalent value of the cached NFT.\n\nThe final value is square rooted.\n\nExample of parameters:\n\n```json\n    \"params\": {\n        \"symbol\": \"PRIME VOTE\",\n        \"address\": \"0xb23d80f5FefcDDaa212212F028021B41DEd428CF\",\n        \"decimals\": 18,\n        \"stakingAddress\": \"0x3399eff96D4b6Bae8a56F4852EB55736c9C2b041\",\n        \"baseValue\": 4000,\n        \"startingBlock\": 15166749,\n        \"monthsToDecay\": 12\n      }\n```\n\n"
  },
  "nation3-votes-with-delegations": {
    "key": "nation3-votes-with-delegations",
    "author": "nation3",
    "version": "0.2.0",
    "examples": [
      {
        "name": "Voting Power with ERC20 Balances (only for ERC721 Holders) ",
        "strategy": {
          "name": "nation3-votes-with-delegations",
          "params": {
            "erc721": "0x3337dac9f251d4e403d6030e18e3cfb6a2cb1333",
            "erc20": "0xf7def1d2fbda6b74bee7452fdf7894da9201065d"
          }
        },
        "network": "1",
        "addresses": [
          "0xEdd000B7Db3cb8931d4E0cb1D0DBe6B947Ceb09A",
          "0x47d80912400ef8f8224531EBEB1ce8f2ACf4b75a",
          "0x636d65212C815b93B8E5b069f7082169cec851b7",
          "0x460AF11e497dc273fC163414943C6fd95d17B1fd",
          "0xfafda3727fe0406e50230bf6092be5ded68cd9e9",
          "0x79438224Bc21b0E6B45ECF9F8caADfBdB874DedD"
        ],
        "snapshot": 16399660
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "erc20": {
              "type": "string",
              "title": "veNation",
              "examples": [
                "e.g. 0xf7def1d2fbda6b74bee7452fdf7894da9201065d"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "erc721": {
              "type": "string",
              "title": "nation3 passport",
              "examples": [
                "e.g. 0x3337dac9f251d4e403d6030e18e3cfb6a2cb1333"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            }
          },
          "required": [
            "erc20",
            "erc721"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# Nation3 voting power strategy\n\nCalculates voting power based on a user's staked tokens and ownership of nation3 passport (_erc721 NFT_). It also takes into account whether the NFT owner delegated his voting power to another account (using the `setSigner` function)\n\n## Requires 2 input parameters:\n\n**erc20**\n\nThe address of veNation tokens contract\n\n**erc721**\n\nThe address of nation3 passport tokens contract"
  },
  "nation3-passport-coop-with-delegations": {
    "key": "nation3-passport-coop-with-delegations",
    "author": "nation3",
    "version": "0.3.0",
    "examples": [
      {
        "name": "One Person One Vote (only for ERC721 Holders or Delegates) ",
        "strategy": {
          "name": "nation3-passport-coop-with-delegations",
          "params": {
            "erc721": "0x3337dac9f251d4e403d6030e18e3cfb6a2cb1333",
            "erc20": "0xf7def1d2fbda6b74bee7452fdf7894da9201065d"
          }
        },
        "network": "1",
        "addresses": [
          "0x61c872A66d79d932F9aEE874b397F2D50Ed78326",
          "0xEdd000B7Db3cb8931d4E0cb1D0DBe6B947Ceb09A",
          "0x47d80912400ef8f8224531EBEB1ce8f2ACf4b75a",
          "0x636d65212C815b93B8E5b069f7082169cec851b7",
          "0x460AF11e497dc273fC163414943C6fd95d17B1fd",
          "0xfafda3727fe0406e50230bf6092be5ded68cd9e9",
          "0x79438224Bc21b0E6B45ECF9F8caADfBdB874DedD"
        ],
        "snapshot": 18611783
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "erc20": {
              "type": "string",
              "title": "veNation",
              "examples": [
                "e.g. 0xf7def1d2fbda6b74bee7452fdf7894da9201065d"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "erc721": {
              "type": "string",
              "title": "nation3 passport",
              "examples": [
                "e.g. 0x3337dac9f251d4e403d6030e18e3cfb6a2cb1333"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            }
          },
          "required": [
            "erc20",
            "erc721"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# Nation3 voting power strategy\n\nCalculates voting power using a cooperative model (one person one vote) based on a user's ownership of nation3 passport (_erc721 NFT_). It also takes into account whether the NFT owner delegated his voting power to another account (using the `setSigner` function)\n\n## Requires 2 input parameters:\n\n**erc20**\n\nThe address of veNation tokens contract\n\n**erc721**\n\nThe address of nation3 passport tokens contract"
  },
  "erc20-tokens-per-uni": {
    "key": "erc20-tokens-per-uni",
    "author": "programmablewealth",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Strategy provides one voting power unit for each unit of a given ERC20 token included in the LP.",
        "strategy": {
          "name": "erc20-tokens-per-uni",
          "params": {
            "erc20TokenAddress": "0x385Eeac5cB85A38A9a07A70c73e0a3271CfB54A7",
            "poolTokenAddress": "0xb0E35478a389dD20050D66a67FB761678af99678"
          }
        },
        "network": "137",
        "addresses": [
          "0x26cf02F892B04aF4Cf350539CE2C77FCF79Ec172",
          "0x027Ffd3c119567e85998f4E6B9c3d83D5702660c"
        ],
        "snapshot": 33423178
      }
    ],
    "schema": null,
    "about": "# ERC20 Tokens Per Uni\n\n## Description\n\nThis snapshot strategy provides one voting power unit for each unit of a given ERC20 token included in the LP.\n\nIt is a generic strategy that can be re-used for any ERC20 token and LP token."
  },
  "bancor-standard-rewards-underlying-balance": {
    "key": "bancor-standard-rewards-underlying-balance",
    "author": "tiagofilipenunes",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "bancor-standard-rewards-underlying-balance",
          "params": {
            "symbol": "bnCROWN",
            "decimals": 18,
            "underlyingTokenAddress": "0x444d6088B0F625f8C20192623B3C43001135E0fa",
            "bancorNetworkInfoAddress": "0x8E303D296851B320e6a697bAcB979d13c9D6E760",
            "bancorStandardRewardsAddress": "0xb0B958398ABB0b5DB4ce4d7598Fb868f5A00f372"
          }
        },
        "network": "1",
        "addresses": [
          "0x671e4d58F407BE00fCC383732C020A7Ac1AFde73",
          "0xA2C12dBe82f19eF06850d4693F2b2D5724b8eA3E",
          "0x57577a7981c74f01cd919776228DBC416A683999",
          "0xc19417805208ff8cf0293a5795f3c3d8bd68d9d4",
          "0xe67da97f7a14a38ad6d3e7e5784fecbf7160b643",
          "0x307b361717d720834d27002e4b08d3a4307877ee",
          "0xeb54669ac46b44d6a29eedda0daf7d9a8c4f7386"
        ],
        "snapshot": 15718324
      }
    ],
    "schema": null,
    "about": ""
  },
  "sd-vote-boost": {
    "key": "sd-vote-boost",
    "author": "clement-ux",
    "version": "0.0.1",
    "dependOnOtherAddress": false,
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "sd-vote-boost",
          "params": {
            "veToken": "0x5f3b5DfEb7B28CDbD7FAba78963EE202a494e2A2",
            "liquidLocker": "0x52f541764E6e90eeBc5c21Ff570De0e2D63766B6",
            "sdTokenGauge": "0x7f50786A0b15723D741727882ee99a0BF34e3466",
            "symbol": "sdToken",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0xa7888f85bd76deef3bd03d4dbcf57765a49883b3",
          "0x8d9f950c23b73edf79ce52f74c6fb589cd2cbd90",
          "0x4af79ffcabb09083af6ccc3b2c20fe989519f6d7",
          "0xa429ac8bd9382e7f69645cc30bd718b5d33d674b",
          "0x7c9f43215D3B3D5055433a9d7B12bCBf9F4be442"
        ],
        "snapshot": 15725810
      }
    ],
    "schema": null,
    "about": "# sd-vote-boost\n\nThis strategy is used by StakeDAO to vote with sdToken adapted for veSDT boost delegation (without TWAVP).\n```\nVotingPower(user) = veToken.balanceOf(liquidLocker) * (sdTokenGauge.working_balances(user) / sdTokenGauge.working_supply)\n```\n\nHere is an example of parameters:\n\n```json\n{\n  \"veToken\": \"0x5f3b5DfEb7B28CDbD7FAba78963EE202a494e2A2\",\n  \"liquidLocker\": \"0x52f541764E6e90eeBc5c21Ff570De0e2D63766B6\",\n  \"sdTokenGauge\": \"0x7f50786A0b15723D741727882ee99a0BF34e3466\",\n  \"symbol\": \"sdToken\",\n  \"decimals\": 18\n}\n```\n"
  },
  "sd-vote-boost-twavp": {
    "key": "sd-vote-boost-twavp",
    "author": "clement-ux",
    "version": "0.0.1",
    "dependOnOtherAddress": false,
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "sd-vote-boost-twavp",
          "params": {
            "veToken": "0x5f3b5DfEb7B28CDbD7FAba78963EE202a494e2A2",
            "liquidLocker": "0x52f541764E6e90eeBc5c21Ff570De0e2D63766B6",
            "sdTokenGauge": "0x7f50786A0b15723D741727882ee99a0BF34e3466",
            "symbol": "sdToken",
            "decimals": 18,
            "sampleSize": 30,
            "sampleStep": 5,
            "avgBlockTime": 12
          }
        },
        "network": "1",
        "addresses": [
          "0xa7888f85bd76deef3bd03d4dbcf57765a49883b3",
          "0x8d9f950c23b73edf79ce52f74c6fb589cd2cbd90",
          "0x4af79ffcabb09083af6ccc3b2c20fe989519f6d7",
          "0xa429ac8bd9382e7f69645cc30bd718b5d33d674b",
          "0x7c9f43215D3B3D5055433a9d7B12bCBf9F4be442"
        ],
        "snapshot": 15725810
      }
    ],
    "schema": null,
    "about": "# sd-vote-boost-twavp\n\nThis strategy is used by Stake DAO to vote with sdToken using Time Weighted Averaged Voting Power (TWAVP) system and adapted for veSDT boost delegation.\n\n```\nVotingPower(user) = veToken.balanceOf(liquidLocker) * (average.sdTokenGauge.working_balances(user) / sdTokenGauge.working_supply)\n```\n\n>_sampleSize: in days_\n>_sampleStep:  the number of block for `average` calculation (max 5)_\n>_avgBlockTime: in seconds_\n\nHere is an example of parameters:\n\n```json\n{\n  \"veToken\": \"0x5f3b5DfEb7B28CDbD7FAba78963EE202a494e2A2\",\n  \"liquidLocker\": \"0x52f541764E6e90eeBc5c21Ff570De0e2D63766B6\",\n  \"sdTokenGauge\": \"0x7f50786A0b15723D741727882ee99a0BF34e3466\",\n  \"symbol\": \"sdToken\",\n  \"decimals\": 18,\n  \"sampleSize\": 30,\n  \"sampleStep\": 5,\n  \"avgBlockTime\": 12.0\n}\n```"
  },
  "spreadsheet": {
    "key": "spreadsheet",
    "author": "bonustrack",
    "version": "0.1.0",
    "dependOnOtherAddress": false,
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "spreadsheet",
          "params": {
            "sheetId": "2PACX-1vTmam7vShzrscNDQ0zy0IC11jJztebhWrK5_5kFT6N_WsEJXDXStmxrOlNmHt9IRf9g7VenegU8vGzh",
            "gid": "0"
          }
        },
        "network": "1",
        "addresses": [
          "0x5BC928BF0DAb1e4A2ddd9e347b0F22e88026D76c",
          "0x4C7909d6F029b3a5798143C843F4f8e5341a3473",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0xdD36Aa96D9BD4b49DA6E6734fF18Cc69F90F9435"
        ],
        "snapshot": 12857715
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. UNI"
              ],
              "maxLength": 16
            },
            "sheetId": {
              "type": "string",
              "title": "Spreadsheet id",
              "examples": [
                "e.g. 2PACX-1vTmam7vShzrscND..."
              ]
            },
            "gid": {
              "type": "string",
              "title": "gid",
              "examples": [
                "0"
              ]
            }
          },
          "required": [
            "sheetId"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# Spreadsheet\n\nDefine voting power in Google Sheets.\n\n### Getting started\n\n- Check the template here: https://docs.google.com/spreadsheets/d/13aJrpOUtajyMLvmjvEqutnEP0FkuH3Z-LPH9m9Mbhis/edit?usp=sharing\n- Select: File > Make a copy\n- On the newly created file select: File > Share > Publish to web\n- On the modal \"Publish to web\" click \"Publish\" button\n- Copy the long id within the URL and use it as \"sheetId\" parameter for the strategy\n- And use the id after \"pub?gid=\" as \"gid\" parameter\n- You are ready!\n\nHere is an example of the strategy parameters:\n\n```json\n{\n  \"sheetId\": \"2PACX-1vTmam7vShzrscNDQ0zy0IC11jJztebhWrK5_5kFT6N_WsEJXDXStmxrOlNmHt9IRf9g7VenegU8vGzh\",\n  \"gid\": \"0\"\n}\n```\n"
  },
  "offchain-delegation": {
    "key": "offchain-delegation",
    "author": "bonustrack",
    "version": "0.1.0",
    "dependOnOtherAddress": true,
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "offchain-delegation",
          "params": {
            "symbol": "DAI (delegated)",
            "sheetId": "2PACX-1vTAo2yFq6GyBZcB3BOnIw_Rzub7KEEzqhhgFY5CD6eCW-Rfx9d4NaMJP8IP67G9YnV3PNPHKvgJeSNY",
            "gid": "1557274211",
            "strategies": [
              {
                "name": "erc20-balance-of",
                "params": {
                  "address": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
                  "decimals": 18
                }
              }
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x4C7909d6F029b3a5798143C843F4f8e5341a3473",
          "0x47D5592606622D807F3B37E5e5C8268355E30925",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0xdD36Aa96D9BD4b49DA6E6734fF18Cc69F90F9435",
          "0x77EC061aC11df6b42Af3784BCE835A5feAF247Dd",
          "0x3BAe6eb858837a9855CE7747feC3FC99a87A86e0"
        ],
        "snapshot": 15820600
      }
    ],
    "schema": null,
    "about": "# Offchain delegation\n\nThis strategy is used to handle offchain delegations.\n\n## Getting started\n- Check the template here: https://docs.google.com/spreadsheets/d/1IQDXROyxavyZ03ZtNW-2uuDjcI_oME-OmY1VFPTAO-M/edit?usp=sharing\n- Select: File > Make a copy\n- On the newly created file select: File > Share > Publish to web\n- On the modal \"Publish to web\" click \"Publish\" button\n- Copy the long id within the URL and use it as \"sheetId\" parameter for the strategy\n- And use the id after \"pub?gid=\" as \"gid\" parameter\n- You are ready!\n\n## Parameters\n- `sheetId`: The id of the spreadsheet\n- `gid`: The id of the sheet\n- `strategies`: The strategies to use, to calculate the score of the delegations\n\nHere is an example of the strategy parameters:\n```json\n{\n  \"sheetId\": \"2PACX-1vTAo2yFq6GyBZcB3BOnIw_Rzub7KEEzqhhgFY5CD6eCW-Rfx9d4NaMJP8IP67G9YnV3PNPHKvgJeSNY\",\n  \"gid\": \"1557274211\",\n  \"strategies\": [\n    {\n      \"name\": \"erc20-balance-of\",\n      \"params\": {\n        \"address\": \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n        \"decimals\": 18\n      }\n    }\n  ]\n}\n```\n"
  },
  "ninechronicles-staked-and-dcc": {
    "key": "ninechronicles-staked-and-dcc",
    "author": "longfin",
    "version": "1.1.0",
    "dependOnOtherAddress": false,
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "ninechronicles-staked-and-dcc",
          "params": {
            "symbol": "Staked 9c assets + DCC",
            "ethLPTokenStakingAddress": "0xc53b567A70dB04E928FB96D6A417971aa88fdA38",
            "ethLPTokenAddress": "0xe8cc7e765647625b95f59c15848379d10b9ab4af",
            "ethWNCGAddress": "0xf203ca1769ca8e9e8fe1da9d147db68b6c919817",
            "ethBalancerVaultAddress": "0xba12222222228d8ba445958a75a0704d566bf2c8",
            "ethDccAddress": "0xcea65a86195c911912ce48b6636ddd365c208130",
            "ncGraphQLEndpoint": "http://rpc-for-snapshot.nine-chronicles.com/graphql",
            "ncBlockHash": "711ce4bcdc0fb5264577876f217a794b2448ccce24e3c7ea0fb9794e420863e4",
            "wNCGDecimals": 18,
            "weights": {
              "stakedWNCG": 1,
              "stakedNCG": 1,
              "dcc": 999
            }
          }
        },
        "network": "1",
        "addresses": [
          "0x10e19ba32927b28eb5424f7b6a3e2eaa5a607f47",
          "0x97aa9e72FAf4B83A719D31B840Bd4F60282E9833",
          "0x7916d7c934a7a5ba67f4c88ddb0c9fec76ebd8b5",
          "0x93b220bc7c36ea8e4c64192301b680273a184ec3",
          "0x30f1d1ffad34b24bb8310ad9dd237b854b4daea7",
          "0x961c18a23306fe44c4323adcb3bc343b0d193670",
          "0x03eA88F51D9D290e5E72e6F7C70abD2bB9CE9b78",
          "0x8D45A60b37D09bEEdA9c1C86b7e4d714Ae625254"
        ],
        "snapshot": 15797760
      }
    ],
    "schema": null,
    "about": "# Nine Chronicles DAO voting strategy (by staked assets and D:CC)\n\nThis strategy returns calculated score based on staked assets ([Nine Chronicles Gold (NCG)][NCG], [Wrapped Nine Chronicles Gold (wNCG)][wNCG] and [D:CC]) of given accounts.\n\n[NCG]: https://docs.nine-chronicles.com/introduction/intro/nine-chronicles-gold-ncg\n[wNCG]: https://etherscan.io/token/0xf203ca1769ca8e9e8fe1da9d147db68b6c919817\n[D:CC]: https://dcc.nine-chronicles.com/\n\n\n## Calculation\n\nThe `score` representing the account's voting power will be calculated with:\n\n```\nscore = (w1 * staked_ncg) + (w2 * staked_wncg) + (w3 * dcc_balance)\n```\n\n- `staked_ncg`: The staked NCG amounts of given account. (on Nine Chronicles mainnet)\n- `staked_wncg`: The staked wNCG amounts of given account. (on Ethereum mainnet)\n- `w1`, `w2`, `w3`: Weights for each amounts. it can be configured by parameters.\n\nAlso, the `staked_wncg` of the account will be calculated with:\n\n```\nstaked_wncg = (wncg_in_vault / total_lp_supply) * staked_lp_tokens\n```\n\n- `wncg_in_vault`: The total wNCG amounts that [Balancer] Vault held.\n- `total_lp_supply`: The total supply of LP token that Balancer pool issued.\n- `staked_lp_tokens`: The staked LP token amounts in the staking contract of given account.\n  - This value only refers staking contract from [Planetarium] and staked value on its backed pool (from Balancer) will be ignored.\n\n[Balancer]: https://balancer.fi/\n[Planetarium]: https://planetariumhq.com/\n\n\n## Parameters\n\n- `symbol` - (**Optional**, `string`): The symbol of voting score.\n- `ethLPTokenStakingAddress` - (**Required**, `string`): The address of staking contract on Ethereum.\n- `ethLPTokenAddres` - (**Required**, `string`): The address of LP token contract on Ethereum.\n- `ethWNCGAddress` - (**Required**, `string`): The address of wNCG token contract on Ethereum.\n- `ethBalancerVaultAddress` - (**Required**, `string`): The address of Balancer Vault contract on Ethereum.\n- `ethDccAddress` - (**Required**, `string`): The address of D:CC token contract on Ethereum.\n- `ncGraphQLEndpoint` - (**Required**, `string`): The GraphQL endpoint of Nine Chronicles to query.\n- `ncBlockHash` - (**Required**, `string`): The target Block Hash of Nine Chronicles.\n- `wNCGDecimal` - (**Optional**, `number`): The decimal precision for wNCG. default is 18.\n- `weights` - (**Optional**, `number`): Weight values for the fomular . these values must be integers without decimal parts.\n  - `stakedNCG`: Weight for staked NCG. (`w1`)\n  - `stakedWNCG`: Weight for staked wNCG. (`w2`)\n  - `dcc`: Weight for D:CC. (`w3`)\n\n\n## Examples\n\n```json\n{\n  \"symbol\": \"Staked 9c assets + DCC\",\n  \"ethLPTokenStakingAddress\": \"0xc53b567a70db04e928fb96d6a417971aa88fda38\",\n  \"ethLPTokenAddress\": \"0xe8cc7e765647625b95f59c15848379d10b9ab4af\",\n  \"ethWNCGAddress\": \"0xf203ca1769ca8e9e8fe1da9d147db68b6c919817\",\n  \"ethBalancerVaultAddress\": \"0xba12222222228d8ba445958a75a0704d566bf2c8\",\n  \"ethDccAddress\": \"0xcea65a86195c911912ce48b6636ddd365c208130\",\n  \"ncGraphQLEndpoint\": \"http://rpc-for-snapshot.nine-chronicles.com/graphql\",\n  \"ncBlockHash\": \"711ce4bcdc0fb5264577876f217a794b2448ccce24e3c7ea0fb9794e420863e4\",\n  \"wNCGDecimals\": 18,\n  \"weights\": {\n    \"stakedWNCG\": 1,\n    \"stakedNCG\": 1,\n    \"dcc\": 999\n  }\n}\n```\n"
  },
  "rep3-badges": {
    "key": "rep3-badges",
    "author": "eth-jashan",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "rep3-badges",
          "params": {
            "symbol": "REP-3",
            "rep3ContractAddress": "0x959a3e7e2ea1ea56c9127ae9ed271ede495d145f",
            "erc20Token": "0x6b175474e89094c44da98b954eedeac495271d0f",
            "erc20Symbol": "DAI",
            "erc20Decimal": 18,
            "subgraphNetwork": 80001,
            "specs": [
              {
                "type": 0,
                "level": 1,
                "weight": 5
              },
              {
                "type": 0,
                "level": 2,
                "weight": 10
              },
              {
                "type": 0,
                "level": 3,
                "weight": 15
              },
              {
                "type": 0,
                "level": 4,
                "weight": 20
              },
              {
                "type": 1,
                "weight": 2
              }
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x565CBd65Cb3e65445AfD14169003A528C985e9C7",
          "0xD1fe5790AD50C9E8d2e9F03f4f42A09a9F59dec3",
          "0x56d0b5ed3d525332f00c9bc938f93598ab16aaa7",
          "0x49e4dbff86a2e5da27c540c9a9e8d2c3726e278f",
          "0x4757ce43dc5429b8f1a132dc29ef970e55ae722b",
          "0xd7539FCdC0aB79a7B688b04387cb128E75cb77Dc",
          "0x6E33e22f7aC5A4b58A93C7f6D8Da8b46c50A3E20",
          "0xC9dA7343583fA8Bb380A6F04A208C612F86C7701",
          "0x2AC89522CB415AC333E64F52a1a5693218cEBD58"
        ],
        "snapshot": 15874502
      },
      {
        "name": "Example query",
        "strategy": {
          "name": "rep3-badges",
          "params": {
            "symbol": "REP-3",
            "rep3ContractAddress": "0x959a3e7e2ea1ea56c9127ae9ed271ede495d145f",
            "subgraphNetwork": 80001,
            "specs": [
              {
                "type": 0,
                "level": 1,
                "weight": 5
              },
              {
                "type": 0,
                "level": 2,
                "weight": 10
              },
              {
                "type": 0,
                "level": 3,
                "weight": 15
              },
              {
                "type": 0,
                "level": 4,
                "weight": 20
              },
              {
                "type": 1,
                "weight": 2
              }
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x565CBd65Cb3e65445AfD14169003A528C985e9C7",
          "0xD1fe5790AD50C9E8d2e9F03f4f42A09a9F59dec3",
          "0x56d0b5ed3d525332f00c9bc938f93598ab16aaa7",
          "0x49e4dbff86a2e5da27c540c9a9e8d2c3726e278f",
          "0x4757ce43dc5429b8f1a132dc29ef970e55ae722b",
          "0xd7539FCdC0aB79a7B688b04387cb128E75cb77Dc",
          "0x6E33e22f7aC5A4b58A93C7f6D8Da8b46c50A3E20",
          "0xC9dA7343583fA8Bb380A6F04A208C612F86C7701",
          "0x2AC89522CB415AC333E64F52a1a5693218cEBD58"
        ],
        "snapshot": 15864502
      }
    ],
    "schema": null,
    "about": "# REP3 Badges\n\nThe Proof of Contribution Protocol (or PoCP) is the beta version of rep3's credentialing protocol. The rep3 DAO tool (live at https://app.rep3.gg/) is one possible implementation of the protocol to facilitate better member and contribution management for DAOs.\n\nUsing the protocol, DAOs can give various types of badges to their members. These badges are organised in a parent-child relationship -- first, all members receive a membership badge (which is the parent badge), and then members can receive contribution badges (representing their work) or any other type of badge as designed by the community (for example, one-off badges to acknowledge exemplary work). The contribution badges and the custom badges are children to the membership badge.\n\nThis architecture lets communities track and visualise their member activity and, on the other hand, lets community members build their portfolio of work through on-chain credentials. These naturally have a higher signalling value than more traditional types of portfolios like resumés.\n\nBadges given through the rep3 platform are also fully interoperable with several web3 tools, especially those that are used for gating resources behind a token. These badges, at a contract level, are custom implmentations of ERC-721 tokens. This is a deliberate decision to balance the trade-off between maintaining the integrity of these badges (w.r.t. the work they represent) and permitting key rotation by users.\n\nThe rest of this document details the technical specifications and integration process of our protocol. Please note that this document might be confusing to understand or even have some outdated parts. We are in the process of updating these as we begin to focus on protocol-level integrations in addition to focussing on tool adoption.\n\nAs always, do not hesitate at all to reach out to any team member in case you have a question. We usually reply within 12h and will be more than happy to address any questions you may have.\n\nHave a great day ahead!\n\n```json\n{\n  \"symbol\": \"REP-3\",\n  \"rep3ContractAddress\": \"0x959a3e7e2ea1ea56c9127ae9ed271ede495d145f\",\n  \"erc20Token\": \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n  \"erc20Symbol\": \"DAI\",\n  \"erc20Decimal\": 18,\n  \"subgraphNetwork\": 80001,\n  \"specs\": [\n    {\n      \"type\": 0,\n      \"level\": 1,\n      \"weight\": 5\n    },\n    {\n      \"type\": 0,\n      \"level\": 2,\n      \"weight\": 10\n    },\n    {\n      \"type\": 0,\n      \"level\": 3,\n      \"weight\": 15\n    },\n    {\n      \"type\": 0,\n      \"level\": 4,\n      \"weight\": 20\n    },\n    {\n      \"type\": 1,\n      \"weight\": 2\n    }\n  ]\n}\n```\n"
  },
  "marsecosystem": {
    "key": "marsecosystem",
    "author": "etedwardelric",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example",
        "strategy": {
          "name": "marsecosystem",
          "params": {
            "token": "0x7859B01BbF675d67Da8cD128a50D155cd881B576",
            "miningMasters": [
              {
                "address": "0xc7B8285a9E099e8c21CA5516D23348D8dBADdE4a",
                "pid": 0
              },
              {
                "address": "0x48C42579D98Aa768cde893F8214371ed607CABE3",
                "pid": 0
              }
            ],
            "upMiningMasters": [
              {
                "address": "0x38823CB52d152e0fFe637D63F97f6F771a071Ea0",
                "pid": 0
              },
              {
                "address": "0x38823CB52d152e0fFe637D63F97f6F771a071Ea0",
                "pid": 1
              },
              {
                "address": "0x38823CB52d152e0fFe637D63F97f6F771a071Ea0",
                "pid": 2
              },
              {
                "address": "0x38823CB52d152e0fFe637D63F97f6F771a071Ea0",
                "pid": 3
              }
            ],
            "lps": [
              {
                "lpToken": "0x40B605d8BeED09568E702Deadce90fb23cfd74d8",
                "multi": 1500,
                "miningMasters": [
                  {
                    "address": "0xc7B8285a9E099e8c21CA5516D23348D8dBADdE4a",
                    "pid": 1
                  },
                  {
                    "address": "0x48C42579D98Aa768cde893F8214371ed607CABE3",
                    "pid": 1
                  }
                ],
                "upMiningMasters": [
                  {
                    "address": "0x38823CB52d152e0fFe637D63F97f6F771a071Ea0",
                    "pid": 4
                  },
                  {
                    "address": "0x38823CB52d152e0fFe637D63F97f6F771a071Ea0",
                    "pid": 5
                  }
                ]
              },
              {
                "lpToken": "0xe47cCE810174Ac2aCEaB936e6FF93690888bcF24",
                "multi": 2000,
                "miningMasters": [
                  {
                    "address": "0xc7B8285a9E099e8c21CA5516D23348D8dBADdE4a",
                    "pid": 7
                  },
                  {
                    "address": "0x22D8d50454203bd5a41B49ef515891f1aD9f3e53",
                    "pid": 3
                  }
                ],
                "upMiningMasters": [
                  {
                    "address": "0x38823CB52d152e0fFe637D63F97f6F771a071Ea0",
                    "pid": 6
                  }
                ]
              }
            ],
            "symbol": "XMS",
            "decimals": 18
          }
        },
        "network": "56",
        "addresses": [
          "0x3139f8eb391f8bfb478b9c155e009c59a689d7e0",
          "0xc03f7c895ae99bd63b2b9569d8465c1cb8f48807",
          "0x74e3a06361b0c67d736020c3b09196aa84019bff",
          "0xae2113de1cd10c5d626e902760638a4f5ae53d7a",
          "0xa3abadcddf9c7194b7a9059ea76b5cfb6aa31c6f",
          "0x1b983e23b541785e44fe1dae6e0d67d7d1ac4912",
          "0xbc8da18ef4cfc2282487c0fba2daa8fa7623045f",
          "0xbda6ba3ad624582495c55451a1840e563fc16389",
          "0xdab35f3e690b005b6cec2ed692def81b9702186a",
          "0x9a85032ce857d536784a6493273ba32e8562c6e2",
          "0xbfb7746a642e4ac4549da3f203da3d110f0c4a4d",
          "0xe1b7b6216cc1b73a35e651674d43a4aad495ac6c",
          "0x1265a989b92bdcb9a5cb86d86f3701fca5514cb7",
          "0xea013d2a1eaaf64808d6e1d2227564ec69d977fd",
          "0xeaac9ebbdd62c7a7f3d881763dbb23770deb353b",
          "0x1d9155f814a832af287bf6965bd66fbf12c69d4f",
          "0x711cae85542082daf93a14403d148bb91299c6fb",
          "0x75f9a46a78757d0ea1557abf6cb04499960ef951",
          "0xbf329b00b533485987c957182bfb02bcee9c3994"
        ],
        "snapshot": 22704707
      }
    ],
    "schema": null,
    "about": "# marsecosystem\n\nThis is the most common strategy, it returns the balances of the voters for a specific ERC20 token.\n\nHere is an example of parameters:\n\n```json\n{\n  \"token\": \"0x7859B01BbF675d67Da8cD128a50D155cd881B576\",\n  \"miningMasters\": [\n    { \"address\": \"0xc7B8285a9E099e8c21CA5516D23348D8dBADdE4a\", \"pid\": 0 },\n    { \"address\": \"0x48C42579D98Aa768cde893F8214371ed607CABE3\", \"pid\": 0 }\n  ],\n  \"upMiningMasters\": [\n    { \"address\": \"0x38823CB52d152e0fFe637D63F97f6F771a071Ea0\", \"pid\": 0 },\n    { \"address\": \"0x38823CB52d152e0fFe637D63F97f6F771a071Ea0\", \"pid\": 1 },\n    { \"address\": \"0x38823CB52d152e0fFe637D63F97f6F771a071Ea0\", \"pid\": 2 },\n    { \"address\": \"0x38823CB52d152e0fFe637D63F97f6F771a071Ea0\", \"pid\": 3 }\n  ],\n  \"lps\": [\n    {\n      \"lpToken\": \"0x40B605d8BeED09568E702Deadce90fb23cfd74d8\",\n      \"multi\": 1500,\n      \"miningMasters\": [\n        {\n          \"address\": \"0xc7B8285a9E099e8c21CA5516D23348D8dBADdE4a\",\n          \"pid\": 1\n        },\n        {\n          \"address\": \"0x48C42579D98Aa768cde893F8214371ed607CABE3\",\n          \"pid\": 1\n        }\n      ],\n      \"upMiningMasters\": [\n        {\n          \"address\": \"0x38823CB52d152e0fFe637D63F97f6F771a071Ea0\",\n          \"pid\": 4\n        },\n        {\n          \"address\": \"0x38823CB52d152e0fFe637D63F97f6F771a071Ea0\",\n          \"pid\": 5\n        }\n      ]\n    },\n    {\n      \"lpToken\": \"0xe47cCE810174Ac2aCEaB936e6FF93690888bcF24\",\n      \"multi\": 2000,\n      \"miningMasters\": [\n        {\n          \"address\": \"0xc7B8285a9E099e8c21CA5516D23348D8dBADdE4a\",\n          \"pid\": 7\n        },\n        {\n          \"address\": \"0x22D8d50454203bd5a41B49ef515891f1aD9f3e53\",\n          \"pid\": 3\n        }\n      ],\n      \"upMiningMasters\": [\n        {\n          \"address\": \"0x38823CB52d152e0fFe637D63F97f6F771a071Ea0\",\n          \"pid\": 6\n        }\n      ]\n    }\n  ],\n  \"symbol\": \"XMS\",\n  \"decimals\": 18\n}\n```\n"
  },
  "ari10-staking-locked": {
    "key": "ari10-staking-locked",
    "author": "oritwoen",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "ari10-staking-locked",
          "params": {
            "address": "0xBCC1b6477B52212fb62734D21bC0ecAE684B4970",
            "input": "lockedAmount",
            "weight": 1
          }
        },
        "network": "56",
        "addresses": [
          "0x6cb10a891e5713d34076bbecd16d898f26b84b33",
          "0xab59182e57fd3e4a459c36b6473b82b0d91d840f",
          "0xf58951274cf026db8277f898204f954e8d3e56a3"
        ],
        "snapshot": 22879530
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "title": "Contract address",
              "examples": [
                "e.g. 0xBCC1b6477B52212fb62734D21bC0ecAE684B4970"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "input": {
              "type": "string",
              "title": "Input",
              "examples": [
                "e.g. lockedAmount"
              ]
            },
            "weight": {
              "type": "number",
              "title": "Weight",
              "examples": [
                "e.g. 3"
              ]
            }
          },
          "required": [
            "address",
            "input",
            "weight"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": ""
  },
  "skale-delegation-weighted": {
    "key": "skale-delegation-weighted",
    "author": "payvint",
    "version": "2.0.0",
    "examples": [
      {
        "name": "Directly delegated amount of SKL token or delegated with Escrow ",
        "strategy": {
          "name": "skale-delegation-weighted",
          "params": {
            "addressSKL": "0x00c83aeCC790e8a4453e5dD3B0B4b3680501a7A7",
            "addressAllocator": "0xB575c158399227b6ef4Dcfb05AA3bCa30E12a7ba"
          }
        },
        "network": "1",
        "addresses": [
          "0xD6f4196EDe7a5e83e4819bf77784F8b24D9475BD",
          "0xB4FA5AA4073E43C8b8E780df971856fc9e94F7c8",
          "0x4AeD8A87544fFAe057354A4a762E70c38f5D6bc7",
          "0x6A3B29FdfC7F4752851451fA20ECdCFeb1bA2Fd0",
          "0xF2cCBcF4Ac3e021C4041F39F751A0b46b1C8aa14",
          "0x9c738ed8D50B283B7884DA4e69400a178158e42e",
          "0x2B3C7D1eF5FDfC0557934019c531d3E70D6200AE",
          "0x80F41289795F122C82b83D8C3A760E01FDBF5C76",
          "0x0BC34C33880a45d7Aa3bfDafE37Fd157E1Dca9bb",
          "0x34F3833b540947b24A7F6f482a9FF62cD11a47CF",
          "0x864521f4A31f1C893f8414697dFb6D3A2d949AC5",
          "0xFdD2245Fa2B7881AB78C171Cc84F088e520450E2",
          "0xd753854eA19B204E6Ee9b5544239Fcc7d40f932A",
          "0xfFd22b84fB1d46ef74Ed6530b2635BE61340f347",
          "0x7e32a321A9a0c8B06058CA0230a3E4D11d2a9411",
          "0x2E11D2bd07583bAE4B8337e5982384dF16BcB4e1"
        ],
        "snapshot": 17487103
      }
    ],
    "schema": null,
    "about": "# skale-delegation-weighted\n\nThis strategy allow SKL tokens holders to participate in vote, where the weight of the vote is an amount of delegated tokens.\nHolder can delegate directly or with Escrow contract(provided by SKALE)\n\nRequired params in `example.json`:\n - addressSKL - address of SKL token\n - addressAllocator - address of Allocator contract\n - validatorPower - enable validator voting(will count as amount of delegated to this validator minus holders who delegated) -\noptional param default is `true`\n - onlyValidator - enable only validator voting - optional param default is `false`\n\n```json\n{\n  \"addressSKL\": \"0x00c83aeCC790e8a4453e5dD3B0B4b3680501a7A7\",\n  \"addressAllocator\": \"0xB575c158399227b6ef4Dcfb05AA3bCa30E12a7ba\",\n  \"validatorPower\": false,\n  \"onlyValidator\": true\n}\n```\n"
  },
  "reliquary": {
    "key": "reliquary",
    "author": "0xSkly",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example configuration",
        "strategy": {
          "name": "reliquary",
          "params": {
            "reliquaryAddress": "0x1ed6411670c709F4e163854654BD52c74E66D7eC",
            "poolId": 1,
            "minVotingLevel": 1,
            "maxVotingLevel": 7,
            "decimals": 18,
            "strategy": "multiplier",
            "useLevelOnUpdate": false
          }
        },
        "network": "250",
        "addresses": [
          "0x4fbe899d37fb7514adf2f41B0630E018Ec275a0C",
          "0x945d88011cAC5FDc3eAF7DbA51592bfA98aEe91A",
          "0x1E243A85822E2CD42C81359E0ea42033000D02a4",
          "0xf7Ee8A9d014E9046D007bD448AaE7C667eF91E98"
        ],
        "snapshot": 54393483
      }
    ],
    "schema": null,
    "about": "# reliquary\n\nThis strategy utilizes Relic NFTs from Reliquary to calculate voting power. The strategy can be configured to either\nuse the level number to weight the voting power or the multiplier assigned to each level.\n\nIf we use the levels strategy, the formula to calculate the voting power is\n\n`votingPower = level / maxVotingLevel * amount`\n\nor if we use multiplier\n\n`votingPower = levelMultiplier / maxLevelMultiplier * amount`\n\nIn other words, if the nft has reached max voting level the voting power is equal to the amount deposited.\n\nSince Relic levels only update on an interaction, we have to chose if we want to use the current 'actual' level, or the level which the relic would\nhave after an update. This can be done using the `useLevelOnUpdate` flag.\n\nConfiguration:\n| property | type | value | description |\n|------|---|---|---|\n| reliquaryAddress | string | 0x12345... | address of reliquary contract\n| poolId | number | 0...n | pool ID used for voting\n| minVotingLevel | number | 0...n | min level required to vote\n| maxVotingLevel | number | 0...n | max voting level\n| decimals | number | 6..18 | number of decimals of the token deposited into this pool\n| strategy | string | 'level' / 'multiplier' | which strategy to use to weight voting power\n| useLevelOnUpdate | boolean | true / false | use hypothetical level after update\n\n```json\n{\n  \"reliquaryAddress\": \"0xb0fc43069089d0fa02baaa896ac2efcb596d7d05\",\n  \"poolId\": 1,\n  \"minVotingLevel\": 1,\n  \"maxVotingLevel\": 7,\n  \"decimals\": 18,\n  \"strategy\": \"multiplier\",\n  \"useLevelOnUpdate\": false\n}\n```\n"
  },
  "jpegd-locked-jpeg-of": {
    "key": "jpegd-locked-jpeg-of",
    "author": "0xleez",
    "version": "0.1.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "jpegd-locked-jpeg-of",
          "params": {}
        },
        "network": "1",
        "addresses": [
          "0x9c5083dd4838e120dbeac44c052179692aa5dac5",
          "0xB0dAfc466871c29662E5cbf4227322C96A8Ccbe9",
          "0x0017dfe08bcc0dc9a323ca5d4831e371534e9320"
        ],
        "snapshot": 16119881
      }
    ],
    "schema": null,
    "about": "# jpegd-locked-jpeg-of\n\nThis strategy returns voters' aggregated locked JPEG token balance for Trait and LTV Boosts on the JPEG'd platform\n"
  },
  "lodestar-vesting": {
    "key": "lodestar-vesting",
    "author": "0xAppo",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "lodestar-vesting",
          "params": {
            "address": "0xF19547f9ED24aA66b03c3a552D181Ae334FBb8DB",
            "symbol": "LODE",
            "decimals": 18,
            "beneficiaryAddresses": [
              "0x719Df6573bfA3bD240932cAD63839cfB85de3aB5",
              "0xeAc36dF6A6212CC1D5c59b6F59547eeC083A1bDa",
              "0x85EB5a2077E88559B8A63206Fbc9A9311f8e63a5"
            ],
            "contractAddresses": [
              "0x71C85F343715C406C58c1e8099F13890f2925c85",
              "0x2DD5B039a7c54132B8733573a28Cd9d1a5Fa5328",
              "0x05bc2c8310D18dB816264E95383b1C50FC32d297"
            ]
          }
        },
        "network": "42161",
        "addresses": [
          "0xeAc36dF6A6212CC1D5c59b6F59547eeC083A1bDa",
          "0x719Df6573bfA3bD240932cAD63839cfB85de3aB5",
          "0x85EB5a2077E88559B8A63206Fbc9A9311f8e63a5"
        ],
        "snapshot": 44776525
      }
    ],
    "schema": null,
    "about": "# lodestar-vesting\n\nCalculates voting power of locked & vesting ERC20 tokens. The indices of the beneficiary addresses and their vesting contract addresses MUST match in order to properly match beneficiaries with their associated vesting contracts.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0xF19547f9ED24aA66b03c3a552D181Ae334FBb8DB\",\n  \"symbol\": \"LODE\",\n  \"decimals\": 18,\n  \"beneficiaryAddresses\": [\n    \"0x41C2F1Af5a4a4C65b580c1397141684F96B68aAb\"\n  ],\n  \"contractAddresses\": [\n    \"0x658fD8f0e4380c9823C6a18974096A2b2aC8842e\"\n  ]\n}\n```\n"
  },
  "lodestar-staked-lp": {
    "key": "lodestar-staked-lp",
    "author": "0xAppo",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "lodestar-staked-lp",
          "params": {
            "stakingPoolAddresses": [
              "0x4Ce0C8C8944205C0A134ef37A772ceEE327B4c11"
            ],
            "tokenAddress": "0xF19547f9ED24aA66b03c3a552D181Ae334FBb8DB",
            "lpTokenAddress": "0xFB36f24872b9C57aa8264E1F9a235405C4D3fC36",
            "symbol": "LODE",
            "decimals": 18
          }
        },
        "addresses": [
          "0xcada41bdb95227ee3f3c2f4a37a843d384fbb48d",
          "0xdee375c0976e1e5b5a2cfdf1846eb055d6d107ed",
          "0xa79456cc03fc4eca28ecd675988a6c78e421e12e"
        ],
        "network": 42161,
        "snapshot": 44754575
      }
    ],
    "schema": null,
    "about": "# lodestar-staked-lp\n\nUsed for fetching the staked LP token balance in a single staking pool and calculating\nassociated voting power. Voting power per staked LP token is calculated in terms of a \"token weight\", or the amount of the voting token that comprises 1 LP token (total amount of voting token in LP pool * 2 / total supply of LP tokens). The address' balance of LP tokens is multiplied by token weight to yield total voting power from staked LP tokens.\n\nHere is an example of parameters:\n\n```json\n{\n  \"stakingPoolAddresses\": [\n    \"0x4Ce0C8C8944205C0A134ef37A772ceEE327B4c11\"\n  ],\n  \"tokenAddress\": \"0xF19547f9ED24aA66b03c3a552D181Ae334FBb8DB\",\n  \"lpTokenAddress\": \"0xFB36f24872b9C57aa8264E1F9a235405C4D3fC36\",\n  \"symbol\": \"LODE\",\n  \"decimals\": 18\n}\n```\n"
  },
  "battlefly-vgfly-and-staked-gfly": {
    "key": "battlefly-vgfly-and-staked-gfly",
    "author": "Archethect",
    "version": "0.0.2",
    "examples": [
      {
        "name": "Battlefly vgFLY holders, gFLY stakers and founder token stakers",
        "strategy": {
          "name": "battlefly-vgfly-and-staked-gfly",
          "params": {
            "graphUrl": "https://api.thegraph.com/subgraphs/name/battlefly-game/gfly-main",
            "gFLYAddress": "0x872bAD41CFc8BA731f811fEa8B2d0b9fd6369585",
            "magicAddress": "0x539bdE0d7Dbd336b79148AA742883198BBF60342",
            "lpAddress": "0x088F2Bd3667F385427d9289C28725D43d4b74AB4",
            "v1FoundersVault": "0x2F67932136D84De27D99Ed89a423b907A1b10930",
            "v2FoundersVault": "0x6c9CC5a6d5484CB8eAB1438632BBf667A5E25eD9",
            "foundersToken": "0xc43104775BD9f6076808B5F8dF6CbdBeac96d7dE",
            "vgFLYAddress": "0x86d643b7f4a2a6772A4B1bFBee5EcE46A1DE3dfD",
            "symbol": "gFLY",
            "decimals": 18
          }
        },
        "network": "42161",
        "addresses": [
          "0x0eB468F89E5bcFA4c933c8982D8d19554e101cfe",
          "0x78063Ed58Edea4Ae4981946D6b4Cc63d8928CCBC",
          "0x4026b3Da349C2952255Ca9db4F055ea57F4e037C",
          "0x06C244a9BaFBC96E609A8DF32A07178552C7295a"
        ],
        "snapshot": 47081042
      }
    ],
    "schema": null,
    "about": "# battlefly-vgfly-and-staked-gfly\n\nThis strategy calculates the voting power for addresses with one or more of the following requirements:\n\n* An amount of unvested tokens\n* An amount of staked tokens\n* An amount of staked LP tokens\n* An amount of staked founder tokens\n\nAs input a graphUrl is required which will return those amounts for each queried address.\nAdditionally, the gFLY, magic vgFLY and LP token addresses are required for some on-chain calls that are not possible with Subgraph.\n\n```json\n{\n  \"graphUrl\": \"https://api.thegraph.com/subgraphs/name/battlefly-game/gfly-main\",\n  \"gFLYAddress\": \"0x872bAD41CFc8BA731f811fEa8B2d0b9fd6369585\",\n  \"magicAddress\": \"0x539bdE0d7Dbd336b79148AA742883198BBF60342\",\n  \"lpAddress\": \"0x088F2Bd3667F385427d9289C28725D43d4b74AB4\",\n  \"v1FoundersVault\": \"0x2F67932136D84De27D99Ed89a423b907A1b10930\",\n  \"v2FoundersVault\": \"0x6c9CC5a6d5484CB8eAB1438632BBf667A5E25eD9\",\n  \"foundersToken\": \"0xc43104775BD9f6076808B5F8dF6CbdBeac96d7dE\",\n  \"vgFLYAddress\": \"0x86d643b7f4a2a6772A4B1bFBee5EcE46A1DE3dfD\",\n  \"symbol\": \"gFLY\",\n  \"decimals\": 18\n}\n```\n"
  },
  "nexon-army-nft": {
    "key": "nexon-army-nft",
    "author": "nexonfidev",
    "version": "0.1.0",
    "SUBGRAPH_URL": {
      "137": "https://api.thegraph.com/subgraphs/name/nexon-finance/nexon-army-nft"
    },
    "examples": [
      {
        "name": "Nexon Army NFT Holders",
        "strategy": {
          "name": "nexon-army-nft"
        },
        "network": "137",
        "addresses": [
          "0xd43BA4193920dA3A288AAf3400dcb5be62fB1dee",
          "0x8966D8aCbb4b0d5830fca4b0Dd3b134e41049B19",
          "0x6A6B81b62389ef53e201B855b30b1B92D73B1C4F",
          "0xDb8D2DBB24A346b5b84981B1D5e741F67596009C"
        ],
        "snapshot": 38466628
      }
    ],
    "schema": null,
    "about": ""
  },
  "moonbeam-free-balance": {
    "key": "moonbeam-free-balance",
    "author": "crystalin",
    "version": "0.1.0",
    "examples": [
      {
        "name": "moonbeam-free-balance",
        "strategy": {
          "name": "moonbeam-free-balance",
          "params": {
            "decimals": 18
          }
        },
        "network": "1284",
        "addresses": [
          "0xf02ddb48eda520c915c0dabadc70ba12d1b49ad2",
          "0x01bb6ce8b88f09a7d0bfb40eff7f2ad5e0df2e98",
          "0xe751b9ea560a200161d1b70249495e3d22ec5b00"
        ],
        "snapshot": 3044139
      }
    ],
    "schema": null,
    "about": "# Moonbeam Free Balance strategy\n\nThis strategy return the free balances on Moonbeam network. The free balance includes the \"locked\" tokens, which can be used for voting, but not the \"reserved\" tokens.\n\n## Examples\n\n```JSON\n[\n  {\n    \"name\": \"moonbeam-free-balance\",\n    \"strategy\": {\n      \"name\": \"moonbeam-free-balance\",\n      \"params\": {}\n    },\n    \"network\": \"1284\",\n    \"addresses\": [ \n      \"0xf02ddb48eda520c915c0dabadc70ba12d1b49ad2\",\n      \"0x01bb6ce8b88f09a7d0bfb40eff7f2ad5e0df2e98\",\n      \"0xe751b9ea560a200161d1b70249495e3d22ec5b00\"\n    ],\n    \"snapshot\": 14129872\n  }\n]\n```\n"
  },
  "stakedotlink-vesting": {
    "key": "stakedotlink-vesting",
    "author": "stakedotlink",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "stakedotlink-vesting",
          "params": {
            "address": "0xAEF186611EC96427d161107fFE14bba8aA1C2284",
            "symbol": "stSDL",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x427a9957d3a131EE969a3BB5537070C6aEf03Ea4",
          "0xF2aD781cFf42E1f506b78553DA89090C65b1A847",
          "0xc316276f87019e5adbc3185A03e23ABF948A732D",
          "0xE2b7cBA5E48445f9bD17193A29D7fDEb4Effb078"
        ],
        "snapshot": 16478298
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. UNI"
              ],
              "maxLength": 16
            },
            "address": {
              "type": "string",
              "title": "Contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ]
            }
          },
          "required": [
            "address",
            "decimals"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# stakedotlink-vesting\n\nReturns the vesting amount of tokens within a stake.link [DelegatorPool](https://github.com/stakedotlink/contracts/blob/main/contracts/core/DelegatorPool.sol).\n\nTo calculate the amount of vesting tokens, the strategy will perform `totalBalanceOf - balanceOf`, returning the amount \ntokens currently vesting at any given point in time.\n\n- `totalBalanceOf`: Total balance of account including vesting tokens as per `VestingSchedule`\n- `balanceOf`: Balance of account excluding vesting tokens as per `VestingSchedule`\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0xAEF186611EC96427d161107fFE14bba8aA1C2284\",\n  \"symbol\": \"stSDL\",\n  \"decimals\": 18\n}\n```\n"
  },
  "psp-in-sepsp2-balance": {
    "key": "psp-in-sepsp2-balance",
    "author": "paraswap",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "psp-in-sepsp2-balance",
          "params": {
            "address": "0xcafe001067cdef266afb7eb5a286dcfd277f3de5",
            "symbol": "PSP",
            "decimals": 18,
            "sePSP2": {
              "address": "0x593F39A4Ba26A9c8ed2128ac95D109E8e403C485",
              "decimals": 18
            },
            "balancer": {
              "poolId": "0xcb0e14e96f2cefa8550ad8e4aea344f211e5061d00020000000000000000011a",
              "BalancerHelpers": "0x5aDDCCa35b7A0D07C74063c48700C8590E87864E",
              "Vault": "0xBA12222222228d8Ba445958a75a0704d566BF2C8"
            },
            "multiplier": 2.5
          }
        },
        "network": "1",
        "addresses": [
          "0x05182E579FDfCf69E4390c3411D8FeA1fb6467cf",
          "0x0DDC793680FF4f5793849c8c6992be1695CbE72A",
          "0x0edefa91e99da1eddd1372c1743a63b1595fc413",
          "0xd37f7b32a541d9e423f759dff1dd63181651bd04",
          "0xf9aa0da6e2fa01a17e2f69e878e45bb26c1b34b7",
          "0xc570429a39a93fd267d1047b2363cfba07198ff7",
          "0x4e8ffddb1403cf5306c6c7b31dc72ef5f44bc4f5",
          "0x0ddc793680ff4f5793849c8c6992be1695cbe72a",
          "0xd880507d359af862a5f8f318c8e934ab478ca818",
          "0x510a7cd4ba40f7b6643f566a5d45ea55f5cd8d0e",
          "0x1ff3c4bfa745b72f942c5cf2b769b3d8a6610a5e",
          "0x5577933afc0522c5ee71115df61512f49da0543e",
          "0x6eb8d6bccceb84832725dcf792468dd8ba088449",
          "0xe768FF81990E7Ac73C18a2eCbf038815023599Dc",
          "0xB9E11C28617D46866c1D7d95EaebAC3AC12CDAD3",
          "0xB5714084eeF0f02eFDD145DFB3Fe2e3290591D7b",
          "0xCC6B30531DE603787a4D0305FC7eD404374Cf771",
          "0xcb492647CB51E243Fb2582C0300C4c7573acdEBf",
          "0xB8f6f3cc7b162d7E5b9196140Fb1878cdA316ba0",
          "0x584BaA4b71b0A3fA522658128f36a6A4AbeAC2ae"
        ],
        "snapshot": 16492220
      }
    ],
    "schema": null,
    "about": "# psp-in-sepsp2-balance\n\nThis is a strategy to get PSP balances staked in sePSP2 contract and multiply that by `options.multiplier`.\n\nIt works like this:\n1. Get BPT balance an account holds\n```js\nconst sePSP_balance = BPT_balance = SPSP.PSPBalance(address)\n```\n\n2. Get tokens of the Balancer Pool\n```js\nconst [tokens] = await Vault.getPoolTokens(poolId)\n```\n\n3. Construct an exit pool request that could be used to unstake 1 BPT balance\n```js\nconst exitPoolRequest = {\n  assets: tokens, // Balancer Pools underlying tokens\n  minAmountsOut: [0,0], // minimal amounts received\n  userData, // endoded [1, 1e18], // ExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT = 1\n  toInternalBalance: false, // transfer tokens to recipient, as opposed to depositing to internal balance\n}\n  ```\n\n4. Find how many tokens you would receive by unstaking 1 BPT balance\n```js\nconst [amountsOut] = await BalancerHelpers.callStatic.queryExit(\n  poolId,\n  Zero_account, // sender\n  Zero_account, // recipient\n  exitPoolRequest\n  )\n// sender & recipient don't matter as we only getting an estimate\n```\n`amountsOut` is a representation of BPT balance in the Balancer Pool's underlying tokens. In the same order as `assets`\n\n5. One of the `amountsOut` is PSP portion of 1 BPT.\n```js\nconst PSP_In_1_BPT = amountsOut[index_from_assets]\n```\n\n6. Multiply PSP_balance by score multiplier.\n```js\nconst Vote_power = PSP_In_1_BPT * BPT_balance * 2.5\n```\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0xcafe001067cdef266afb7eb5a286dcfd277f3de5\",\n  \"symbol\": \"PSP\",\n  \"decimals\": 18,\n  \"sePSP2\": {\n    \"address\": \"0x593F39A4Ba26A9c8ed2128ac95D109E8e403C485\",\n    \"decimals\": 18\n  },\n  \"balancer\": {\n    \"poolId\": \"0xcb0e14e96f2cefa8550ad8e4aea344f211e5061d00020000000000000000011a\",\n    \"BalancerHelpers\": \"0x5aDDCCa35b7A0D07C74063c48700C8590E87864E\",\n    \"Vault\": \"0xBA12222222228d8Ba445958a75a0704d566BF2C8\"\n  },\n  \"multiplier\": 2.5\n}\n```\n"
  },
  "pdn-balances-and-vests": {
    "key": "pdn-balances-and-vests",
    "author": "viganzeqiri",
    "version": "0.1.0",
    "examples": [
      {
        "name": "PDN balances and vests",
        "strategy": {
          "name": "pdn-balances-and-vests",
          "params": {
            "address": "0xdd0d06EC5dB655f76641bdA81Fec3221C167787e",
            "symbol": "PDN",
            "decimals": 18
          }
        },
        "network": "5",
        "addresses": [
          "0xB6097b6932ad88D1159c10bA7D290ba05087507D",
          "0x0a767592E4C4CbD5A65BAc08bd3c7112d68496A5",
          "0x7db3c4099660a6f33bBfF63B3318CBf9b4D07743"
        ],
        "snapshot": 8458274
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. UNI"
              ],
              "maxLength": 16
            },
            "address": {
              "type": "string",
              "title": "Contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ]
            }
          },
          "required": [
            "address",
            "decimals"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# pdn-balances-and-vests\n\n## Calculating Vested Tokens with Balances\n\nTo find out the total number of vested tokens with balances, follow these steps:\n\n1. Invoke the `balanceOf` function for each address to get its token balance.\n2. Use the `getVestLength` function to determine the number of vests held by that address.\n3. Invoke the `getVestMetaData` function to retrieve metadata for each vest, including the amount vested.\n4. Add the amount vested for each vest to the total balance for the corresponding address.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0xdd0d06EC5dB655f76641bdA81Fec3221C167787e\",\n  \"symbol\": \"PDN\",\n  \"decimals\": 18\n}\n```\n"
  },
  "lqty-proxy-stakers": {
    "key": "lqty-proxy-stakers",
    "author": "majkic99",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Lqty proxy stakers",
        "strategy": {
          "name": "lqty-proxy-stakers",
          "params": {
            "proxyRegistryAddr": "0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4",
            "lqtyStakingAddr": "0x4f9Fbb3f1E99B56e0Fe2892e623Ed36A76Fc605d"
          }
        },
        "network": "1",
        "addresses": [
          "0x352c7DCcA6dD89A75efCBebc77BCF8Efb2128248",
          "0x554Fe9292Cd2E2b9469E19e814842C060312FF00",
          "0x39e99d18634E63Df7867287E3059F39b6C6f428d"
        ],
        "snapshot": 16718874
      }
    ],
    "schema": null,
    "about": "# lqty-proxy-stakers\n\nThis is a strategy that returns how much LQTY a user is staking via his DSProxy\n\n"
  },
  "rdnt-capital-voting": {
    "key": "rdnt-capital-voting",
    "author": "JD0x2e",
    "version": "0.1.0",
    "examples": [
      {
        "name": "RDNT in dLP - Arbitrum",
        "strategy": {
          "name": "rdnt-capital-voting",
          "params": {
            "rdnt": "0x3082cc23568ea640225c2467653db90e9250aaa0",
            "lpToken": "0x32DF62DC3AED2CD6224193052CE665DC18165841",
            "lockingContract": "0x76ba3eC5f5adBf1C58c91e86502232317EeA72dE",
            "balancerPoolId": "0x32df62dc3aed2cd6224193052ce665dc181658410002000000000000000003bd",
            "balancerVault": "0xBA12222222228d8Ba445958a75a0704d566BF2C8"
          }
        },
        "network": "42161",
        "addresses": [
          "0x2eAA7327e9B5Ff46bc2B7452acE9e44A1528eb84",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e"
        ],
        "snapshot": 75307012
      },
      {
        "name": "RDNT in dLP - BSC",
        "strategy": {
          "name": "rdnt-capital-voting",
          "params": {
            "rdnt": "0xf7DE7E8A6bd59ED41a4b5fe50278b3B7f31384dF",
            "lpToken": "0x346575fc7f07e6994d76199e41d13dc1575322e1",
            "lockingContract": "0x4FD9F7C5ca0829A656561486baDA018505dfcB5E"
          }
        },
        "network": "56",
        "addresses": [
          "0x2b4516253e984b30804356cB5be476ccfB45fa49",
          "0x31d64d45dE2c5b0742635da913FCD587BBCd4C5A",
          "0x2eAA7327e9B5Ff46bc2B7452acE9e44A1528eb84"
        ],
        "snapshot": 26920121
      },
      {
        "name": "RDNT in dLP - Mainnet",
        "strategy": {
          "name": "rdnt-capital-voting",
          "params": {
            "rdnt": "0x137dDB47Ee24EaA998a535Ab00378d6BFa84F893",
            "lpToken": "0xcF7b51ce5755513d4bE016b0e28D6EDEffa1d52a",
            "lockingContract": "0x28E395a54a64284DBA39652921Cd99924f4e3797",
            "balancerPoolId": "0xcf7b51ce5755513d4be016b0e28d6edeffa1d52a000200000000000000000617",
            "balancerVault": "0xBA12222222228d8Ba445958a75a0704d566BF2C8"
          }
        },
        "network": "1",
        "addresses": [
          "0x2eAA7327e9B5Ff46bc2B7452acE9e44A1528eb84",
          "0x8EDdC30B12A5Cc60d046fc1B1b887eb2c1353a87",
          "0x4011091Dbe57bd4521F598616fe4BB3978ea3005"
        ],
        "snapshot": 18483999
      }
    ],
    "schema": null,
    "about": "This strategy returns the total dLP of a user\n\nHere is an example of parameters:\n\n{\n        \"rdnt\": \"0x3082cc23568ea640225c2467653db90e9250aaa0\",\n        \"lpToken\": \"0x32DF62DC3AED2CD6224193052CE665DC18165841\",\n        \"lockingContract\": \"0x76ba3eC5f5adBf1C58c91e86502232317EeA72dE\",\n        \"balancerPoolId\": \"0x32df62dc3aed2cd6224193052ce665dc181658410002000000000000000003bd\",\n        \"balancerVault\": \"0xBA12222222228d8Ba445958a75a0704d566BF2C8\"\n      }\n"
  },
  "staked-defi-balance": {
    "key": "staked-defi-balance",
    "author": "taha-abbasi",
    "version": "1.3.0",
    "examples": [
      {
        "name": "Staked Defi Balance",
        "strategy": {
          "name": "staked-defi-balance",
          "params": {
            "minStakedBalance": "300000",
            "contracts": [
              {
                "tokenContractAddress": "0xaf329a957653675613D0D98f49fc93326AeB36Fc",
                "symbol": "cFRM",
                "decimals": 18,
                "stakingPoolContractAddress": "0x35e15ff9ebb37d8c7a413fd85bad515396dc8008",
                "stakingType": "open"
              }
            ]
          }
        },
        "network": "56",
        "addresses": [
          "0x4c4180bf5ec78af9025bdd935ed69e29c2f6cbae",
          "0x5785530b6f0ea72b0dba474d55b43e1af1182cad",
          "0x468b83D6c8941115E9c61385aff8b71ADD5B8cE8",
          "0xdd4ebebe197ca16dc2042414e3b243ab265b0d9a",
          "0x697e8e42a50d9a759a238baab25919b177defb89",
          "0x6479f7157f06e6610174b1029388B8D4193c00A0"
        ],
        "snapshot": 27877333
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Staked Defi Balance",
      "type": "object",
      "properties": {
        "minStakedBalance": {
          "type": "string"
        },
        "contracts": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "tokenContractAddress": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$"
              },
              "symbol": {
                "type": "string"
              },
              "decimals": {
                "type": "integer"
              },
              "stakingPoolContractAddress": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$"
              },
              "stakingType": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "standard"
                    ]
                  },
                  {
                    "type": "string",
                    "enum": [
                      "open"
                    ]
                  }
                ]
              }
            },
            "required": [
              "tokenContractAddress",
              "symbol",
              "decimals",
              "stakingPoolContractAddress",
              "stakingType"
            ]
          }
        }
      },
      "required": [
        "minStakedBalance",
        "contracts"
      ]
    },
    "about": "staked-defi-balance\n===================\n\nThis custom strategy returns the score of addresses based on their staked token balance in a specific staking pool contract. It works with staking contracts built and deployed by Ferrum Network. You can use this strategy to track the cumulative balance of staking contracts deployed on multiple EVM chains by adding it to your space multiple times with the network and contract configuration.\n\nHere is an example of parameters:\n\n```json\n\n{\n  \"minStakedBalance\": \"1\",\n  \"contracts\": [\n    {\n      \"tokenContractAddress\": \"0xaf329a957653675613D0D98f49fc93326AeB36Fc\",\n      \"symbol\": \"cFRM\",\n      \"decimals\": 18,\n      \"stakingPoolContractAddress\": \"0x35e15ff9ebb37d8c7a413fd85bad515396dc8008\",\n      \"stakingType\": \"open\"\n    }\n  ]\n}\n```\n\nParameters\n----------\n\n-   `minStakedBalance`: The minimum staked balance required for a user to be included in the score calculation. The value should be in wei.\n-   `contracts`: An array of contract configurations where each configuration contains:\n    -   `tokenContractAddress`: The address of the token contract for the staked token.\n    -   `symbol`: The symbol of the staked token.\n    -   `decimals`: The number of decimals for the staked token.\n    -   `stakingPoolContractAddress`: The address of the staking pool contract.\n    -   `stakingType`: The type of staking pool contract. Supported values are \"open\" and \"standard\".\n\nExamples\n--------\n\nTo use this strategy in your Snapshot configuration, you can refer to the following example:\n\n<img width=\"1036\" alt=\"image\" src=\"https://github.com/taha-abbasi/snapshot-strategies/assets/11986835/0c5598e4-5071-4134-b6dd-4dfcf708642a\">\n"
  },
  "degenzoo-erc721-animals-weighted": {
    "key": "degenzoo-erc721-animals-weighted",
    "author": "aorfevre",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "degenzoo-erc721-animals-weighted",
          "params": {
            "address": "0x6defa7058d517f2dada60d79b7e26ab8a1219aca",
            "symbol": "NFT"
          }
        },
        "network": "56",
        "addresses": [
          "0x91646c2c2fF05C4e9822740b0aD9d8B3DA51382b",
          "0xb9cc4a34BaA26D27363eE224CD652a6eBc59b49b",
          "0x7219Fc75f990d0147F51960c8E4Dc868c6f3670C"
        ],
        "snapshot": 27121184
      }
    ],
    "schema": null,
    "about": "# degenzoo-erc721-animals-weighted\n\nThis strategy allows you to determine the voting power by reading the metadata attribute of holding NFT.\n`tokenURI(tokenID)` returns the individual metadata URI in ERC721.\n\nEach animal has it's own \"Staked Tokens\" attribute. \n\nThe voting power is the sum of all Staked tokens of each Zoo owner. \n\n\nExample: \n\n```tokenURI(36)\n[\n  {\n      \"0x91646c2c2fF05C4e9822740b0aD9d8B3DA51382b-36\": \"data:application/json;base64,eyJuYW1lIjogIkRlZ2VuWm9vICM2NDAxIiwgImRlc2NyaXB0aW9uIjogIkRlZ2Vuem9vICM2NDAxIGlzIHN0aWxsIGFuIGVnZy4uLiB3aHkgbm90IGhhdGNoIGl0PyIsICJpbWFnZSI6ICJpcGZzOi8vYmFmeWJlaWNqaXltb3VneHVqczJmenN4anVrbTdlNjU0eXRlcjRhb2hkcDc0ZWJvbXhjZDN5dnJzcWEvZWdnLnBuZyIsImF0dHJpYnV0ZXMiOiBbeyJ0cmFpdF90eXBlIjogIkxldmVsIiwgInZhbHVlIjogIjAifSwgeyJ0cmFpdF90eXBlIjogIlJhcml0eSIsICJ2YWx1ZSI6ICIwIn1dfQ==\",\n  }\n]\n```\n\nThis data are encoded onchain and decoding them is providing the metadata attribute of each animal. The 'Staked Tokens' value is used to calculate the weight of each user\n\n``` example metadata of an animal \n[\n      { trait_type: 'Rank', value: '42' },\n      { trait_type: 'Rarity', value: 'Endangered' },\n      { trait_type: 'Shininess', value: 'false' },\n      { trait_type: 'Variant', value: '2' },\n      { trait_type: 'Multiplier', value: '12012' },\n      { trait_type: 'Staked Tokens', value: '12012' },\n      { trait_type: 'Level', value: '1' },\n      { trait_type: 'Evolve Time', value: '1987200' },\n      { trait_type: 'Hatch Timestamp', value: '1680706434' }\n    ]\n\n```"
  },
  "zunami-pool-gauge-aggregated-balance-of": {
    "key": "zunami-pool-gauge-aggregated-balance-of",
    "author": "fextr",
    "version": "1.0.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "zunami-pool-gauge-aggregated-balance-of",
          "params": {
            "address": "0x0AD930970b60d24bd30F612D287f188A7626B147",
            "fraxStakingAddress": "0xb8ebc210BCF78be8Ef3F09Dd0d8e85Fa5e252e86",
            "decimals": 18,
            "lpPriceDecimals": 18,
            "curvePoolAddress": "0x68934F60758243eafAf4D2cFeD27BF8010bede3a",
            "blackListAddresses": [
              "0xBdCA4F610e7101Cc172E2135ba025737B99AbD30",
              "0xbc61f6973cE564eFFB16Cd79B5BC3916eaD592E2",
              "0x989AEb4d175e16225E39E87d0D97A3360524AD80"
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0xF9605D8c4c987d7Cb32D0d11FbCb8EeeB1B22D5d",
          "0x1c012C98676eAFB6C1D4886a543c4fFf50a43FE0",
          "0x5180db0237291A6449DdA9ed33aD90a38787621c",
          "0x924402163f01cCA1b161A3188d3f32601843Ae4A",
          "0xa6dC407C39bd07F6D6C3780C2F5a53e690387F4a",
          "0x287CDD0A59d69E9F101E90BDBCC892607DF08CF9",
          "0x2d34816C3c83554CE97144c623C381b303Aba732",
          "0x6De72e5568CfbB9d0fb91Fb384D2E52d7e5C1E94",
          "0xBdCA4F610e7101Cc172E2135ba025737B99AbD30",
          "0xbc61f6973cE564eFFB16Cd79B5BC3916eaD592E2",
          "0x989AEb4d175e16225E39E87d0D97A3360524AD80"
        ],
        "snapshot": 17330743
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "zunami-pool-gauge-aggregated-balance-of",
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "title": "Snapshot helper address",
              "examples": [
                "e.g. 0x0AD930970b60d24bd30F612D287f188A7626B147"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "fraxStakingAddress": {
              "type": "string",
              "title": "Zunami convex frax staking address",
              "examples": [
                "e.g. 0xb8ebc210BCF78be8Ef3F09Dd0d8e85Fa5e252e86"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ],
              "minimum": 1
            },
            "curvePoolAddress": {
              "type": "string",
              "title": "Curve pool address",
              "examples": [
                "e.g. 0x68934F60758243eafAf4D2cFeD27BF8010bede3a"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "lpPriceDecimals": {
              "type": "number",
              "title": "Curve lp price decimals",
              "examples": [
                "e.g. 18"
              ],
              "minimum": 1
            },
            "blackListAddresses": {
              "type": "array",
              "title": "Black listed addresses",
              "examples": [
                "0xBdCA4F610e7101Cc172E2135ba025737B99AbD30",
                "0xbc61f6973cE564eFFB16Cd79B5BC3916eaD592E2"
              ],
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "minLength": 42,
                "maxLength": 42
              }
            }
          },
          "required": [
            "address",
            "decimals",
            "curvePoolAddress",
            "lpPriceDecimals",
            "blackListAddresses"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# zunami-pool-gauge-aggregated-balance-of\n\nCollect aggregated balance from curve pool/gauges\n"
  },
  "erc721-collateral-held": {
    "key": "erc721-collateral-held",
    "author": "publu",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc721-collateral-held",
          "params": {
            "address": "0x950eceee9e7d7366a24fc9d2ed4c0c37d17a0fa9",
            "symbol": "AAMVT"
          }
        },
        "network": "42161",
        "addresses": [
          "0x20798fd64a342d1ee640348e42c14181fdc842d8",
          "0x985a29e88e75394dbdae41a269409f701ccf6a43",
          "0x825c657e9e72c04b7dc1e92b947f2fa33d1127fb",
          "0x14ccd6fb7c6d5693969f38c8ef5c08d77d260ce4"
        ],
        "snapshot": 84179668
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. UNI"
              ],
              "maxLength": 16
            },
            "address": {
              "type": "string",
              "title": "Contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            }
          },
          "required": [
            "address"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# erc721-collateralHeld\n\nThis strategy returns the total collateral held by voters in ERC721 vaults. It takes into account the ERC721 tokens owned by each voter and then calculates the sum of the collateral held in the associated vaults.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0xc76a3cbefe490ae4450b2fcc2c38666aa99f7aa0\",\n  \"symbol\": \"WEAMVT\"\n}\n```\n"
  },
  "starlay-ve-balance-of-locker-id": {
    "key": "starlay-ve-balance-of-locker-id",
    "author": "wolfwarrier14",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "starlay-ve-balance-of-locker-id",
          "params": {
            "address": "0xDf32D28c1BdF25c457E82797316d623C2fcB29C8",
            "symbol": "veLAY",
            "decimals": 18
          }
        },
        "network": "592",
        "addresses": [
          "0x3Ff1aD046Cf6B5F5fC035b909e0E4482186b8354",
          "0x50414Ac6431279824df9968855181474c919a94B",
          "0x00aa74a272603c502503b1F470F81F4D441A6413",
          "0xa9Fc75f34c338f658bC0BeAA57f14D675301185f",
          "0xCdfc500F7f0FCe1278aECb0340b523cD55b3EBbb",
          "0x8114c31Cd93141DD6229553F622b85b06624957e",
          "0xCB163C7A7D299c54F71144D02870eC0c9A82AB29",
          "0x61709f32808EBCD44b0D7c9271a4A16D167A7AC4",
          "0x145a89758F3f9e26ffb96a4eD853d4fEDfa3a87B",
          "0x1b40f4f72618530cA1e560b201F0a608C736E43e",
          "0x02E7b714fae84e4BA80f3CDa5508553e7CF5042A",
          "0xb3ff54b7F24950945bA8f1778F52835a7aD30A7F",
          "0x0Ba1Aa8e98257EFb07cCa9bDCC410a38056897d1",
          "0x244C76c039Cc412826F9e4427Ce600DcFC013a6c",
          "0x332d9CDf9fDA07C32622B9C7eDE52Eb1a851eC53",
          "0x7457667ee63BCa3c134f246af687091e7E259Bc2",
          "0xab4382aAdae5bF4b37B90b9dc07FC72D52e2a28A",
          "0x94c74DFA070500E317DddE4d64007FE26ae8aB9A"
        ],
        "snapshot": 3642724
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. UNI"
              ],
              "maxLength": 16
            },
            "address": {
              "type": "string",
              "title": "Contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ]
            }
          },
          "required": [
            "address",
            "decimals"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# starlay-ve-balance-of-locker-id\n\nThis is the strategy for starlay's Voting Escrow, it returns the balances of the voters for veLAY token.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0xDf32D28c1BdF25c457E82797316d623C2fcB29C8\",\n  \"symbol\": \"veLAY\",\n  \"decimals\": 18\n}\n```\n"
  },
  "winr-staking": {
    "key": "winr-staking",
    "author": "flushjb",
    "version": "0.1.0",
    "examples": [
      {
        "name": "WINR Staking",
        "strategy": {
          "name": "winr-staking",
          "params": {
            "address": "0xddAEcf4B02A3e45b96FC2d7339c997E072b0d034"
          }
        },
        "network": "42161",
        "addresses": [
          "0x954B6dE2E9C58B0ca7B21e9A048fD0A6CEa6f92C",
          "0x40Db8365d1252bcb06598927698238a99D39228E",
          "0xd2f5b5fECc86b02F1A77823fb96a7052C62571D1",
          "0xc0d4499A3E452bEd3CE794c2360916452bFbf6A5",
          "0x9dC2aEa18955DD9F898d7ef130e4e166B9800354",
          "0x3EC3486f491f16B7A325F15380090eD1A9Dc79D6",
          "0x52caB1b95fb1049c76ED0f72c27B37D1B63F4691",
          "0x6035507146b6B5B96e3Fe5A093c83714f27898ED"
        ],
        "snapshot": 95804680
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "title": "WINR Staking Contract address",
              "examples": [
                "e.g. 0xddAEcf4B02A3e45b96FC2d7339c997E072b0d034"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            }
          },
          "required": [
            "address"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# Winr Governance Staking Strategy\n\n## Overview\n\nThis strategy is used for Winr governance staking. It allows users that staked WINR and vWINR to vote on proposals by delegating their voting power to a delegatee.\n\n## Parameters\n\n- `address`: Address of the staking contract\n\n## Example\n\n```json\n{\n  \"name\": \"winr-staking\",\n  \"params\": {\n    \"address\": \"0xddAEcf4B02A3e45b96FC2d7339c997E072b0d034\"\n  }\n}\n```\n"
  },
  "spaceid": {
    "key": "spaceid",
    "author": "SID-Marcus",
    "version": "0.0.1",
    "examples": [
      {
        "name": "spaceid query on ethers",
        "strategy": {
          "name": "spaceid",
          "params": {}
        },
        "network": "56",
        "addresses": [
          "0xad3d542ACD90A3492B41AF49399BAeb755A11e59",
          "0xb2C2325B93b1a3C882fe47C453622f1D75801D72",
          "0x5d8CeEDdf7881f962a9354Ab5c187655fC3dec3F"
        ],
        "snapshot": 28831785
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "SPACEID",
          "type": "object",
          "properties": {},
          "required": [],
          "additionalProperties": false
        }
      }
    },
    "about": "This is SPACEID strategy, it returns the voting power of the voters."
  },
  "delegate-registry-v2": {
    "key": "delegate-registry-v2",
    "author": "gnosis",
    "version": "0.0.2",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "delegate-registry-v2",
          "params": {
            "backendUrl": "https://delegate-registry-backend.vercel.app",
            "delegationV1VChainIds": [
              1,
              100
            ],
            "strategies": [
              {
                "name": "erc20-balance-of",
                "params": {
                  "symbol": "ST",
                  "address": "0xE666Ad68a6e2897CD06A9ff378ED8b0d71093398",
                  "network": "5",
                  "decimals": 18
                },
                "network": "5"
              },
              {
                "name": "erc20-balance-of",
                "params": {
                  "address": "0x6b175474e89094c44da98b954eedeac495271d0f",
                  "symbol": "DAI",
                  "decimals": 18
                }
              }
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x2011c83e8f75c0ceb90ec140d8e8adfc836e3685",
          "0xde1e6a7ed0ad3f61d531a8a78e83ccddbd6e0c49",
          "0x007de57773b6eb4ebbf6a740dfde1efdd5629630",
          "0x6cc5b30cd0a93c1f85c7868f5f2620ab8c458190",
          "0xd028d504316fec029cfa36bdc3a8f053f6e5a6e4",
          "0x000e37ed92d86a7667f520c53b73b01ff5c206eb",
          "0x000dbf2733da51135c1b21c8ef71a3d474383f0d",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C",
          "0x1c7a9275F2BD5a260A9c31069F77d53473b8ae2e",
          "0x1d5E65a087eBc3d03a294412E46CE5D6882969f4",
          "0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11",
          "0xeF8305E140ac520225DAf050e2f71d5fBcC543e7",
          "0x1E1A51E25f2816335cA436D65e9Af7694BE232ad"
        ],
        "snapshot": 18478898
      }
    ],
    "schema": null,
    "about": "# Delegate Registry v2\n\nA general-purpose delegate registry.\n\nIn order to utilize this, the 'Strategy Zero Gated' validation strategy is necessary. This is to prevent the delegator from also using the votes that have been delegated.\n\nThis strategy:\n\n- returns a score of 0 for addresses that are delegating to other addresses (PS: addresses that return a score of 0 should not be allowed to vote),\n- returns a score greater than 0 for addresses that are delegated to and are not delegating (PS: only the amount delegated to the address is returned; this needs to be merged with the scores from other strategies in the space to get the addresses total score),\n- returns nothing for addresses that are not delegating to other addresses or delegated to.\n"
  },
  "hats-protocol-single-vote-per-org": {
    "key": "hats-protocol-single-vote-per-org",
    "author": "hotmanics",
    "version": "0.1.2",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "hats-protocol-single-vote-per-org",
          "params": {
            "address": "0x3bc1A0Ad72417f2d411118085256fC53CBdDd137",
            "humanReadableTreeId": 44
          }
        },
        "network": "5",
        "addresses": [
          "0xc4f6578c24c599F195c0758aD3D4861758d703A3",
          "0xa6aF0566EF4eF7E8f38913f69d4e55c06F00A5aC",
          "0x00e7332F9Cd4C05a0645AC959Fb1Be60ec24F94f",
          "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
        ],
        "snapshot": 9418504
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "title": "Contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "humanReadableTreeId": {
              "type": "number",
              "title": "Human Readable Tree Id",
              "examples": [
                "e.g. 2, 221"
              ]
            }
          },
          "required": [
            "address",
            "humanReadableTreeId"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# hsts-protocol-single-vote-per-org\n\nA strategy to get a single voting power based on checking to see if the addresses own at least one hat within a tree.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0x3bc1A0Ad72417f2d411118085256fC53CBdDd137\",\n  \"humanReadableTreeId\": 44\n}\n```\n"
  },
  "karma-discord-roles": {
    "key": "karma-discord-roles",
    "author": "show-karma",
    "version": "1.0.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "karma-discord-roles",
          "params": {
            "name": "apecoin",
            "roles": [
              "Assembly"
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x10cCD4136471c7c266a9Fc4569622989Fb4caB99",
          "0x1aD7C3d3AC2118335D5437e46BBdCcf69D1f1a4f",
          "0x7B124228eC8e9C9C9ddC3278bb0ee4a6dAa5dDee"
        ],
        "snapshot": 17829912
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "DAO Name",
              "examples": [
                "e.g. apecoin, ens, gitcoin"
              ]
            },
            "roles": {
              "type": "array",
              "title": "Discord Roles",
              "examples": [
                "e.g. Assembly, Trader, Moderator"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "name",
            "roles"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# karma-discord-roles\n\n**Karma Discord role strategy can be used by DAOs to provide voting power to contributors with a specific role on Discord.**\n\n## Prerequisites\n\nBelow are the prerequisites to enable this strategy for your Snapshot space.\n\n1. For this strategy to work, the DAO needs to be set up in Karma's platform. Send us an email at dao@karmahq.xyz for onboarding on to Karma.\n\n2. Have Karma Discord Bot installed in your Discord server. You can install the bot through the following link: (https://discord.com/api/oauth2/authorize?client_id=986699463164846100&permissions=1101927561248&scope=bot%20applications.commands).\n\n## Usage\n\njson\n{\n\"name\": <daoName>,\n\"roles\": [<list of discord roles>]\n}\n\n**Example 1**\njson\n{\n\"name\": \"Karma\",\n\"roles\": [\"Moderator\"]\n}\n\nThis will assign voting power of 1 to anyone in Karma's discord server who has \"Moderator\" role assigned to them. \n\n**Example 2**\njson\n{\n\"name\": \"Karma\",\n\"roles\": [\"Moderator\"],\n\"addresses\": [\n\"0xa768f5F340e89698465Fc7C12F31cB485fAf98B2\"\n]\n}\nThis will assign voting power of 1 to anyone in Karma's discord server who has \"Moderator\" role assigned to them. It will also assign voting power to any address in \"addresses\" list.\n\nIf you have trouble setting up the strategy, please email us at dao@karmahq.xyz.\n"
  },
  "seedify-cumulative-voting-power-hodl-staking-farming": {
    "key": "seedify-cumulative-voting-power-hodl-staking-farming",
    "author": "theo6890",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Seedify: SFUND Cumulative Voting Power (hodl, farming & staking)",
        "strategy": {
          "name": "seedify-cumulative-voting-power-hodl-staking-farming",
          "params": {
            "sfundAddress": "0x477bC8d23c634C154061869478bce96BE6045D12",
            "symbol": "SFUND",
            "decimals": 18,
            "lpAddress_SFUND_BNB": "0x74fA517715C4ec65EF01d55ad5335f90dce7CC87",
            "farmingAddress_SFUND_BNB": "0x71d058369D39a8488D8e9F5FD5B050610ca788C0",
            "lpAddress_SNFTS_SFUND": "0xe4399d0c968fBc3f5449525146ea98B0dC7Fc203",
            "farmingAddress_SNFTS_SFUND": "0x19ee35c5B2CcaBaAE367B6f99b2f5747E6a6C0d0",
            "sfundStakingAddresses": [
              "0x60b9F788F4436f0B5c33785b3499b2ee1D8dbFd4",
              "0x89aaaB217272C89dA91825D9Effbe65dEd384859"
            ],
            "legacySfundStakingAddresses": [
              "0xb667c499b88AC66899E54e27Ad830d423d9Fba69"
            ]
          }
        },
        "network": "56",
        "addresses": [
          "0x756ea9Ae4866B962326d588CdF39d558e671dF61",
          "0x000F06844e849E39E9661cAd08Bf39e1E762f99D",
          "0xf6320ae5459332C2dCDE9abB8F1708232D7Bed3E",
          "0x043a0199506E671Ed03e883e64288E5cf003EF93"
        ],
        "snapshot": 30042368
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "seedify-cumulative-voting-power-hodl-staking-farming",
          "type": "object",
          "properties": {
            "sfundAddress": {
              "type": "string",
              "title": "SFUND address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. UNI"
              ],
              "maxLength": 16
            },
            "lpAddress_SFUND_BNB": {
              "type": "string",
              "title": "LP address of SFUND-BNB pool",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "farmingAddress_SFUND_BNB": {
              "type": "string",
              "title": "Farming address of SFUND-BNB LP token",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "legacyfarmingAddress_SFUND_BNB": {
              "type": "string",
              "title": "Farming address of SFUND-BNB LP token (legacy)",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "lpAddress_SNFTS_SFUND": {
              "type": "string",
              "title": "LP address of SNFTS-SFUND pool",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "farmingAddress_SNFTS_SFUND": {
              "type": "string",
              "title": "Farming address of SNFTS-SFUND LP token",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "sfundStakingAddresses": {
              "type": "array",
              "title": "SFUND staking addresses",
              "items": {
                "type": "string",
                "title": "SFUND staking address",
                "examples": [
                  "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
                ],
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "minLength": 42,
                "maxLength": 42
              }
            },
            "sfundStakingAddressesLegacy": {
              "type": "array",
              "title": "SFUND staking addresses (legacy)",
              "items": {
                "type": "string",
                "title": "SFUND staking address (legacy)",
                "examples": [
                  "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
                ],
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "minLength": 42,
                "maxLength": 42
              }
            }
          },
          "required": [
            "sfundAddress",
            "decimals",
            "lpAddress_SFUND_BNB",
            "farmingAddress_SFUND_BNB",
            "lpAddress_SNFTS_SFUND",
            "farmingAddress_SNFTS_SFUND",
            "sfundStakingAddresses",
            "legacySfundStakingAddresses"
          ],
          "additionalProperties": true
        }
      }
    },
    "about": "# seedify-cumulative-voting-power-hodl-staking-farming\n\nStrategy which calculates SFUND Cumulative Voting Power (hodl, farming & staking):\n\n- SFUND (raw balance)\n- Farming\n  - SFUND-BNB farming:\n    - LP_CONTRACT_SFUND_BNB = 0x74fA517715C4ec65EF01d55ad5335f90dce7CC87\n    - SFUND_FARM_CONTRACT_LEGACY = 0x1F10564BAD9367CfF4247A138eBbA9a9aaeb789E\n    - SFUND_FARM_CONTRACT_NEW = 0x71d058369D39a8488D8e9F5FD5B050610ca788C0\n  - SFUND-SNFTS farming (only calculates SFUND amount):\n    - LP_CONTRACT_SNFTS_SFUND = 0xe4399d0c968fBc3f5449525146ea98B0dC7Fc203\n    - SNFTS_FARM_CONTRACT = 0x19ee35c5B2CcaBaAE367B6f99b2f5747E6a6C0d0\n- Staking:\n  - SFUND_STAKE_CONTRACT_7_DAYS_LEGACY = 0xb667c499b88AC66899E54e27Ad830d423d9Fba69\n  - SFUND_STAKE_CONTRACT_14_DAYS_LEGACY = 0x027fC3A49383D0E7Bd6b81ef6C7512aFD7d22a9e\n  - SFUND_STAKE_CONTRACT_30_DAYS_LEGACY = 0x8900475BF7ed42eFcAcf9AE8CfC24Aa96098f776\n  - SFUND_STAKE_CONTRACT_60_DAYS_LEGACY = 0x66b8c1f8DE0574e68366E8c4e47d0C8883A6Ad0b\n  - SFUND_STAKE_CONTRACT_90_DAYS_LEGACY = 0x5745b7E077a76bE7Ba37208ff71d843347441576\n  - SFUND_STAKE_CONTRACT_180_DAYS_LEGACY = 0xf420F0951F0F50f50C741f6269a4816985670054\n  - SFUND_STAKE_CONTRACT_30_DAYS_NEW = 0x60b9F788F4436f0B5c33785b3499b2ee1D8dbFd4\n  - SFUND_STAKE_CONTRACT_90_DAYS_NEW = 0x5b384955ac3460c996402Bf03736624A33e55273\n  - SFUND_STAKE_CONTRACT_180_DAYS_NEW = 0xd01650999BB5740F9bb41168401e9664B28FF47f\n  - SFUND_STAKE_CONTRACT_270_DAYS_NEW = 0x89aaaB217272C89dA91825D9Effbe65dEd384859\n\nHere is an example of parameters that can be usde in `examples.json`:\n\n```json\n{\n  \"sfundAddress\": \"0x477bC8d23c634C154061869478bce96BE6045D12\",\n  \"symbol\": \"SFUND\",\n  \"decimals\": 18\n  // Calculate SFUND from staked LP tokens use:\n  \"lpAddress_SFUND_BNB\": \"0x74fA517715C4ec65EF01d55ad5335f90dce7CC87\",\n  \"farmingAddress_SFUND_BNB\": \"0x71d058369D39a8488D8e9F5FD5B050610ca788C0\",\n  \"legacyfarmingAddress_SFUND_BNB\": \"0x1f10564bad9367cff4247a138ebba9a9aaeb789e\",\n  \"lpAddress_SNFTS_SFUND\": \"0xe4399d0c968fBc3f5449525146ea98B0dC7Fc203\",\n  \"farmingAddress_SNFTS_SFUND\": \"0x19ee35c5B2CcaBaAE367B6f99b2f5747E6a6C0d0\",\n  // Calculate SFUND staked in ALL staking contracts use:\n  \"sfundStakingAddresses\": [\n    \"0x60b9F788F4436f0B5c33785b3499b2ee1D8dbFd4\",\n    ...\n  ],\n  \"legacySfundStakingAddresses\": [\n    \"0xb667c499b88AC66899E54e27Ad830d423d9Fba69\",\n    ...\n  ]\n}\n```\n\nAll fields above are required except `legacyfarmingAddress_SFUND_BNB`.\n\nRun tests: `yarn test --strategy=seedify-cumulative-voting-power-hodl-staking-farming`\n\nTests fails with current data in `examples.json` as wallet addresses do not hold any funds in `legacyfarmingAddress_SFUND_BNB` anymore. To prevent tests from failing them comment calculation for `legacyfarmingAddress_SFUND_BNB`.\n\n```\n\"addresses\": [\n  \"0x756ea9Ae4866B962326d588CdF39d558e671dF61\", // 30, 90 days sataking & SFUND-BNB farming\n  \"0x000F06844e849E39E9661cAd08Bf39e1E762f99D\", // 270 days & SFUND-BNB + SNFTS-SFUND farming\n  \"0xf6320ae5459332C2dCDE9abB8F1708232D7Bed3E\", // hodl\n  \"0x043a0199506E671Ed03e883e64288E5cf003EF93\" // 7 staking legacy\n]\n```\n"
  },
  "staked-morekudasai": {
    "key": "staked-morekudasai",
    "author": "otomarukanta",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "staked-morekudasai",
          "params": {
            "address": "0x954521ba40a377f5433cb9a6d2b7ee7660be487a",
            "symbol": "stMK",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x04CD9cC35601bb748cBC98B549545F44068cDDeB",
          "0x76aa21a8Baef91B5c031A03E951f530E7F9489d3",
          "0xbA1DD0D124231E6e059ff2f08A50af100C51679b",
          "0x1F717Ce8ff07597ee7c408b5623dF40AaAf1787C"
        ],
        "snapshot": 17683972
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. UNI"
              ],
              "maxLength": 16
            },
            "address": {
              "type": "string",
              "title": "Contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ]
            }
          },
          "required": [
            "address",
            "decimals"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# staked-morekudasai \n\nThis strategy is used for KudasaiJP governance. It allows users to vote with vote power based on staking duration.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0x954521ba40a377f5433cb9a6d2b7ee7660be487a\",\n  \"symbol\": \"stMK\",\n  \"decimals\": 18\n}\n```\n"
  },
  "sablier-v1-deposit": {
    "key": "sablier-v1-deposit",
    "author": "sablier-labs",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query 0",
        "strategy": {
          "name": "sablier-v1-deposit",
          "params": {
            "sender": "0xcCe2CbDcD0eee72984c58A84678F0D49a95257ae",
            "token": "0x97cb342Cf2F6EcF48c1285Fb8668f5a4237BF862"
          }
        },
        "network": "5",
        "addresses": [
          "0x06255FA39EBD18796eCCCc17DB8153Ef58DBA0a8",
          "0xf976aF93B0A5A9F55A7f285a3B5355B8575Eb5bc",
          "0x5bCAc9fC8827231839c5861b719e0cAE57da3CfB"
        ],
        "snapshot": 9515850
      },
      {
        "name": "Example query 1",
        "strategy": {
          "name": "sablier-v1-deposit",
          "params": {
            "sender": "0xcCe2CbDcD0eee72984c58A84678F0D49a95257ae",
            "token": "0x97cb342Cf2F6EcF48c1285Fb8668f5a4237BF862"
          }
        },
        "network": "5",
        "addresses": [
          "0x06255FA39EBD18796eCCCc17DB8153Ef58DBA0a8",
          "0xf976aF93B0A5A9F55A7f285a3B5355B8575Eb5bc",
          "0x5bCAc9fC8827231839c5861b719e0cAE57da3CfB"
        ],
        "snapshot": 9515900
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "sender": {
              "type": "string",
              "title": "Sender address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "token": {
              "type": "string",
              "title": "ERC20 token address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            }
          },
          "required": [
            "sender",
            "token"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# Deposit in Sablier Stream\n\nIn Sablier V1, a stream creator locks up an amount of ERC-20 tokens in a contract that progressively allocates the funds to the designated\nrecipient. The tokens are released by the second, and the recipient can withdraw them at any time.\n\nThis strategy returns the score for any voter as the sum of all deposits made by a sender towards the voters for a specific ERC20 token.\n\nHere is an example of parameters:\n\n```json\n{\n  \"sender\": \"0xC9F2D9adfa6C24ce0D5a999F2BA3c6b06E36F75E\",\n  \"token\": \"0x7f8F6E42C169B294A384F5667c303fd8Eedb3CF3\"\n}\n```\n"
  },
  "sablier-v2": {
    "key": "sablier-v2",
    "author": "razgraf",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example query with policy: withdrawable-recipient (recommended)",
        "strategy": {
          "name": "sablier-v2",
          "params": {
            "address": "0x97cb342cf2f6ecf48c1285fb8668f5a4237bf862",
            "decimals": 18,
            "symbol": "DAI",
            "policy": "withdrawable-recipient"
          }
        },
        "network": "5",
        "addresses": [
          "0x9ad7cad4f10d0c3f875b8a2fd292590490c9f491",
          "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
          "0x506C56B2541eFeCf7A510E9A0c0382cB2FC69051"
        ],
        "snapshot": 9455671
      },
      {
        "name": "Example query with policy: deposited-recipient",
        "strategy": {
          "name": "sablier-v2",
          "params": {
            "address": "0x97cb342cf2f6ecf48c1285fb8668f5a4237bf862",
            "decimals": 18,
            "symbol": "DAI",
            "policy": "deposited-recipient"
          }
        },
        "network": "5",
        "addresses": [
          "0x9ad7cad4f10d0c3f875b8a2fd292590490c9f491",
          "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
          "0x506C56B2541eFeCf7A510E9A0c0382cB2FC69051"
        ],
        "snapshot": 9455671
      },
      {
        "name": "Example query with policy: deposited-sender",
        "strategy": {
          "name": "sablier-v2",
          "params": {
            "address": "0x97cb342cf2f6ecf48c1285fb8668f5a4237bf862",
            "decimals": 18,
            "symbol": "DAI",
            "policy": "deposited-sender"
          }
        },
        "network": "5",
        "addresses": [
          "0x9ad7cad4f10d0c3f875b8a2fd292590490c9f491",
          "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
          "0x506C56B2541eFeCf7A510E9A0c0382cB2FC69051"
        ],
        "snapshot": 9455671
      },
      {
        "name": "Example query with policy: streamed-recipient",
        "strategy": {
          "name": "sablier-v2",
          "params": {
            "address": "0x97cb342cf2f6ecf48c1285fb8668f5a4237bf862",
            "decimals": 18,
            "symbol": "DAI",
            "policy": "streamed-recipient"
          }
        },
        "network": "5",
        "addresses": [
          "0x9ad7cad4f10d0c3f875b8a2fd292590490c9f491",
          "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
          "0x506C56B2541eFeCf7A510E9A0c0382cB2FC69051"
        ],
        "snapshot": 9455671
      },
      {
        "name": "Example query with policy: unstreamed-recipient",
        "strategy": {
          "name": "sablier-v2",
          "params": {
            "address": "0x97cb342cf2f6ecf48c1285fb8668f5a4237bf862",
            "decimals": 18,
            "symbol": "DAI",
            "policy": "unstreamed-recipient"
          }
        },
        "network": "5",
        "addresses": [
          "0x9ad7cad4f10d0c3f875b8a2fd292590490c9f491",
          "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
          "0x506C56B2541eFeCf7A510E9A0c0382cB2FC69051"
        ],
        "snapshot": 9455671
      },
      {
        "name": "Example query with policy: reserved-recipient",
        "strategy": {
          "name": "sablier-v2",
          "params": {
            "address": "0x97cb342cf2f6ecf48c1285fb8668f5a4237bf862",
            "decimals": 18,
            "symbol": "DAI",
            "policy": "reserved-recipient"
          }
        },
        "network": "5",
        "addresses": [
          "0x9ad7cad4f10d0c3f875b8a2fd292590490c9f491",
          "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
          "0x506C56B2541eFeCf7A510E9A0c0382cB2FC69051"
        ],
        "snapshot": 9455671
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Asset Symbol",
              "examples": [
                "e.g. DAI"
              ],
              "maxLength": 16
            },
            "address": {
              "type": "string",
              "title": "Asset Address",
              "examples": [
                "e.g. 0x97cb342cf2f6ecf48c1285fb8668f5a4237bf862"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42
            },
            "decimals": {
              "type": "number",
              "title": "Asset Decimals",
              "examples": [
                "e.g. 18"
              ]
            },
            "policy": {
              "type": "string",
              "title": "Policy",
              "examples": [
                "withdrawable-recipient, reserved-recipient, deposited-recipient, deposited-sender, streamed-recipient or unstreamed-recipient"
              ],
              "pattern": "^((withdrawable-recipient)|(reserved-recipient)|(deposited-recipient)|(deposited-sender)|(streamed-recipient)|(unstreamed-recipient))$"
            }
          },
          "required": [
            "address",
            "decimals",
            "policy"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# Sablier V2 Strategies\n\nIn Sablier V2, the sender of a payment stream first deposits a specific amount of ERC-20 tokens in a contract. Then, the contract\nprogressively allocates the funds to the recipient, who can access them as they become available over time. The payment\nrate is influenced by various factors, including the start and end times, as well as the total amount of tokens\ndeposited.\n\nThe strategies in this folder read the various amounts that can be found in Sablier V2 streams.\n\n## Documentation\n\nIn-depth documentation for how to use the Sablier V2 strategies is available at [docs.sablier.com](https://docs.sablier.com/contracts/v2/guides/snapshot-voting).\n"
  },
  "gelato-staking": {
    "key": "gelato-staking",
    "author": "alxdca",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Gelato Staking",
        "strategy": {
          "name": "gelato-staking",
          "params": {
            "address": "0xc2a813699bF2353380c625e3D6b544dC42963941",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x417B4Adc279743FC49F047C323FC668db9E600D8",
          "0x3D529c760F3EC4c89Bdd6549DDabE9097C1da6e9",
          "0x59eD948390F079F2534C052acc3419d34975E026",
          "0xda81a723E748C782284Bbb06AB74e3D0A9dBBC77",
          "0x2CAd75e380Ddb12329231DF6793A0343917BE8B3",
          "0xeD5cF41b0fD6A3C564c17eE34d9D26Eafc30619b"
        ],
        "snapshot": 17821000
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. UNI"
              ],
              "maxLength": 16
            },
            "address": {
              "type": "string",
              "title": "Contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ]
            }
          },
          "required": [
            "address",
            "decimals"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# Gelato-Staking\n\nStrategy that returns voting power based on GEL stake.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0xc2a813699bF2353380c625e3D6b544dC42963941\",\n  \"decimals\": 18\n}\n```\n"
  },
  "erc4626-assets-of": {
    "key": "erc4626-assets-of",
    "author": "0x-logic",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "erc4626-assets-of",
          "params": {
            "address": "0x44e4c3668552033419520be229cd9df0c35c4417",
            "symbol": "MGN",
            "decimals": 18
          }
        },
        "network": "42161",
        "addresses": [
          "0x65877BE34c0c3C3A317d97028FD91bd261410026",
          "0x86341e73d9Deb4696B1Ae50DBCe8F2D62FA06023",
          "0xb738Ce8df54A6d1035d651D77816ae20AFff3bE6",
          "0x0c9a74a6Fe43341e90Ab436439C361452eEb9c6b",
          "0x72C861B1C98994d54Cc0c6E98B4379203a1905dA"
        ],
        "snapshot": 117490161
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. MGN"
              ],
              "maxLength": 16
            },
            "address": {
              "type": "string",
              "title": "ERC4626 contract address",
              "examples": [
                "e.g. 0x44e4c3668552033419520be229cd9df0c35c4417"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ]
            }
          },
          "required": [
            "address",
            "decimals"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# erc4626-assets-of\n\nReturns the quantity of assets held within a ERC4626 vault by a specific address.\n\nERC4626 has a `balanceOf` function that returns the number of \"shares\" owned by an address. This strategy converts the number of shares to the number of assets by using the vault's `convertToAssets` function.\n\nFor instance, each share might represent ~1.2 underlying asset tokens. We use the ERC4626's internal `convertToAssets` function to convert the number of shares to the number of assets, which represent protocol governance votes.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0x44e4c3668552033419520be229cd9df0c35c4417\",\n  \"symbol\": \"stMGN\",\n  \"decimals\": 18\n}\n```\n"
  },
  "friend-tech": {
    "key": "friend-tech",
    "author": "bonustrack",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "friend-tech",
          "params": {
            "address": "0xe12A2f60B400E6c6971D5602DF454E5dA63eDD78",
            "symbol": "KEYS"
          }
        },
        "network": "8453",
        "addresses": [
          "0x81a9a7979f5EB27588b5AB9448398ad321Dba90C",
          "0x3B7576DF0Ef2d6c1656245aE15Ad52DCf34FD04a",
          "0x7C2FDC7de9F536560E47105257a57C8C8dF79372"
        ],
        "snapshot": 2933820
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "title": "User address",
              "examples": [
                "e.g. 0xe12a2f60b400e6c6971d5602df454e5da63edd78"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. KEYS"
              ],
              "maxLength": 16
            }
          },
          "required": [
            "address"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# friend-tech\n\nThis strategy allocates voting power according to the number of keys (or shares) a voter possesses on friend.tech for a particular user.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0xe12a2f60b400e6c6971d5602df454e5da63edd78\",\n  \"symbol\": \"KEYS\"\n}\n```\n"
  },
  "sd-vote-boost-twavp-v2": {
    "key": "sd-vote-boost-twavp-v2",
    "author": "clement-ux",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Stake DAO vote boost using TWAVP V2",
        "strategy": {
          "name": "sd-vote-boost-twavp-v2",
          "params": {
            "veToken": "0x5f3b5DfEb7B28CDbD7FAba78963EE202a494e2A2",
            "liquidLocker": "0x52f541764E6e90eeBc5c21Ff570De0e2D63766B6",
            "sdTokenGauge": "0x7f50786A0b15723D741727882ee99a0BF34e3466",
            "symbol": "sdToken",
            "decimals": 18,
            "sampleSize": 10,
            "sampleStep": 5,
            "whiteListedAddress": [
              "0x1c0D72a330F2768dAF718DEf8A19BAb019EEAd09"
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x26a5994176d34D128C5e6ab80Fa0882A7df4fF00",
          "0xDdB50FfDbA4D89354E1088e4EA402de895562173",
          "0xE1F7eaD40d33eeF30dCf15eB5efC45409001aAB8",
          "0x1c0D72a330F2768dAF718DEf8A19BAb019EEAd09"
        ],
        "snapshot": 17835000
      }
    ],
    "schema": null,
    "about": "# sd-vote-boost-twavp-v2\n\nThis strategy is used by Stake DAO to vote with sdToken using Time Weighted Averaged Voting Power (TWAVP) system and adapted for veSDT boost delegation with possibility to whiteliste address to by pass TWAVP.\n\n```\nVotingPower(user) = veToken.balanceOf(liquidLocker) * (average.sdTokenGauge.working_balances(user) / sdTokenGauge.working_supply)\n```\n\n>_sampleSize: in days_\n>_sampleStep:  the number of block for `average` calculation (max 5)_\n\nHere is an example of parameters:\n\n```json\n{\n  \"veToken\": \"0x5f3b5DfEb7B28CDbD7FAba78963EE202a494e2A2\",\n  \"liquidLocker\": \"0x52f541764E6e90eeBc5c21Ff570De0e2D63766B6\",\n  \"sdTokenGauge\": \"0x7f50786A0b15723D741727882ee99a0BF34e3466\",\n  \"symbol\": \"sdToken\",\n  \"decimals\": 18,\n  \"sampleSize\": 10,\n  \"sampleStep\": 5,\n}\n```"
  },
  "sd-vote-boost-twavp-v3": {
    "key": "sd-vote-boost-twavp-v3",
    "author": "pierremarsotlyon1",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Stake DAO vote boost using TWAVP V3",
        "strategy": {
          "name": "sd-vote-boost-twavp-v3",
          "params": {
            "veToken": "0x5f3b5DfEb7B28CDbD7FAba78963EE202a494e2A2",
            "liquidLocker": "0x52f541764E6e90eeBc5c21Ff570De0e2D63766B6",
            "sdTokenGauge": "0x7f50786A0b15723D741727882ee99a0BF34e3466",
            "sdToken": "0xD1b5651E55D4CeeD36251c61c50C889B36F6abB5",
            "pools": [
              "0xca0253a98d16e9c1e3614cafda19318ee69772d0"
            ],
            "symbol": "sdToken",
            "decimals": 18,
            "sampleSize": 10,
            "sampleStep": 5,
            "botAddress": "",
            "whiteListedAddress": [
              "0x1c0D72a330F2768dAF718DEf8A19BAb019EEAd09"
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0x26a5994176d34D128C5e6ab80Fa0882A7df4fF00",
          "0xDdB50FfDbA4D89354E1088e4EA402de895562173",
          "0xE1F7eaD40d33eeF30dCf15eB5efC45409001aAB8",
          "0x1c0D72a330F2768dAF718DEf8A19BAb019EEAd09"
        ],
        "snapshot": 17835000
      }
    ],
    "schema": null,
    "about": "# sd-vote-boost-twavp-v3\n\nThis strategy is used by Stake DAO to vote with sdToken using Time Weighted Averaged Voting Power (TWAVP) system and adapted for veSDT boost delegation with possibility to whiteliste address to by pass TWAVP.\n\n```\nVotingPower(user) = veToken.balanceOf(liquidLocker) * (average.sdTokenGauge.working_balances(user) / sdTokenGauge.working_supply)\n```\n\n>_sampleSize: in days_\n>_sampleStep:  the number of block for `average` calculation (max 5)_\n\nHere is an example of parameters:\n\n```json\n{\n  \"veToken\": \"0x5f3b5DfEb7B28CDbD7FAba78963EE202a494e2A2\",\n  \"liquidLocker\": \"0x52f541764E6e90eeBc5c21Ff570De0e2D63766B6\",\n  \"sdTokenGauge\": \"0x7f50786A0b15723D741727882ee99a0BF34e3466\",\n  \"sdToken\": \"0xD1b5651E55D4CeeD36251c61c50C889B36F6abB5\",\n  \"pools\": [\"0xca0253a98d16e9c1e3614cafda19318ee69772d0\"],\n  \"symbol\": \"sdToken\",\n  \"decimals\": 18,\n  \"sampleSize\": 10,\n  \"sampleStep\": 5,\n  \"botAddress\": \"\",\n  \"whiteListedAddress\": [\"0x1c0D72a330F2768dAF718DEf8A19BAb019EEAd09\"]\n}\n```"
  },
  "moonbase": {
    "key": "moonbase",
    "author": "MoonbaseMarkets",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example query Moonbase",
        "strategy": {
          "name": "moonbase",
          "params": {
            "address": "0xc97c478Fc35d75b51549C39974053a679A5C67E1",
            "masterChef": "0x830304d6C669d33738c7E4c1F2310CC1E530Df63",
            "moonbaseLPs": [
              {
                "address": "0x230C64C42886A1F6b91eD8C11B59a2D45865d38F",
                "pid": 7
              }
            ],
            "symbol": "MBG",
            "decimals": 18
          }
        },
        "network": "84531",
        "addresses": [
          "0xe32C26Be24232ba92cd89d116985F81f94Dd26a8",
          "0x7DC90A11489C384dc72234120B0f84C3932d94Ce",
          "0xf704872349a62ceBb40F841B635de268b2F7B9Fb"
        ],
        "snapshot": 9182354
      }
    ],
    "schema": null,
    "about": "# Moonbase\n\nThis is the strategy, it returns the balances of the voters for MBG token balances\nin Moonbase project(pools, farms, vaults, token).\n\nHere is an example of parameters:\n\n```json\n[\n  {\n    \"name\": \"Example query Moonbase\",\n    \"strategy\": {\n      \"name\": \"moonbase\",\n      \"params\": {\n        \"address\": \"0xc97c478Fc35d75b51549C39974053a679A5C67E1\",\n        \"masterChef\": \"0x830304d6C669d33738c7E4c1F2310CC1E530Df63\",\n        \"moonbaseLPs\": [\n          {\n            \"address\": \"0x230C64C42886A1F6b91eD8C11B59a2D45865d38F\",\n            \"pid\": 7\n          }\n        ],\n        \"symbol\": \"MBG\",\n        \"decimals\": 18\n      }\n    },\n    \"network\": \"84531\",\n    \"addresses\": [\n      \"0xe32C26Be24232ba92cd89d116985F81f94Dd26a8\",\n      \"0x7DC90A11489C384dc72234120B0f84C3932d94Ce\",\n      \"0xf704872349a62ceBb40F841B635de268b2F7B9Fb\"\n    ],\n    \"snapshot\": 9182354\n  }\n]\n```\nNote: A maximum of 1,000,000,000 moonbaseLPs are allowed in the strategy to avoid memory issues."
  },
  "dss-vest-unpaid": {
    "key": "dss-vest-unpaid",
    "author": "espendk",
    "version": "1.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "dss-vest-unpaid",
          "params": {
            "address": "0x370F850180FDDCdc521Ed11900a7a27D08B2d402",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0xfe564B3579bAde0E1f22EADC2a9Be471fDCdc01c",
          "0xb6d52aA63532A0d1c50B3Bb782e6B511bd973645",
          "0xAC9ba72fb61aA7c31A95df0A8b6ebA6f41EF875e",
          "0x3d6Affb8CAfE78F640edFfcCD2d2afe6dF151C5c",
          "0x112F0732E59E7600768dFc35Ba744b89F2356Cd8",
          "0x6e0a1dDAD894e6466d405Bb73377F0A257278D74",
          "0xCD252d6AB26b7363E75d7451029C0f0729783AcE"
        ],
        "snapshot": 18036242
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "title": "DssVest contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ]
            }
          },
          "required": [],
          "additionalProperties": false
        }
      }
    },
    "about": "# dss-vest-unpaid\n\nThis strategy returns the vested but yet unclaimed tokens of the voters in a [DssVest](https://github.com/makerdao/dss-vest) token vesting contract.\n"
  },
  "dss-vest-balance-and-unpaid": {
    "key": "dss-vest-balance-and-unpaid",
    "author": "espendk",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "dss-vest-balance-and-unpaid",
          "params": {
            "dssVestAddress": "0x370F850180FDDCdc521Ed11900a7a27D08B2d402",
            "tokenAddress": "0x7777F41A060377B3640F8B5E3bB78e37BD487777",
            "symbol": "MGV",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0xfe564B3579bAde0E1f22EADC2a9Be471fDCdc01c",
          "0xb6d52aA63532A0d1c50B3Bb782e6B511bd973645",
          "0xAC9ba72fb61aA7c31A95df0A8b6ebA6f41EF875e",
          "0x3d6Affb8CAfE78F640edFfcCD2d2afe6dF151C5c",
          "0x112F0732E59E7600768dFc35Ba744b89F2356Cd8",
          "0x6e0a1dDAD894e6466d405Bb73377F0A257278D74",
          "0xCD252d6AB26b7363E75d7451029C0f0729783AcE"
        ],
        "snapshot": 18036242
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "dssVestAddress": {
              "type": "string",
              "title": "DssVest contract address",
              "examples": [
                "e.g. 0x370F850180FDDCdc521Ed11900a7a27D08B2d402"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "tokenAddress": {
              "type": "string",
              "title": "ERC20 contract address",
              "examples": [
                "e.g. 0x7777F41A060377B3640F8B5E3bB78e37BD487777"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. MGV"
              ],
              "maxLength": 16
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ]
            }
          },
          "required": [],
          "additionalProperties": false
        }
      }
    },
    "about": "# dss-vest-balance-and-unpaid\n\nFor an ERC20 token with a [DssVest](https://github.com/makerdao/dss-vest) token vesting contract, this strategy returns the sum of the voters' token balance and the vested but yet unclaimed tokens of the voters.\n"
  },
  "eoa-balance-and-staking-pools": {
    "key": "eoa-balance-and-staking-pools",
    "author": "DEFI-Foundation",
    "version": "0.1.1",
    "examples": [
      {
        "name": "EOA token holders and staking pool participants",
        "strategy": {
          "name": "eoa-balance-and-staking-pools",
          "params": {
            "stakingPoolMiddlewareAddress": "0x99f0dD3aB8a94b01AD3C00B22f605394bfC03bF8",
            "tokenAddress": "0x3E5D9D8a63CC8a88748f229999CF59487e90721e",
            "symbol": "XMT",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x59e110d2E5353500106AD1D79931054cdd74Ac7C",
          "0xeFd52DCFACC73c8f96e143DFa7957C644D3466f1",
          "0x0EBe1447634d9ACCF94F020535De4674d61aaf81",
          "0x583CAf74d967dD0cc0F82968263A9b541014492A",
          "0x75daeC947e200864D5bB20aFe5B60E084b5Bd155",
          "0x1e75C0eEE13678260bfdD156272BBA9a1123d088",
          "0x494d9a664D2be7e6824118d4a494a740df1dcC17",
          "0xA6904f85cbf670eD8F834F2AfDcb9D9cB29173B6",
          "0xD132D1a418d350a938C733EC8f1fcD22Edd3f448",
          "0xE2A8fbEe6D1d0315bF7a06a8483233e2d619AC75",
          "0xAF58ac3C1141b178DFa11cFA85DB4C0FD5646A90",
          "0xd94a0e2aB6C08e1884D3187FAc0E83116c644c60",
          "0xbF35741a0C151fbDc37Dad5C6b8a14cD21277CF4",
          "0x54c9eb4D8B1df9D7A23ca30f3B9B03F9F4c9CA27",
          "0xa893522dc7874746664126dC330fdfC7b7749b05",
          "0x05c2974d048D90EC5Bfa124B6369396727B900fd",
          "0xd11D7D2cb0aFF72A61Df37fD016EE1bd9F180633",
          "0xb62990101E92C7e5809e48e7343f70d86d7E004C",
          "0x8aaE7dAad73dcaD1Fdf145163941B996c672589A"
        ],
        "snapshot": 18220909
      }
    ],
    "schema": null,
    "about": "# Token holders and staking pool partecipants strategy \n\nThis strategy returns the balances of the voters from both staking pools and ERC20 XMT tokens on Ethereum mainnet.\n\n## Accepted options\n\n- **stakingPoolMiddleware:** Staking pool middleware address (automatically fetches current staking pool added to the official MetalSwap DAO).\n\n- **tokenAddress:** ERC20 XMT token address.\n\n## Examples\n\n```JSON\n[\n    {\n        \"name\": \"EOA token holders and staking pool participants\",\n        \"strategy\": {\n            \"name\": \"holders-and-staking-pools\",\n            \"params\": {\n                \"stakingPoolMiddlewareAddress\": \"0x99f0dD3aB8a94b01AD3C00B22f605394bfC03bF8\",\n                \"tokenAddress\": \"0x3E5D9D8a63CC8a88748f229999CF59487e90721e\",\n                \"symbol\": \"XMT\",\n                \"decimals\": 18\n            }\n        },\n        \"network\": \"1\",\n        \"addresses\": [\n            \"0x59e110d2E5353500106AD1D79931054cdd74Ac7C\",\n            \"0xeFd52DCFACC73c8f96e143DFa7957C644D3466f1\",\n            \"0x0EBe1447634d9ACCF94F020535De4674d61aaf81\",\n            \"0x583CAf74d967dD0cc0F82968263A9b541014492A\",\n            \"0x75daeC947e200864D5bB20aFe5B60E084b5Bd155\",\n            \"0x1e75C0eEE13678260bfdD156272BBA9a1123d088\",\n            \"0x494d9a664D2be7e6824118d4a494a740df1dcC17\",\n            \"0xA6904f85cbf670eD8F834F2AfDcb9D9cB29173B6\",\n            \"0xD132D1a418d350a938C733EC8f1fcD22Edd3f448\",\n            \"0xE2A8fbEe6D1d0315bF7a06a8483233e2d619AC75\",\n            \"0xAF58ac3C1141b178DFa11cFA85DB4C0FD5646A90\",\n            \"0xd94a0e2aB6C08e1884D3187FAc0E83116c644c60\",\n            \"0xbF35741a0C151fbDc37Dad5C6b8a14cD21277CF4\",\n            \"0x54c9eb4D8B1df9D7A23ca30f3B9B03F9F4c9CA27\",\n            \"0xa893522dc7874746664126dC330fdfC7b7749b05\",\n            \"0x05c2974d048D90EC5Bfa124B6369396727B900fd\",\n            \"0xd11D7D2cb0aFF72A61Df37fD016EE1bd9F180633\",\n            \"0xb62990101E92C7e5809e48e7343f70d86d7E004C\",\n            \"0x8aaE7dAad73dcaD1Fdf145163941B996c672589A\"\n        ],\n        \"snapshot\": 18220909\n    }\n]\n```"
  },
  "station-score-if-badge": {
    "key": "station-score-if-badge",
    "author": "espendk",
    "version": "1.0.0",
    "MAX_MEMBERS": 500,
    "erc721_abi": [
      "function totalMinted() external view returns (uint256)",
      "function ownerOf(uint256 tokenId) external view returns (address)"
    ],
    "erc6551_registry_abi": [
      "function account(address implementation, uint256 chainId, address tokenContract, uint256 tokenId, uint256 salt) external view returns (address)"
    ],
    "erc1155_abi": [
      "function balanceOf(address account, uint256 id) external view returns (uint256)"
    ],
    "erc20_abi": [
      "function balanceOf(address account) external view returns (uint256)"
    ],
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "station-score-if-badge",
          "params": {
            "membershipERC721": "0xd71c8619209cc95a81f8d9ba4fd704d9eff3ddd6",
            "badgesERC1155": "0xd775e55e314164cce7f71f9f70fc905c907fc65e",
            "badgeId": 1,
            "scoreERC20": "0x30D602cBfe96FC2C83fF31Bdf79d48De65f80733",
            "scoreDecimals": 18,
            "erc6551Registry": "0x02101dfB77FDE026414827Fdc604ddAF224F0921",
            "erc6551Implementation": "0x2d25602551487c3f3354dd80d76d54383a243358",
            "erc6551Salt": 0
          }
        },
        "network": "5",
        "addresses": [
          "0x4D7f3AEA074C6e8136C7e81ff8Af8BccdA3a7d89",
          "0x4B977dC5bF15eC7FB9B2062CA15092B99d13b8F1",
          "0xf78E7a442ea032a4D30FBA984c16a73Af5C915a0",
          "0xAa01DeC5307CF17F20881A3286dcaA062578cea7",
          "0xCD252d6AB26b7363E75d7451029C0f0729783AcE"
        ],
        "snapshot": 9852748
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "membershipERC721": {
              "type": "string",
              "title": "Membership ERC721 contract address",
              "examples": [
                "e.g. 0xd71c8619209cc95a81f8d9ba4fd704d9eff3ddd6"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "badgesERC1155": {
              "type": "string",
              "title": "Badges ERC1155 contract address",
              "examples": [
                "e.g. 0xd775e55e314164cce7f71f9f70fc905c907fc65e"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "badgeId": {
              "type": "number",
              "title": "ERC115 token ID for the Badge members should have",
              "examples": [
                "e.g. 1"
              ],
              "minimum": 0
            },
            "scoreERC20": {
              "type": "string",
              "title": "Member score ERC20 contract address",
              "examples": [
                "e.g. 0x30D602cBfe96FC2C83fF31Bdf79d48De65f80733"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "scoreDecimals": {
              "type": "number",
              "title": "Member score decimals",
              "examples": [
                "e.g. 18"
              ],
              "minimum": 0
            },
            "erc6551Registry": {
              "type": "string",
              "title": "ERC6551 registry address",
              "examples": [
                "e.g. 0x02101dfB77FDE026414827Fdc604ddAF224F0921"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "erc6551Implementation": {
              "type": "string",
              "title": "ERC6551 implementation address",
              "examples": [
                "e.g. 0x2d25602551487c3f3354dd80d76d54383a243358"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "erc6551Salt": {
              "type": "number",
              "title": "ERC6551 salt",
              "examples": [
                "e.g. 0"
              ],
              "minimum": 0
            }
          },
          "required": [],
          "additionalProperties": false
        }
      }
    },
    "about": "# station-score-if-badge\n\nThis strategy returns a score for members of a [Station](https://www.station.express/) [GroupOS](https://groupos.xyz/) group that have a specific badge.\n"
  },
  "station-constant-if-badge": {
    "key": "station-constant-if-badge",
    "author": "espendk",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "station-constant-if-badge",
          "params": {
            "membershipERC721": "0xd71c8619209cc95a81f8d9ba4fd704d9eff3ddd6",
            "badgesERC1155": "0xd775e55e314164cce7f71f9f70fc905c907fc65e",
            "badgeId": 1,
            "constant": 1337,
            "erc6551Registry": "0x02101dfB77FDE026414827Fdc604ddAF224F0921",
            "erc6551Implementation": "0x2d25602551487c3f3354dd80d76d54383a243358",
            "erc6551Salt": 0
          }
        },
        "network": "5",
        "addresses": [
          "0x4D7f3AEA074C6e8136C7e81ff8Af8BccdA3a7d89",
          "0x4B977dC5bF15eC7FB9B2062CA15092B99d13b8F1",
          "0xf78E7a442ea032a4D30FBA984c16a73Af5C915a0",
          "0xAa01DeC5307CF17F20881A3286dcaA062578cea7",
          "0xCD252d6AB26b7363E75d7451029C0f0729783AcE"
        ],
        "snapshot": 9852748
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "membershipERC721": {
              "type": "string",
              "title": "Membership ERC721 contract address",
              "examples": [
                "e.g. 0x651bf9C1A1dEC27b49061F2356482F7c6F3D18fb"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "badgesERC1155": {
              "type": "string",
              "title": "Badges ERC1155 contract address",
              "examples": [
                "e.g. 0xd775e55e314164cce7f71f9f70fc905c907fc65e"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "badgeId": {
              "type": "number",
              "title": "ERC115 token ID for the Badge members should have",
              "examples": [
                "e.g. 1"
              ],
              "minimum": 0
            },
            "constant": {
              "type": "number",
              "title": "Constant to return for voters who have the badge",
              "examples": [
                "e.g. 1337"
              ]
            },
            "erc6551Registry": {
              "type": "string",
              "title": "ERC6551 registry address",
              "examples": [
                "e.g. 0x02101dfB77FDE026414827Fdc604ddAF224F0921"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "erc6551Implementation": {
              "type": "string",
              "title": "ERC6551 implementation address",
              "examples": [
                "e.g. 0x2d25602551487c3f3354dd80d76d54383a243358"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "erc6551Salt": {
              "type": "number",
              "title": "ERC6551 salt",
              "examples": [
                "e.g. 0"
              ],
              "minimum": 0
            }
          },
          "required": [],
          "additionalProperties": false
        }
      }
    },
    "about": "# station-constant-if-badge\n\nThis strategy returns a constant if a voter/proposer has a specific badge in a [Station](https://www.station.express/) [GroupOS](https://groupos.xyz/) group; If not, zero is returned.\n\nThis strategy can be used as a validation strategy that only allows certain members to vote/propose.\n"
  },
  "mangrove-station-qv-scaled-to-mgv": {
    "key": "mangrove-station-qv-scaled-to-mgv",
    "author": "espendk",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "mangrove-station-qv-scaled-to-mgv",
          "params": {
            "membershipERC721": "0xd71c8619209cc95a81f8d9ba4fd704d9eff3ddd6",
            "badgesERC1155": "0xd775e55e314164cce7f71f9f70fc905c907fc65e",
            "activeBadgeId": 1,
            "activityScoreERC20": "0x30D602cBfe96FC2C83fF31Bdf79d48De65f80733",
            "activityScoreDecimals": 18,
            "erc6551Registry": "0x02101dfB77FDE026414827Fdc604ddAF224F0921",
            "erc6551Implementation": "0x2d25602551487c3f3354dd80d76d54383a243358",
            "erc6551Salt": 0,
            "dssVestAddress": "0xc67A1EB2BD5794C070cC555fD4533CF8E28E7162",
            "dssVestDecimals": 18
          }
        },
        "network": "5",
        "addresses": [
          "0x4D7f3AEA074C6e8136C7e81ff8Af8BccdA3a7d89",
          "0x4B977dC5bF15eC7FB9B2062CA15092B99d13b8F1",
          "0xf78E7a442ea032a4D30FBA984c16a73Af5C915a0",
          "0xAa01DeC5307CF17F20881A3286dcaA062578cea7",
          "0xCD252d6AB26b7363E75d7451029C0f0729783AcE"
        ],
        "snapshot": 9855099
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "membershipERC721": {
              "type": "string",
              "title": "Membership ERC721 contract address",
              "examples": [
                "e.g. 0x651bf9C1A1dEC27b49061F2356482F7c6F3D18fb"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "badgesERC1155": {
              "type": "string",
              "title": "Badges ERC1155 contract address",
              "examples": [
                "e.g. 0xd775e55e314164cce7f71f9f70fc905c907fc65e"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "activeBadgeId": {
              "type": "number",
              "title": "ERC115 token ID for the Active Badge that indicate current members",
              "examples": [
                "e.g. 1"
              ],
              "minimum": 0
            },
            "activityScoreERC20": {
              "type": "string",
              "title": "Member score ERC20 contract address",
              "examples": [
                "e.g. 0x30D602cBfe96FC2C83fF31Bdf79d48De65f80733"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "activityScoreDecimals": {
              "type": "number",
              "title": "Member score decimals",
              "examples": [
                "e.g. 18"
              ],
              "minimum": 0
            },
            "erc6551Registry": {
              "type": "string",
              "title": "ERC6551 registry address",
              "examples": [
                "e.g. 0x02101dfB77FDE026414827Fdc604ddAF224F0921"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "erc6551Implementation": {
              "type": "string",
              "title": "ERC6551 implementation address",
              "examples": [
                "e.g. 0x2d25602551487c3f3354dd80d76d54383a243358"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "erc6551Salt": {
              "type": "number",
              "title": "ERC6551 salt",
              "examples": [
                "e.g. 0"
              ],
              "minimum": 0
            },
            "dssVestAddress": {
              "type": "string",
              "title": "DssVest contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "dssVestDecimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ]
            }
          },
          "required": [],
          "additionalProperties": false
        }
      }
    },
    "about": "# mangrove-station-qv-scaled-to-mgv\n\nThis strategy allows active members of one of the Mangrove DAO governance groups (Builders Group and Pods Group) to vote in the Mangrove multistakeholder governance.\n\nQuadratic voting is applied to each member's score and then the voting weight is scaled such that the total voting weight of the group is equal to the circulating supply of MGV tokens. This ensures that the three stakeholder groups have equal voting weights.\n\n## Notes\nMangrove DAO governance groups are [Station](https://www.station.express/) [GroupOS](https://groupos.xyz/) groups on-chain, and active members have a ERC-1155 badge.\n\nThe circulating supply of MGV tokens is the total number of allocated, claimable tokens.\n"
  },
  "floki": {
    "key": "floki",
    "author": "AlissonRS",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "floki",
          "params": {
            "tokenAddress": "0xcf0C122c6b73ff809C693DB761e7BaeBe62b6a2E",
            "stakingPoolAddress": "0xb8D2471E35eE033Db509e0456c8eFc4135f4EE43",
            "stakingPoolMultiplierAddress": "0xB254CC6c1D178C2dE8182CEDE6113A986bB90721",
            "decimals": 9
          }
        },
        "network": "1",
        "addresses": [
          "0x78C4f5CEF16333804394fE736fC5868351968Fd7",
          "0x2cc848EA4C5313Fe5a264D12c7c2181f14f0A5E7",
          "0x5BA9e392Baf5D082d968E1BFA945F99e54BF8123",
          "0x308DA792A0b9c332D5254bB2afB78640d363e2d1"
        ],
        "snapshot": 18458827
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. FLOKI"
              ],
              "maxLength": 16
            },
            "tokenAddress": {
              "type": "string",
              "title": "Token address",
              "examples": [
                "e.g. 0xcf0C122c6b73ff809C693DB761e7BaeBe62b6a2E"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "stakingPoolAddress": {
              "type": "string",
              "title": "Staking Pool address",
              "examples": [
                "e.g. 0xb8D2471E35eE033Db509e0456c8eFc4135f4EE43"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "stakingPoolMultiplierAddress": {
              "type": "string",
              "title": "Staking Pool Multiplier address",
              "examples": [
                "e.g. 0xB254CC6c1D178C2dE8182CEDE6113A986bB90721"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 9"
              ]
            }
          },
          "required": [
            "tokenAddress",
            "stakingPoolAddress",
            "stakingPoolMultiplierAddress",
            "decimals"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# FLOKI\n\nThis is the strategy used by FLOKI DAO. It returns the FLOKI balance, as well as staked amount with pool's multiplier taken into account (which depends on how long the tokens were staked for).\n\nHere is an example of parameters:\n\n```json\n{\n  \"tokenAddress\": \"0xcf0C122c6b73ff809C693DB761e7BaeBe62b6a2E\",\n  \"stakingPoolAddress\": \"0xb8D2471E35eE033Db509e0456c8eFc4135f4EE43\",\n  \"stakingPoolMultiplierAddress\": \"0xB254CC6c1D178C2dE8182CEDE6113A986bB90721\",\n  \"decimals\": 9\n}\n```\n"
  },
  "hats-protocol-hat-id": {
    "key": "hats-protocol-hat-id",
    "author": "hotmanics",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "hats-protocol-hat-id",
          "params": {
            "address": "0x3bc1A0Ad72417f2d411118085256fC53CBdDd137",
            "hatId": "68.1.1.1"
          }
        },
        "network": "5",
        "addresses": [
          "0xc4f6578c24c599F195c0758aD3D4861758d703A3",
          "0xa6aF0566EF4eF7E8f38913f69d4e55c06F00A5aC",
          "0x00e7332F9Cd4C05a0645AC959Fb1Be60ec24F94f",
          "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
          "0x4D6Ed22Ed0850384622EF129932aE29D27a89eD3"
        ],
        "snapshot": 10015682
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "title": "Contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "hatId": {
              "type": "string",
              "title": "Hat Id",
              "examples": [
                "e.g. 68, 68.1, 68.1.1, 68.1.1.1 etc"
              ]
            }
          },
          "required": [
            "address",
            "hatId"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# hats-protocol-hat-id\n\nGrants voting power based on if voter has a specific hat (IP based).\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0x3bc1A0Ad72417f2d411118085256fC53CBdDd137\",\n  \"hatId\": \"68\"\n}\n```\n\nor \n\n```json\n{\n  \"address\": \"0x3bc1A0Ad72417f2d411118085256fC53CBdDd137\",\n  \"hatId\": \"68.1\"\n}\n```\n\nor\n\n```json\n{\n  \"address\": \"0x3bc1A0Ad72417f2d411118085256fC53CBdDd137\",\n  \"hatId\": \"68.1.1\"\n}\n```\n"
  },
  "hats-protocol-hat-ids": {
    "key": "hats-protocol-hat-ids",
    "author": "hotmanics",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "hats-protocol-hat-ids",
          "params": {
            "address": "0x3bc1A0Ad72417f2d411118085256fC53CBdDd137",
            "hatIds": [
              "68",
              "68.1",
              "68.1.1",
              "68.1.1.1"
            ]
          }
        },
        "network": "5",
        "addresses": [
          "0xc4f6578c24c599F195c0758aD3D4861758d703A3",
          "0xa6aF0566EF4eF7E8f38913f69d4e55c06F00A5aC",
          "0x00e7332F9Cd4C05a0645AC959Fb1Be60ec24F94f",
          "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
          "0x4D6Ed22Ed0850384622EF129932aE29D27a89eD3"
        ],
        "snapshot": 10015682
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "title": "Contract address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "hatIds": {
              "type": "array",
              "title": "Hat Ids",
              "examples": [
                "e.g. [\"68\", \"68.1\", \"68.1.1\", \"68.1.1.1\""
              ],
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "address",
            "hatIds"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# hats-protocol-hat-ids\n\nGrants voting power based on if voter has a set of specified hat (IP based).\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0x3bc1A0Ad72417f2d411118085256fC53CBdDd137\",\n  \"hatIds\": \"[\\\"68\\\"]\"\n}\n```\n\nor \n\n```json\n{\n  \"address\": \"0x3bc1A0Ad72417f2d411118085256fC53CBdDd137\",\n  \"hatIds\": \"[\\\"68\\\", \\\"68.1\\\"]\"\n}\n```\n\nor\n\n```json\n{\n  \"address\": \"0x3bc1A0Ad72417f2d411118085256fC53CBdDd137\",\n  \"hatIds\": \"[\\\"68\\\", \\\"68.1\\\", \\\"68.1.1\\\"]\"\n}\n```\n"
  },
  "bubblegum-kids": {
    "key": "bubblegum-kids",
    "author": "flaflafla",
    "version": "0.1.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "bubblegum-kids"
        },
        "network": "1",
        "addresses": [
          "0xfec4465b6aeac9c90e552ae7766bdc0ee0d8dbc9",
          "0x146860d31ab0f6dc858106f1a5d7a52bd6c86d1d",
          "0x8edc7272a444057d1556df2a1173e6799c3c5ae0",
          "0x8af2bd409ea0290029c14aac5d1be77d5c9a114f",
          "0x41636ddf4abb1aa78863101626acdc861d4e8a0b",
          "0xd341108b067cd308cf8cc7e13fb9982b0cba2f4e",
          "0xdf05770b388ee62362917bea9dc96f0dee3b246e",
          "0xf98e849c4b0de9750630f1c23c1bea9e79b4edb3",
          "0xf68b74b89093315c5bf018348886c9fdd8308d7f",
          "0x95222290dd7278aa3ddd389cc1e1d165cc4bafe5"
        ],
        "snapshot": 18589032
      }
    ],
    "schema": null,
    "about": "# bubblegum-kids\n\nThis strategy determines voting power based on an address' holdings of Bubblegum Kids and Bubblegum Puppies NFTs, including staked NFTs.\n"
  },
  "clipper-staked-sail": {
    "key": "clipper-staked-sail",
    "author": "cryptotrades20",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example of clipper-staked-sail Strategy",
        "strategy": {
          "name": "clipper-staked-sail"
        },
        "network": "1",
        "decimals": 18,
        "addresses": [
          "0x3334829670F9e8D309C9D9F318C4E6876755eDe2",
          "0x8e70Ca936a2f2d81cBbF1Dc84Aabe4213C87b8E9",
          "0x314C0695273Ba259Bb60074f2C92c67AC7ae6D40",
          "0x2c2e209465D5312e6dF0cd5F7D1066f1aff9a953",
          "0x4d768cFDb6E0077aD0a971678fa84DBcac32CE62",
          "0x26f8435Bf2a7B8b4771F0D5317beb09fB1F197C3"
        ],
        "snapshot": 18558302
      }
    ],
    "schema": null,
    "about": "# AdmiralDao Staked Sail\n\nThis strategy returns the voting power of an address that has staked sail in the vesail staking contract [VeSail](https://etherscan.io/token/0x26fe2f89a1fef1bc90b8a89d8ad18a1891166ff5). \nThe voting power is calculated as:\n- The amount of vesail held in their address. \n- The result is then used to interract with the tosail method in the contract to get the sail equivalent.\n- Lastly it will take the equivalent sail amount and apply a square root operation.\n\n```JSON\n{\n  \"strategies\": [\n    [\"clipper-staked-sail\"]\n  ]\n}\n```\n"
  },
  "plearn": {
    "key": "plearn",
    "author": "plearnclub",
    "version": "0.0.1",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "plearn",
          "params": {
            "lockedPoolAddresses": [
              {
                "address": "0xc38d542326545470a12B06Bf8e315DE55B0B6B46"
              },
              {
                "address": "0x9b45a8eeD3eF6DA3bE222147533Da542aa384006"
              }
            ],
            "foundingInvestorPoolAddresses": [],
            "pendingWithdrawalAddresses": [
              {
                "address": "0x7E4e06C81B41284198C0693cd98eb357257Fc3d9"
              },
              {
                "address": "0xC26a3E07D8CCF34195e943C0bb705f206Dd57030"
              }
            ],
            "symbol": "PLN",
            "address": "0xBe0D3526fc797583Dada3F30BC390013062A048B",
            "decimals": 18
          }
        },
        "network": "56",
        "addresses": [
          "0xE0d54117600e592E7a78C985996d11b8Fb1B69C3",
          "0x3C97c372B45cC96Fe73814721ebbE6db02C9D88E",
          "0xB6605F98A5562b1AC821Bc5f2B75934239e8c6D6",
          "0x8900cCBdC60fD97E3B7c8529A9987F8c0f8A1125"
        ],
        "snapshot": 33739024
      }
    ],
    "schema": null,
    "about": "# Plearn\n\nThis is the most common strategy, it returns the balances of the voters for a balances PLN token\nin Plearn project(pools, token).\n\nHere is an example of parameters:\n\n```json\n[\n  {\n    \"name\": \"Example query\",\n    \"strategy\": {\n      \"name\": \"plearn\",\n      \"params\": {\n        \"lockedPoolAddresses\": [\n          {\n            \"address\": \"0xc38d542326545470a12B06Bf8e315DE55B0B6B46\"\n          },\n          {\n            \"address\": \"0x9b45a8eeD3eF6DA3bE222147533Da542aa384006\"\n          }\n        ],\n        \"foundingInvestorPoolAddresses\": [],\n        \"pendingWithdrawalAddresses\": [\n          {\n            \"address\": \"0x7E4e06C81B41284198C0693cd98eb357257Fc3d9\"\n          },\n          {\n            \"address\": \"0xC26a3E07D8CCF34195e943C0bb705f206Dd57030\"\n          }\n        ],\n        \"symbol\": \"PLN\",\n        \"address\": \"0xBe0D3526fc797583Dada3F30BC390013062A048B\",\n        \"decimals\": 18\n      }\n    },\n    \"network\": \"56\",\n    \"addresses\": [\n      \"0xE0d54117600e592E7a78C985996d11b8Fb1B69C3\",\n      \"0x3C97c372B45cC96Fe73814721ebbE6db02C9D88E\",\n      \"0xB6605F98A5562b1AC821Bc5f2B75934239e8c6D6\",\n      \"0x8900cCBdC60fD97E3B7c8529A9987F8c0f8A1125\"\n    ],\n    \"snapshot\": 33739024\n  }\n]\n```\n"
  },
  "snote": {
    "key": "snote",
    "author": "kaiserpy",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "snote",
          "params": {
            "symbol": "sNOTE"
          }
        },
        "network": "1",
        "addresses": [
          "0xCece1920D4dBb96BAf88705ce0A6Eb3203ed2eB1",
          "0x4E8014fF5bacE498DAB1a9E2B5c3f4240bC059B6",
          "0x741AA7CFB2c7bF2A1E7D4dA2e3Df6a56cA4131F3"
        ],
        "snapshot": 18629000
      }
    ],
    "schema": null,
    "about": ""
  },
  "streamr": {
    "key": "streamr",
    "author": "streamr-dev",
    "version": "0.1.1",
    "examples": [
      {
        "name": "Streamr",
        "strategy": {
          "name": "streamr",
          "params": {
            "tokenAddress": "0x3a9A81d576d83FF21f26f325066054540720fC34",
            "operatorFactoryAddress": "0x935734e66729b69260543Cf6e5EfeB42AC962183"
          }
        },
        "network": "137",
        "addresses": [
          "0xD6c2bF543491337D81eC9b7d96CFbC04fCB3F4a0",
          "0x2112a4b0F6500Bc0c1AebbAb547eaAB6862acC57",
          "0x488c0Ba58dAc039fAA30D91DdF86CD75B7Dbe4cD",
          "0x013B3576Ef573b7D1eD82Fc4C08bb9dB24EBFa4f",
          "0xAd6A86cC6F6e1169292e7bf325564e0B9AC812A7",
          "0x9bC7F7Aa4b4395391089dA8588fFb0842b5483A6",
          "0xab034dCE46BC70Fd1A032f883B46f6d2BC18DD1a",
          "0xB20C20ba1B94A2Fb746091c8D83937Ee35644251",
          "0x02fdB03705ed8F92fB8C5073990FC5D4d169FAF8",
          "0xc65394747cCCFc5e5DED39da191Bc1C3f9FDB3a2",
          "0x5015C1654D8829d549EE976e462bD8B7adE847C5",
          "0x6Fc263FF819609E5F4c3d5b8D742Fa94B8a3fEaD",
          "0xA39E67290f89dC2419d5F6bf7fE8cc448A80CD1A",
          "0x8d1BEc0692cbFC14CC53af1f0D1aBFFC79DBC04f",
          "0x02880624Bb0743E3144e8943E29Fd1DDe66cF72c",
          "0x8da1A015bb11BcC718CF1f49804282Fa5dBA75C7",
          "0x444d26eC73DBaC8d78299597135dA5C0234BafA1",
          "0x2594664714882D47aC207b4C46751649d886Bdf8",
          "0x41c00f648E781742A5C2CB83B34a05D11D833C4D",
          "0x40f076d4AbE73Be1eB21B862A578cDd583910556"
        ],
        "snapshot": 50305259
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "tokenAddress": {
              "type": "string",
              "title": "DATA token address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "operatorFactoryAddress": {
              "type": "string",
              "title": "OperatorFactory address",
              "examples": [
                "e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            }
          },
          "required": [
            "tokenAddress",
            "operatorFactoryAddress"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# Streamr snapshot strategy\n\nThe Streamr Network is a peer-to-peer network for publishing and subscribing to data in real-time. Applications use it for decentralized messaging, for example sharing data across applications or broadcasting real-time state changes to large audiences. The decentralized nature of the system makes the data transport scalable, robust, secure, tamper proof, and censorship resistant.\n\nOperators are the node running \"miners\" in the Streamr Network. They run Streamr nodes, subscribe to streams, and stake DATA in the Sponsorship contract(s) of those streams. When they subscribe, they help making that stream more robust. In return, they receive DATA tokens from the Sponsorship contract, in proportion to their stake.\n\nThis is why part of the Operators' DATA tokens are staked in Sponsorships (through an Operator contract that they control). Only a small portion of DATA is expected to be in the Streamr Network participants' wallets, the rest is staked or delegated into the Streamr Network.\n\n'''The point of the Streamr snapshot strategy''' is to allocate voting power not only according to DATA token holding (as in the plain erc-20-balance-of strategy), but also counting in the DATA tokens the token holders control via staking and delegation (NOTE: at first, only implemented for stakers. Counting delegated DATA may be added later).\n\n## Parameters\n\n```json\n{\n  \"tokenAddress\": \"0x3a9A81d576d83FF21f26f325066054540720fC34\",\n  \"operatorFactoryAddress\": \"0x935734e66729b69260543Cf6e5EfeB42AC962183\"\n}\n```\n"
  },
  "aavegotchi-agip-17": {
    "key": "aavegotchi-agip-17",
    "author": "candoizo",
    "version": "0.1.2",
    "examples": [
      {
        "name": "AGIP 17: Voting power for GHST value of parcels",
        "strategy": {
          "name": "aavegotchi-agip-17",
          "params": {
            "symbol": "REALM"
          }
        },
        "network": "137",
        "addresses": [
          "0x027Ffd3c119567e85998f4E6B9c3d83D5702660c"
        ],
        "snapshot": 22089223
      }
    ],
    "schema": null,
    "about": ""
  },
  "aavegotchi-agip-37-gltr-staked-lp": {
    "key": "aavegotchi-agip-37-gltr-staked-lp",
    "author": "programmablewealth",
    "version": "0.0.1",
    "examples": [
      {
        "name": "AGIP 37: Voting Power for GHST-FUD, GHST-FOMO, GHST-ALPHA, GHST-KEK, GHST-GLTR, GHST-USDC, and GHST-WMATIC staked in the GLTR farming contract. Note: Excludes wapGHST.",
        "strategy": {
          "name": "aavegotchi-agip-37-gltr-staked-lp",
          "params": {
            "ghstAddress": "0x385Eeac5cB85A38A9a07A70c73e0a3271CfB54A7",
            "gltrStakingAddress": "0x1fE64677Ab1397e20A1211AFae2758570fEa1B8c",
            "amGhstAddress": "0x080b5BF8f360F624628E0fb961F4e67c9e3c7CF1",
            "wapGhstAddress": "0x73958d46B7aA2bc94926d8a215Fa560A5CdCA3eA",
            "wapGhstPoolId": 0,
            "ghstFudAddress": "0xfec232cc6f0f3aeb2f81b2787a9bc9f6fc72ea5c",
            "ghstFudPoolId": 1,
            "ghstFomoAddress": "0x641ca8d96b01db1e14a5fba16bc1e5e508a45f2b",
            "ghstFomoPoolId": 2,
            "ghstAlphaAddress": "0xc765eca0ad3fd27779d36d18e32552bd7e26fd7b",
            "ghstAlphaPoolId": 3,
            "ghstKekAddress": "0xbfad162775ebfb9988db3f24ef28ca6bc2fb92f0",
            "ghstKekPoolId": 4,
            "ghstUsdcAddress": "0x096c5ccb33cfc5732bcd1f3195c13dbefc4c82f4",
            "ghstUsdcPoolId": 5,
            "ghstWmaticAddress": "0xf69e93771F11AECd8E554aA165C3Fe7fd811530c",
            "ghstWmaticPoolId": 6,
            "ghstGltrAddress": "0xb0E35478a389dD20050D66a67FB761678af99678",
            "ghstGltrPoolId": 7,
            "symbol": "GHST",
            "decimals": 18
          }
        },
        "network": "137",
        "addresses": [
          "0x26cf02F892B04aF4Cf350539CE2C77FCF79Ec172",
          "0x027Ffd3c119567e85998f4E6B9c3d83D5702660c",
          "0xc4cb6cb969e8b4e309ab98e4da51b77887afad96"
        ],
        "snapshot": 33423178
      }
    ],
    "schema": null,
    "about": "# Aavegotchi AGIP 37 GLTR Staked LP Strategy\n\n## Description\n\nThis snapshot strategy enables voting power for the following assets staked in GLTR staking pools\n\n- GHST-FUD LP\n- GHST-FOMO LP\n- GHST-ALPHA LP\n- GHST-KEK LP\n- GHST-GLTR LP\n- GHST-USDC LP\n- GHST-WMATIC LP\n\nPlease note this excludes voting power from:\n\n- Staked wapGHST and unstaked wapGHST held in a wallet (see aavegotchi-agip-37-wap-ghst)\n- amGHST (see erc20-balance-of)\n- Unstaked GHST-FUD, GHST-FOMO, GHST-ALPHA, GHST-KEK, GHST-GLTR LP tokens (see erc20-tokens-per-uni)\n\n## References\n\nAavegotchi AGIP 37: https://snapshot.org/#/aavegotchi.eth/proposal/0x9923aab6825158ec2503d88e3ee2f9c5fbb12000581d06343ac9829aa59b66a6\n"
  },
  "aavegotchi-agip-37-wap-ghst": {
    "key": "aavegotchi-agip-37-wap-ghst",
    "author": "programmablewealth",
    "version": "0.0.1",
    "examples": [
      {
        "name": "AGIP-37: This snapshot strategy enables voting power for staked and unstaked wapGHST",
        "strategy": {
          "name": "aavegotchi-agip-37-wap-ghst",
          "params": {
            "ghstAddress": "0x385Eeac5cB85A38A9a07A70c73e0a3271CfB54A7",
            "gltrStakingAddress": "0x1fE64677Ab1397e20A1211AFae2758570fEa1B8c",
            "amGhstAddress": "0x080b5BF8f360F624628E0fb961F4e67c9e3c7CF1",
            "wapGhstAddress": "0x73958d46B7aA2bc94926d8a215Fa560A5CdCA3eA",
            "wapGhstPoolId": 0,
            "ghstFudAddress": "0xfec232cc6f0f3aeb2f81b2787a9bc9f6fc72ea5c",
            "ghstFudPoolId": 1,
            "ghstFomoAddress": "0x641ca8d96b01db1e14a5fba16bc1e5e508a45f2b",
            "ghstFomoPoolId": 2,
            "ghstAlphaAddress": "0xc765eca0ad3fd27779d36d18e32552bd7e26fd7b",
            "ghstAlphaPoolId": 3,
            "ghstKekAddress": "0xbfad162775ebfb9988db3f24ef28ca6bc2fb92f0",
            "ghstKekPoolId": 4,
            "ghstUsdcAddress": "0x096c5ccb33cfc5732bcd1f3195c13dbefc4c82f4",
            "ghstUsdcPoolId": 5,
            "ghstWmaticAddress": "0xf69e93771F11AECd8E554aA165C3Fe7fd811530c",
            "ghstWmaticPoolId": 6,
            "ghstGltrAddress": "0xb0E35478a389dD20050D66a67FB761678af99678",
            "ghstGltrPoolId": 7,
            "symbol": "GHST",
            "decimals": 18
          }
        },
        "network": "137",
        "addresses": [
          "0x26cf02F892B04aF4Cf350539CE2C77FCF79Ec172",
          "0x027Ffd3c119567e85998f4E6B9c3d83D5702660c",
          "0xDEA88c9FE09106b58cA7c026c82383c56eE1E041",
          "0x3a564B24EffA1Cb7Dc836AD094BaD28e69FCa371"
        ],
        "snapshot": 34185374
      }
    ],
    "schema": null,
    "about": "# Aavegotchi AGIP 37 Strategy WAP GHST\n\n## Description\n\nThis snapshot strategy enables voting power for staked and unstaked wapGHST.\n\n## References\n\nAavegotchi AGIP 37: https://snapshot.org/#/aavegotchi.eth/proposal/0x9923aab6825158ec2503d88e3ee2f9c5fbb12000581d06343ac9829aa59b66a6\n"
  },
  "agave": {
    "key": "agave",
    "author": "maxaleks",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "agave",
          "params": {
            "lpToken": "0xf7a28097fDf8c323Da826A9D98617a266A73c0Ef",
            "underlyingToken": "0xb7D311E2Eb55F2f68a9440da38e7989210b9A05e",
            "symbol": "STAKE"
          }
        },
        "network": "100",
        "addresses": [
          "0xF82ce7B9692a32C27FE5477b6C85F163f2920eEA",
          "0x79EB604CCe423dD1CbA290EC946646649F4e70ec",
          "0x65e714b00f2a8f660bBAc9Ad866EeD7b153cB09D"
        ],
        "snapshot": 19235916
      }
    ],
    "schema": null,
    "about": "# Agave strategy\n\nHere is an example of parameters:\n\n```json\n{\n  \"lpToken\": \"0xf7a28097fDf8c323Da826A9D98617a266A73c0Ef\",\n  \"underlyingToken\": \"0xb7D311E2Eb55F2f68a9440da38e7989210b9A05e\"\n}\n```\n"
  },
  "arrakis-finance": {
    "key": "arrakis-finance",
    "author": "MantisClone",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "arrakis-finance",
          "params": {
            "symbol": "BANK",
            "decimals": 18,
            "tokenAddress": "0x2d94AA3e47d9D5024503Ca8491fcE9A2fB4DA198",
            "poolAddress": "0x472D0B0DDFE0BC02C27928b8BcbD67E65D07d48a"
          }
        },
        "network": "1",
        "addresses": [
          "0xb6ac0341Fcf3FB507A8208D34a97f13779e1393D",
          "0x3839acf1ee7699d1f46b1be840d8ad8317fdf757",
          "0xD38cCf0988b375a9F4be1c8eEaeF5ECCA4bB8e87"
        ],
        "snapshot": 14765214
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "symbol",
              "examples": [
                "e.g. BANK"
              ],
              "maxLength": 16
            },
            "decimals": {
              "type": "number",
              "title": "decimals",
              "examples": [
                "e.g. 18"
              ]
            },
            "tokenAddress": {
              "type": "string",
              "title": "tokenAddress",
              "examples": [
                "e.g. 0x2d94AA3e47d9D5024503Ca8491fcE9A2fB4DA198"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "poolAddress": {
              "type": "string",
              "title": "poolAddress",
              "examples": [
                "e.g. 0x472D0B0DDFE0BC02C27928b8BcbD67E65D07d48a"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            }
          },
          "required": [
            "decimals",
            "tokenAddress",
            "poolAddress"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# arrakis-finance\n\nThis strategy returns voters underlying token balance for a given Arrakis Finance pool\n\n## Params\n\n- `symbol` - (**Optional**, `string`) Symbol of ERC20 token\n- `decimals` - (**Required**, `number`) Decimal precision for ERC20 token\n- `tokenAddress` - (**Required**, `string`) Address of ERC20 token contract\n- `poolAddress` - (**Required**, `string`) Address of Arrakis Finance pool (aka. vault) contract\n\nHere is an example of parameters:\n\n```json\n{\n  \"symbol\": \"BANK\",\n  \"decimals\": 18,\n  \"tokenAddress\": \"0x2d94AA3e47d9D5024503Ca8491fcE9A2fB4DA198\",\n  \"poolAddress\": \"0x472D0B0DDFE0BC02C27928b8BcbD67E65D07d48a\"\n}\n```\n"
  },
  "ctsi-staking-pool": {
    "key": "ctsi-staking-pool",
    "author": "cartesi",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "ctsi-staking-pool",
          "params": {
            "expectedResults": {
              "scores": {
                "0x4af926a219e09fe5dd1ee16d7039d82ecf979148": 1001.2293481992707,
                "0x0b47fef7cb50ad5abbc10265152aacc3b4b5e6d1": 19243.216830099187,
                "0xff26ccf9058b9bd8facfb6a8876864fec193285d": 4272385.58482901
              }
            }
          }
        },
        "network": "1",
        "addresses": [
          "0x4af926a219e09fe5dd1ee16d7039d82ecf979148",
          "0x0b47fef7cb50ad5abbc10265152aacc3b4b5e6d1",
          "0xff26ccf9058b9bd8facfb6a8876864fec193285d"
        ],
        "snapshot": 16053852
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "expectedResults": {
              "type": "object",
              "properties": {
                "scores": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "required": [],
          "additionalProperties": false
        }
      }
    },
    "about": "# ctsi-staking-pool\n\nThis strategy implements the rules of CTSI Staking through Staking Pools, returning the staked balance of the voters in all pools they stake to.\n\nThere are no parameters to configure.\n\nDirect stakers or pool operators are not accounted in this strategy. For those use strategy `ctsi-staking`.\n"
  },
  "cyberkongz-v2": {
    "key": "cyberkongz-v2",
    "author": "frosti-eth",
    "version": "0.1.0",
    "examples": [
      {
        "name": "CyberKongz, CyberKongz VX and Banana holdings",
        "strategy": {
          "name": "cyberkongz-v2",
          "params": {
            "symbol": "KONGZ",
            "registries": [
              "0x57a204aa1042f6e66dd7730813f4024114d74f37",
              "0x7ea3cca10668b8346aec0bf1844a49e995527c8b",
              "0xe2311ae37502105b442bbef831e9b53c5d2e9b3b"
            ]
          }
        },
        "network": "1",
        "addresses": [
          "0xf521Bb7437bEc77b0B15286dC3f49A87b9946773",
          "0x721931508df2764fd4f70c53da646cb8aed16ace",
          "0xa63571f2ce7cf4e9a566a1f248f5d0ad3ba78726",
          "0x9279c4cfb0e85e2dff8825ce141f9794c7c7170a",
          "0x6f35b0cfc58eb1e21eef8a439bbb0ce4c929d32a",
          "0xe34bded2b256430a9be53cbf5cba3b6d866d55f3",
          "0xb14b87790643d2dab44b06692d37dd95b4b30e56"
        ],
        "snapshot": 13322697
      }
    ],
    "schema": null,
    "about": ""
  },
  "dextf-staked-in-vaults": {
    "key": "dextf-staked-in-vaults",
    "author": "dextf",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "dextf-staked-in-vaults",
          "params": {
            "name": "DEXTF Vaults",
            "contractAddresses": [
              "0x42a05787584ec09dDDe46f8CE6a715c93049ee88"
            ],
            "symbol": "DEXTF",
            "scoreMultiplier": 1,
            "methodABI": {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          }
        },
        "network": "1",
        "addresses": [
          "0x75527f00EC786dCCd6CEa82C9B90C81781C42E92"
        ],
        "snapshot": 13230652
      }
    ],
    "schema": null,
    "about": "# Multiple contract call strategy\n\nThis strategy allows users to call the 'balanceOf' function across multiple DEXTF contracts (vaults) and performs summation over the results. By calling 'balanceOf', DEXTF vaults return the amount of $DEXTF staked by the user in that vault. This strategy will make a single multicall which will retrieve all users' staked balances in all of DEXTF vaults.\n\n## Example\n\nThe space config will look like this:\n\n```JSON\n{\n  \"strategies\": [\n    [\"dextf-staked-in-vaults\", {\n      // vault contracts across which token balance needs to be calculated\n      \"contractAddresses\": [\n      \"0x42a05787584ec09dDDe46f8CE6a715c93049ee88\"\n      ],\n      // scoreMultiplier can be used to increase users' scores by a certain magnitude\n      \"scoreMultiplier\": 1,\n      // ABI for balanceOf method\n      \"methodABI_1\": {\n            \"inputs\": [\n              {\n                \"internalType\": \"address\",\n                \"name\": \"account\",\n                \"type\": \"address\"\n              }\n            ],\n            \"name\": \"balanceOf\",\n            \"outputs\": [\n              {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n              }\n            ],\n            \"stateMutability\": \"view\",\n            \"type\": \"function\"\n          }\n    }],\n  ]\n}\n```\n"
  },
  "genomesdao": {
    "key": "genomesdao",
    "author": "Charles-repo",
    "version": "0.1.2",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "genomesdao",
          "params": {
            "address": "0x6E8a8726639d12935b3219892155520bdC57366B",
            "lpaddress": "0xc1214b61965594b3e08Ea4950747d5A077Cd1886",
            "harvaddress": "0x0a0be71cfce12ecb966dc762016c28ef5640b56a",
            "veaddress": "0xae059C276904B9E885710c4a68434b4Bc437da6e",
            "symbol": "GNOME",
            "decimals": 18
          }
        },
        "network": "137",
        "addresses": [
          "0xd53c79ff8c473bbfe4e40e5525d4d24fd4b8534c",
          "0xA4e2E09eDEDC19342801243CcFcB834F582616aE",
          "0x326a9c20f220042c9e2ee3d7969e2a3963a67606",
          "0xc1214b61965594b3e08ea4950747d5a077cd1886",
          "0x7641d6f27dfd771daa164b9dc9aa13a8ebe41ce1",
          "0x39cc360806b385c96969ce9ff26c23476017f652",
          "0xb2fe752658b69bb6121cc20fc44453cb64a41c84",
          "0x7566f600d85c1d4e8adbd7ec320cf0de90c13199",
          "0x7f30ef435c125e42cd8ec68c3f2e9f79c5923901",
          "0xc292eafd5422a9c961cc2630cbddf04c93db33bd",
          "0x85a31f476428284c2eba10c1d18b4b66a8503d1f",
          "0x5771605020287556c6f24341879437d38a651250",
          "0xc2ddec8a16c757d7fc683b4ad4634ef87be6f26f",
          "0x452cbcc3ff392ae6e42f0aff8113f21f0a144846",
          "0xa4e2e09ededc19342801243ccfcb834f582616ae",
          "0xeb8dfecd1d9447f31122cae7f1bada00dda9746c",
          "0xfaf6a40bc40cef05fafdc3e0036611c8f8c9d3fa",
          "0x374615cb8cf32360eb592f3f35163ed4c2fdcc7a",
          "0xd49c91a75fbf8943d12c65b8d1a5da4173ed1d21",
          "0x74ddd85389f4fd0069c922273498b4e28cdc9ccc",
          "0x0057ff99a06f82cd876c4f7f1718bd9a4f2e74b6"
        ],
        "snapshot": 26201867
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "title": "Governance Token Contract address",
              "examples": [
                "e.g. 0x6E8a8726639d12935b3219892155520bdC57366B"
              ]
            },
            "lpaddress": {
              "type": "string",
              "title": "LP Token Contract address on Sushi",
              "examples": [
                "e.g. 0xc1214b61965594b3e08Ea4950747d5A077Cd1886"
              ]
            },
            "harvaddress": {
              "type": "string",
              "title": "Harvest Token Contract Address",
              "examples": [
                "e.g. 0x0a0be71cfce12ecb966dc762016c28ef5640b56a"
              ]
            },
            "veaddress": {
              "type": "string",
              "title": "veGNOME Token Contract Address",
              "examples": [
                "e.g. 0xae059C276904B9E885710c4a68434b4Bc437da6e"
              ]
            },
            "symbol": {
              "type": "string",
              "title": "Symbol",
              "examples": [
                "e.g. GNOME"
              ],
              "maxLength": 16
            },
            "decimals": {
              "type": "number",
              "title": "Decimals",
              "examples": [
                "e.g. 18"
              ]
            }
          },
          "required": [
            "address",
            "lpaddress",
            "decimals"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# genomesdao\n\nThis strategy returns the balances of the voters and the LP'ed amount for a specific ERC20 token.\n\nHere is an example of parameters:\n\n```json\n{\n  \"address\": \"0x6E8a8726639d12935b3219892155520bdC57366B\",\n  \"lpaddress\": \"0xc1214b61965594b3e08Ea4950747d5A077Cd1886\",\n  \"harvaddress\": \"0x0a0be71cfce12ecb966dc762016c28ef5640b56a\",\n  \"veaddress\": \"0xae059C276904B9E885710c4a68434b4Bc437da6e\",\n  \"symbol\": \"GNOME\",\n  \"decimals\": 18\n}\n```\n"
  },
  "goldfinch-membership": {
    "key": "goldfinch-membership",
    "author": "sanjayprabhu",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Goldfinch Membership",
        "strategy": {
          "name": "goldfinch-membership",
          "params": {
            "symbol": "UID"
          }
        },
        "network": "1",
        "addresses": [
          "0x526C7665C5dd9cD7102C6d42D407a0d9DC1e431d",
          "0x721931508df2764fd4f70c53da646cb8aed16ace",
          "0x4902b20bB3B8e7776CBcDCB6e3397E7F6b4e449E"
        ],
        "snapshot": 14291193
      }
    ],
    "schema": null,
    "about": ""
  },
  "goldfinch-voting-power": {
    "key": "goldfinch-voting-power",
    "author": "sanjayprabhu",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Goldfinch Voting Power",
        "strategy": {
          "name": "goldfinch-voting-power",
          "params": {
            "symbol": "GFI",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0x526C7665C5dd9cD7102C6d42D407a0d9DC1e431d",
          "0x721931508df2764fd4f70c53da646cb8aed16ace",
          "0x4902b20bB3B8e7776CBcDCB6e3397E7F6b4e449E",
          "0x8F4fc35cF5ad925bCC1cAe81E5da62fCA1c2Dd2a",
          "0x6C3FB1A2A55fdcFb620Ae8f19b6fc332622050DD"
        ],
        "snapshot": 16080167
      }
    ],
    "schema": null,
    "about": ""
  },
  "h2o": {
    "key": "h2o",
    "author": "MantisClone",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "h2o",
          "params": {
            "symbol": "OCEAN",
            "collateralTypeId": "OCEAN-A"
          }
        },
        "network": "1",
        "addresses": [
          "0x1EC1CcEF3e1735bdA3F4BA698e8a524AA7c93274",
          "0x0ac0240f4656dc80684d0df1208bb91c0220725d",
          "0x24a9689d209622fd6def27a21174c1cdfb479483",
          "0x650235ffc650d3b3d95c904be345aafb97c586cf",
          "0x71d5b84d22b6df54fa6cc6c325ff36c86b9f356c",
          "0x933b7dfefae9e2e8385054d1c9b1143d9aeeb069",
          "0x99665a5252c15ca3e24fcebab56d0721fb9d1158"
        ],
        "snapshot": 14678934
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "symbol",
              "examples": [
                "e.g. OCEAN"
              ],
              "maxLength": 16
            },
            "collateralTypeId": {
              "type": "string",
              "title": "collateralTypeId",
              "examples": [
                "e.g. OCEAN-A"
              ],
              "maxLength": 16
            }
          },
          "required": [
            "collateralTypeId"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# h2o\n\nReturns the underlying collateral balance for each voter's H2O vault(s).\n\n## Params\n\n- `symbol` - (**Optional**, `string`) Symbol of collateral ERC20 token\n- `collateralTypeId` - (**Required**, `string`) Collateral type ID\n\nHere is an example of parameters:\n\n```json\n{\n  \"symbol\": \"OCEAN\",\n  \"collateralTypeId\": \"OCEAN-A\"\n}\n```\n"
  },
  "hopr-staking-by-season": {
    "key": "hopr-staking-by-season",
    "author": "QYuQianchen",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Stakes and unclaimed rewards from HOPR Stake program Season x",
        "strategy": {
          "name": "hopr-staking-by-season",
          "params": {
            "tokenAddress": "0xf5581dfefd8fb0e4aec526be659cfab1f8c781da",
            "symbol": "HOPR",
            "variant": "staking",
            "season": 3
          }
        },
        "network": "100",
        "addresses": [
          "0x04BBB7eA18EA570aE47d4489991645E4E49bBf37",
          "0x2aF80738aC01e7883d11c912dFe8322C129ae5C5",
          "0x0bb43EFc1a613658177D8f67CcF9CFFD8B25b906",
          "0x53e85186ebF5A7d4BD06324F7b9D8B3623EF0307",
          "0x2DCDB99930E279f1e9Ad11F491163051432542A0",
          "0x4326990033eCd87A5444383Cf8c715E696301910",
          "0xEd6a59A7C1D5a88b7cb5eb877A7A6078A7e801C7",
          "0xeFC05B0D0C8bE8D4Cb3a220ef582E9f7E6FBCd00",
          "0xC7B169b108c5e75991C520AEA97140534291C81D",
          "0x04Be52434EB64aDdF373137310551ac42013677c",
          "0xBE8C93a8C18AF63aAB449994AFAc13E71240ccC4",
          "0xf813773eBDD4759c1B780d745081f046A5B776fB",
          "0x7F26C34Ed10bF66602009231bBFF24f2f84e9270",
          "0x4abd7276C53279b3aBFFF2B5D8A47c0AFc84833B",
          "0x3e1A12a6019ee26418F22B656926fE38F5e58C5f",
          "0x7A27A4D91231aCB3282b410Cc784517B417FA0DA"
        ],
        "snapshot": 21953000
      }
    ],
    "schema": null,
    "about": ""
  },
  "hopr-staking-s2": {
    "key": "hopr-staking-s2",
    "author": "QYuQianchen",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Stakes and unclaimed rewards from HOPR Stake program Season 2",
        "strategy": {
          "name": "hopr-staking-s2",
          "params": {
            "tokenAddress": "0xf5581dfefd8fb0e4aec526be659cfab1f8c781da",
            "symbol": "HOPR"
          }
        },
        "network": "100",
        "addresses": [
          "0x04BBB7eA18EA570aE47d4489991645E4E49bBf37",
          "0x2aF80738aC01e7883d11c912dFe8322C129ae5C5",
          "0x0bb43EFc1a613658177D8f67CcF9CFFD8B25b906",
          "0x53e85186ebF5A7d4BD06324F7b9D8B3623EF0307",
          "0x2DCDB99930E279f1e9Ad11F491163051432542A0",
          "0x4326990033eCd87A5444383Cf8c715E696301910",
          "0xEd6a59A7C1D5a88b7cb5eb877A7A6078A7e801C7",
          "0xeFC05B0D0C8bE8D4Cb3a220ef582E9f7E6FBCd00",
          "0xC7B169b108c5e75991C520AEA97140534291C81D",
          "0x04Be52434EB64aDdF373137310551ac42013677c",
          "0xBE8C93a8C18AF63aAB449994AFAc13E71240ccC4",
          "0xf813773eBDD4759c1B780d745081f046A5B776fB",
          "0x7F26C34Ed10bF66602009231bBFF24f2f84e9270",
          "0x4abd7276C53279b3aBFFF2B5D8A47c0AFc84833B",
          "0x3e1A12a6019ee26418F22B656926fE38F5e58C5f",
          "0x7A27A4D91231aCB3282b410Cc784517B417FA0DA"
        ],
        "snapshot": 21138069
      }
    ],
    "schema": null,
    "about": ""
  },
  "ilv": {
    "key": "ilv",
    "author": "andytcf",
    "version": "0.1.0",
    "examples": null,
    "schema": null,
    "about": "# Quadratic Debt Percentage Strategy\n\nCalculates the quadratic weighting of voters, based on their token holding.\n\n## Examples\n\nCan be used instead of the erc20-balance-of strategy, the space config will look like this:\n\n```JSON\n{\n  \"strategies\": [\n    [\"ilv\"]\n  ]\n}\n```\n"
  },
  "meebitsdao-delegation": {
    "key": "meebitsdao-delegation",
    "author": "maikir",
    "version": "0.2.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "meebitsdao-delegation",
          "params": {
            "symbol": "mVOX, MFND, Meebits",
            "tokenAddresses": [
              {
                "address": "0x7C1a4c36D9BDa5C568f0E4877CD8E27D74Ae66c6",
                "symbol": "mVOX",
                "decimals": 0,
                "network": "137"
              },
              {
                "address": "0xc34cbca32e355636c7f52dd8beab0af2396ebd79",
                "symbol": "MFND",
                "apiUrl": "https://api.meebitsdao.com/user/token_status/",
                "startingTokenId": 1,
                "endingTokenId": 200,
                "network": "137"
              },
              {
                "address": "0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7",
                "symbol": "Meebits",
                "network": "1"
              }
            ]
          }
        },
        "network": "137",
        "addresses": [
          "0x35001A8Bdb3a224D05F086094c12fd4c9009986D",
          "0x22aD49d3E1F81A2A626E2DF64Fbdabe1536CaB07",
          "0x6f35B0Cfc58Eb1e21eeF8a439BbB0cE4C929d32a",
          "0xEDe64a571CFe98B936271B935a955620f387E05A",
          "0x4613739e5BCea4730F2a4983CE2100432415b01B",
          "0xd0Fd6D1C05b15F5B141253F13855c86cC3E655B8",
          "0x2D1547D6C43Eb8185379D11Cf1A6dDAf2780B62A",
          "0xc842Ce7214A14Fa98186a010bcb43c7e99e4caF3",
          "0x8F903cFC0Af3C2EC0d872c57538AF5e071544a57",
          "0x19FfA65cF48B8D0cD9081958e69b7A170824955C",
          "0xf4fF19C30c98533fd6D3cEcF09b3d6802e470dD0",
          "0xc03a694c5f7BDf2D32583F4E2421E3Fb3426D3aD",
          "0xC1dFeDD7B8Fc3010a42466E51c773068fb95F485",
          "0x614b89F072eA263a9387460963142e73548FBAF1",
          "0x2F28c719768f71ad3657463f230292A0b63b65d0",
          "0xC5e38233Cc0D7CFf9340e6139367aBA498EC9b18",
          "0xF134c8f76214c500dcDC9188A21bD405CdAAf4c8",
          "0x2009a752a50D3CDe486d7b5921944377B729E747",
          "0x017a04631caF0Bacec325f68caAd2838a80Dd91D",
          "0x0A1ee64e760cE54D38958E7b9c2a429CFaE050c4",
          "0x0Cbf9fA338048BB8A8A0eA33f9C59f9d0407D692",
          "0xffB6D3c42B07c17ED0B6bE1136D2EBC599b2562e"
        ],
        "snapshot": 25925040
      }
    ],
    "schema": null,
    "about": "# meebitsdao-delegation\n\nThis delegation strategy returns the balances of the voters for specific ERC20 [mVOX](https://polygonscan.com/address/0x7C1a4c36D9BDa5C568f0E4877CD8E27D74Ae66c6) and ERC721 [MFND](https://polygonscan.com/address/0xc34cbca32e355636c7f52dd8beab0af2396ebd79). The calcualation is as follows: users with MFND tokens can hold voting power and can be assigned as delegates, while users with mVOX tokens can delegate votes (to those who hold MFND tokens) but cannot hold actual vote themselves. This is different from the standard Snapshot voting strategy in that votes from delegators do not count themselves, if the votes are not delegated.\n\nHere is an example of parameters:\n\n```json\n{\n  \"symbol\": \"mVOX, MFND, Meebits\",\n  \"tokenAddresses\": [\n    {\n      \"address\": \"0x7C1a4c36D9BDa5C568f0E4877CD8E27D74Ae66c6\",\n      \"symbol\": \"mVOX\",\n      \"decimals\": 0,\n      \"network\": \"137\"\n    },\n    {\n      \"address\": \"0xc34cbca32e355636c7f52dd8beab0af2396ebd79\",\n      \"symbol\": \"MFND\",\n      \"apiUrl\": \"https://api.meebitsdao.com/user/token_status/\",\n      \"startingTokenId\": 1,\n      \"endingTokenId\": 200,\n      \"network\": \"137\"\n    },\n    {\n      \"address\": \"0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7\",\n      \"symbol\": \"Meebits\",\n      \"network\": \"1\"\n    }\n  ]\n}\n```\n"
  },
  "modefi-staking": {
    "key": "modefi-staking",
    "author": "Modefi",
    "version": "0.0.1",
    "examples": [
      {
        "name": "modefiStaking",
        "strategy": {
          "network": "250",
          "name": "modefi-staking",
          "params": {
            "address": "0xe64b9fd040d1f9d4715c645e0d567ef69958d3d9",
            "stakingContract": "0xaeA240AF3C46D65dfF0EbFcb5fb923365E0aB623",
            "symbol": "MOD",
            "decimals": 18
          }
        },
        "network": "250",
        "addresses": [
          "0x66566af6359cacfab858c0c50c5d22895ab877d6",
          "0x237e61fa6baaf3248d4a61d98d6ab00a43448969"
        ],
        "snapshot": 10928059
      }
    ],
    "schema": null,
    "about": ""
  },
  "orbs-network-delegation": {
    "key": "orbs-network-delegation",
    "author": "gadcl",
    "version": "0.1.2",
    "examples": [
      {
        "name": "Example query 1",
        "strategy": {
          "name": "orbs-network-delegation",
          "params": {
            "address": "0xB97178870F39d4389210086E4BcaccACD715c71d",
            "symbol": "ORBS",
            "decimals": 18
          }
        },
        "network": "1",
        "addresses": [
          "0xc5e624d6824e626a6f14457810e794e4603cfee2",
          "0x63AEf7616882F488BCa97361d1c24F05B4657ae5",
          "0x3D726623456e34e8a7F5567F6249EC4D72Cc3595",
          "0x8DdB908c77ccc9cfde28dDF84311CB6fDF3f3125",
          "0xca565ccb6434e0adf49b2d66df12b0046b013d7f",
          "0x9520F53FD81C668E8088AE194C40E3F977B73D28",
          "0x588C28C19E4185A2442C4C3DD9EBD592C61ECCB9",
          "0xA478C2975AB1EA89E8196811F51A7B7ADE33EB11"
        ],
        "snapshot": 15210123
      },
      {
        "name": "Example query 2",
        "strategy": {
          "name": "orbs-network-delegation",
          "params": {
            "address": "0x513d30e66641cB1f2670b5994DD8E2B61ED3C23c",
            "symbol": "ORBS",
            "decimals": 18
          }
        },
        "network": "137",
        "addresses": [
          "0xc5e624d6824e626a6f14457810e794e4603cfee2",
          "0x63aef7616882f488bca97361d1c24f05b4657ae5",
          "0x3d726623456e34e8a7f5567f6249ec4d72cc3595",
          "0x8ddb908c77ccc9cfde28ddf84311cb6fdf3f3125",
          "0xca565ccb6434e0adf49b2d66df12b0046b013d7f",
          "0x9520f53fd81c668e8088ae194c40e3f977b73d28",
          "0x588c28c19e4185a2442c4c3dd9ebd592c61eccb9",
          "0xa478c2975ab1ea89e8196811f51a7b7ade33eb11"
        ],
        "snapshot": 31123128
      }
    ],
    "schema": null,
    "about": "# orbs-network-delegation\n\nThis strategy is based on the Orbs Delegation contract and its underlying logic.\nIt returns the net delegated ORBS stake in the requested network(chain) PoS, after accounting for delegators who vote for themselves.\nA delegator who chooses to vote will override its delegate vote. The voter stake is counted once, either for a delegate or for a delegator.\n\nHere is an example of parameters (Orbs Delegation contract on Ethereum Mainnet):\n\n```json\n{\n  \"address\": \"0xB97178870F39d4389210086E4BcaccACD715c71d\",\n  \"symbol\": \"ORBS\",\n  \"decimals\": 18\n}\n```\n\nThis strategy can be combined with `multichain` for cross-chain Orbs PoS scores.\n"
  },
  "planet-finance-v2": {
    "key": "planet-finance-v2",
    "author": "defininja",
    "version": "0.0.2",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "planet-finance-v2",
          "params": {
            "address": "0x72B7D61E8fC8cF971960DD9cfA59B8C829D91991",
            "symbol": "AQUA",
            "decimals": 18
          }
        },
        "network": "56",
        "addresses": [
          "0xc358615Fb090Db0284a73Ac690B264BFDCa141f0",
          "0x19d4051F7740e6AA4494EBCc655a70f524878346",
          "0xa14EdA7b66Fa8B030905A57D97Da57553c56Ec0D"
        ],
        "snapshot": 22001625
      }
    ],
    "schema": null,
    "about": ""
  },
  "rari-fuse": {
    "key": "rari-fuse",
    "author": "MantisClone",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "rari-fuse",
          "params": {
            "symbol": "BANK",
            "token": "0x2d94AA3e47d9D5024503Ca8491fcE9A2fB4DA198",
            "fToken": "0x250316B3E46600417654b13bEa68b5f64D61E609"
          }
        },
        "network": "1",
        "addresses": [
          "0x3839AcF1ee7699D1F46b1BE840D8aD8317FDf757",
          "0x0cf861f96378dbd5194d74cbe6b0424fafaed940",
          "0x0f1d41cc51e97dc9d0cad80dc681777eed3675e3",
          "0xb6ac0341fcf3fb507a8208d34a97f13779e1393d",
          "0x173ff4db38c3fcde0584f8ea7930c44969a29ba4"
        ],
        "snapshot": 14482171
      }
    ],
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$ref": "#/definitions/Strategy",
      "definitions": {
        "Strategy": {
          "title": "Strategy",
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string",
              "title": "symbol",
              "examples": [
                "e.g. BANK"
              ],
              "maxLength": 16
            },
            "token": {
              "type": "string",
              "title": "token",
              "examples": [
                "e.g. 0x2d94AA3e47d9D5024503Ca8491fcE9A2fB4DA198"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            },
            "fToken": {
              "type": "string",
              "title": "fToken",
              "examples": [
                "e.g. 0x250316B3E46600417654b13bEa68b5f64D61E609"
              ],
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "minLength": 42,
              "maxLength": 42
            }
          },
          "required": [
            "token",
            "fToken"
          ],
          "additionalProperties": false
        }
      }
    },
    "about": "# rari-fuse\n\nReturns the voter's underlying collateral balances in a given Rari Fuse market (fToken).\n\nHere is an example of parameters:\n\n- `symbol` - (**Optional**, `string`) Symbol of the underlying ERC20 token\n- `token` - (**Required**, `string`) Address of the underlying token.\n- `fToken` - (**Required**, `string`) Address of the fToken (Rari Fuse market)\n\n```json\n{\n  \"symbol\": \"BANK\",\n  \"token\": \"0x2d94AA3e47d9D5024503Ca8491fcE9A2fB4DA198\",\n  \"fToken\": \"0x250316B3E46600417654b13bEa68b5f64D61E609\"\n}\n```\n\n## Reference\n\nFor details about exchange rate between fTokens and underlying tokens, see\nhttps://docs.rari.capital/fuse/#interpreting-exchange-rates\n"
  },
  "synthetix-non-quadratic_1": {
    "key": "synthetix-non-quadratic_1",
    "author": "andytcf",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "synthetix-non-quadratic_1",
          "params": {
            "address": "0x023c66b7e13d30a3c46aa433fd2829763d5817c5",
            "symbol": "WD",
            "totalL2Debt": 48646913,
            "lastDebtLedgerEntryL2": 9.773647546760865e+24,
            "L2BlockNumber": 919219
          }
        },
        "network": "1",
        "addresses": [
          "0xcAc59F91E4536Bc0E79aB816a5cD54e89f10433C",
          "0x935D2fD458fdf41B6F7B62471f593797866a3Ce6"
        ],
        "snapshot": 13764062
      }
    ],
    "schema": null,
    "about": "# Non-Quadratic Debt Percentage Strategy\n\nCalculates the weighting of voters, based on their debt percentage in the previous fee period.\n\n## Examples\n\nCan be used instead of the erc20-balance-of strategy, the space config will look like this:\n\n```JSON\n{\n  \"strategies\": [\n    [\"synthetix-non-quadratic_1\"]\n  ]\n}\n```\n"
  },
  "synthetix-quadratic": {
    "key": "synthetix-quadratic",
    "author": "andytcf",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "synthetix-quadratic",
          "params": {
            "address": "0x023c66b7e13d30a3c46aa433fd2829763d5817c5",
            "symbol": "WD"
          }
        },
        "network": "1",
        "addresses": [
          "0x78b037B39704e88a82DD23CFBE1f57f6AeF8EBC5",
          "0x0bc3668d2AaFa53eD5E5134bA13ec74ea195D000",
          "0xcAc59F91E4536Bc0E79aB816a5cD54e89f10433C",
          "0x6dc88B231Cd04Dd1b1e525161162993F47140006",
          "0x935D2fD458fdf41B6F7B62471f593797866a3Ce6",
          "0x24e445fe7708Bf4bC2ae8d4df1694C98Af8BDE4F",
          "0x49be88f0fcc3a8393a59d3688480d7d253c37d2a",
          "0x27Cc4d6bc95b55a3a981BF1F1c7261CDa7bB0931"
        ],
        "snapshot": 13228907
      }
    ],
    "schema": null,
    "about": "# Quadratic Debt Percentage Strategy\n\nCalculates the quadratic weighting of voters, based on their debt percentage in the previous fee period.\n\n## Examples\n\nCan be used instead of the erc20-balance-of strategy, the space config will look like this:\n\n```JSON\n{\n  \"strategies\": [\n    [\"synthetix-quadratic\"]\n  ]\n}\n```\n"
  },
  "synthetix-quadratic_1": {
    "key": "synthetix-quadratic_1",
    "author": "andytcf",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "synthetix-quadratic_1",
          "params": {
            "address": "0x023c66b7e13d30a3c46aa433fd2829763d5817c5",
            "symbol": "WD",
            "totalL2Debt": 48646913,
            "lastDebtLedgerEntryL2": 9.773647546760865e+24,
            "L2BlockNumber": 919219
          }
        },
        "network": "1",
        "addresses": [
          "0xcAc59F91E4536Bc0E79aB816a5cD54e89f10433C",
          "0x935D2fD458fdf41B6F7B62471f593797866a3Ce6"
        ],
        "snapshot": 13764062
      }
    ],
    "schema": null,
    "about": "# Quadratic Debt Percentage Strategy\n\nCalculates the quadratic weighting of voters, based on their debt percentage in the previous fee period.\n\n## Examples\n\nCan be used instead of the erc20-balance-of strategy, the space config will look like this:\n\n```JSON\n{\n  \"strategies\": [\n    [\"synthetix-quadratic_1\"]\n  ]\n}\n```\n"
  },
  "synthetix_1": {
    "key": "synthetix_1",
    "author": "andytcf",
    "version": "1.0.0",
    "examples": [
      {
        "name": "Example query",
        "strategy": {
          "name": "synthetix_1",
          "params": {
            "address": "0x023c66b7e13d30a3c46aa433fd2829763d5817c5",
            "symbol": "WD",
            "L2BlockNumber": 4497555,
            "L1SDS": "0x89FCb32F29e509cc42d0C8b6f058C993013A843F",
            "L2SDS": "0x45c55BF488D3Cb8640f12F63CbeDC027E8261E79",
            "L1DebtCache": "0x9D5551Cd3425Dd4585c3E7Eb7E4B98902222521E",
            "L2DebtCache": "0x01f8C5e421172B67cc14B7f5F369cfb10de0acD4",
            "quadratic": false
          }
        },
        "network": "1",
        "addresses": [
          "0x99F4176EE457afedFfCB1839c7aB7A030a5e4A92",
          "0x8cA24021E3Ee3B5c241BBfcee0712554D7Dc38a1"
        ],
        "snapshot": 14396861
      }
    ],
    "schema": null,
    "about": "# Quadratic Debt Percentage Strategy\n\nCalculates the quadratic weighting of voters, based on their debt percentage in the previous fee period.\n\n## Examples\n\nCan be used instead of the erc20-balance-of strategy, the space config will look like this:\n\n```JSON\n{\n  \"strategies\": [\n    [\"synthetix-quadratic_2\"]\n  ]\n}\n```\n"
  },
  "total-axion-shares": {
    "key": "total-axion-shares",
    "author": "Axion-Network",
    "version": "0.3.0",
    "examples": [
      {
        "name": "Total Axion Shares",
        "strategy": {
          "name": "total-axion-shares",
          "params": {
            "symbol": "TAS",
            "dataReader": "0x8458fe26CbF3B8295755654C02ABaDFB1d3CBCe6"
          }
        },
        "network": "137",
        "addresses": [
          "0xe8b283b606a212d82036f74f88177375125440f6",
          "0x01E5fEafA5133bA6cdcc7b9afF7Aa5A3bE3f772F",
          "0xd50938c168cfa25d0C65e7E5B065439aDB0524D6"
        ],
        "snapshot": 24085428
      }
    ],
    "schema": null,
    "about": ""
  },
  "unipool-same-token": {
    "key": "unipool-same-token",
    "author": "dapplion",
    "version": "0.1.0",
    "examples": [
      {
        "name": "Unipool rewards contract - staked token = earned token",
        "strategy": {
          "name": "unipool-same-token",
          "params": {
            "symbol": "TOKN",
            "decimals": 18,
            "unipoolAddress": "0xe9Bb6B29B4530C5A76EBd6239925c8f99011d358"
          }
        },
        "network": "5",
        "addresses": [
          "0xcA5720267Fcb7ccA13007AfA096ae01B0864f765"
        ],
        "snapshot": 5145880
      }
    ],
    "schema": null,
    "about": ""
  },
  "volt-voting-power": {
    "key": "volt-voting-power",
    "author": "philipappiah",
    "version": "0.1.2",
    "examples": [
      {
        "name": "Voting shares of VOLT token stakers and holders",
        "strategy": {
          "name": "volt-voting-power",
          "params": {
            "symbol": "VOLT",
            "tokenDecimals": 18,
            "lpTokenAddress": "0x1071392e4cdf7c01d433b87be92beb1f8fd663a8",
            "voltAddress": "0x8df95e66cb0ef38f91d2776da3c921768982fba0",
            "network": "82",
            "swapSubgraph": "https://graph-meter.voltswap.finance/subgraphs/name/meterio/uniswap-v2-subgraph",
            "stakingSubgraph": "https://graph-meter.voltswap.finance/subgraphs/name/meter/geyser-v2"
          }
        },
        "network": "82",
        "addresses": [
          "0xc1a39d256959aa5e97784200f91ce63501dbd990",
          "0x8cafd0397e1b09199A1B1239030Cc6b011AE696d"
        ],
        "snapshot": 12140940
      }
    ],
    "schema": null,
    "about": "# Voting shares of VOLT token stakers and holders\n\nThis strategy computes users shares of volt token (erc-20) in an lp pool.\n\nThe strategy calculates user votes using this formula : user's volt balance + staked volt balance + User LP share mapped volt balance\n\nYou must supply the voltwap token address, symbol, decimals, network id, swap subgraph url, staking subgraph url and token address of the lp token.\n\n```json\n{\n  \"symbol\": \"VOLT\",\n  \"tokenDecimals\": 18,\n  \"lpTokenAddress\": \"0x1071392e4cdf7c01d433b87be92beb1f8fd663a8\",\n  \"voltAddress\": \"0x8df95e66cb0ef38f91d2776da3c921768982fba0\",\n  \"network\": \"82\",\n  \"swapSubgraph\": \"https://graph-meter.voltswap.finance/subgraphs/name/meterio/uniswap-v2-subgraph\",\n  \"stakingSubgraph\": \"https://graph-meter.voltswap.finance/subgraphs/name/meter/geyser-v2\"\n}\n```\n"
  },
  "xdai-stakers-and-holders": {
    "key": "xdai-stakers-and-holders",
    "author": "maxaleks",
    "version": "0.1.0",
    "examples": [
      {
        "name": "STAKE token stakers and holders on xDai",
        "strategy": {
          "name": "xdai-stakers-and-holders"
        },
        "network": "1",
        "addresses": [
          "0x24d19f100ba142543a863fc2294b188e35ab55b9",
          "0x29cf39de6d963d092c177a60ce67879eea9910bb",
          "0x71FBE58b64f14854cF5A3645a67a72d10A09CaE4",
          "0x7ACEe696E2165e33c578d8956cbCf575e5d631d1"
        ],
        "snapshot": 12140940
      }
    ],
    "schema": null,
    "about": ""
  }
}